<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://www.tibco.com/CLEver/BusinessDomain" xmlns:ns9="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns5="http://www.tibco.com/CLEver/Policy" xmlns:ns6="http://www.tibco.com/CLEver/Notification" xmlns:ns7="http://www.tibco.com/CLEver/Resolution" xmlns:pfx="http://www.tibco.com/CLEver/ExtraTypes" xmlns:ns8="http://www.tibco.com/CLEver/Schedule" xmlns:ExceptionRuleXslt="java://XSLTTransform" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns2="http://www.tibco.com/CLEver/ExceptionCategory" xmlns:ns1="http://www.tibco.com/CLEver/TechnicalDomain" xmlns:ns4="http://www.tibco.com/CLEver/ExceptionSeverity" xmlns:ns3="http://www.tibco.com/CLEver/ExceptionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx2="http://www.tibco.com/CLEver/Rule">
    <xsd:import namespace="http://www.tibco.com/CLEver/Policy" schemaLocation="/Shared Resources/Schema Definitions/CLEver/Policy.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CLEver/Rule" schemaLocation="/Shared Resources/Schema Definitions/CLEver/Rule.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CLEver/ExtraTypes" schemaLocation="/Shared Resources/Schema Definitions/CLEver/ExtraTypes.xsd"/>
    <pd:name>Processes/DataServices/RuleGeneration/Exception/Sub/ConstructTests.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="Input">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx2:RulesFull"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>26</pd:startX>
    <pd:startY>88</pd:startY>
    <pd:returnBindings>
        <xsl:copy-of select="$Sort-and-Group/Rules"/>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="Rules">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="Always" minOccurs="0" maxOccurs="unbounded">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Policy">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element ref="ns5:PolicyFull"/>
                                            <xsd:element name="Test" type="xsd:string"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                                <xsd:element name="Test" type="xsd:string"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="WithPrio" minOccurs="0" maxOccurs="unbounded">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Prio" type="xsd:string"/>
                                <xsd:element name="Rule" minOccurs="0" maxOccurs="unbounded">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="Policy">
                                                <xsd:complexType>
                                                    <xsd:sequence>
                                                        <xsd:element ref="ns5:PolicyFull"/>
                                                        <xsd:element name="Test" type="xsd:string"/>
                                                    </xsd:sequence>
                                                </xsd:complexType>
                                            </xsd:element>
                                            <xsd:element name="Test" type="xsd:string"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>841</pd:endX>
    <pd:endY>88</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables>
        <ChildXSLT>
            <xsd:element name="XSLTElement" type="xsd:string"/>
        </ChildXSLT>
    </pd:processVariables>
    <pd:group name="Rule Tests">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>110</pd:x>
        <pd:y>18</pd:y>
        <pd:width>181</pd:width>
        <pd:height>122</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>inputLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:over>$Start/Input/pfx2:RulesFull/pfx2:RuleFull[pfx2:ExecutionPriority!=-1]</pd:over>
            <pd:iterationElementSlot>Rule</pd:iterationElementSlot>
            <pd:indexSlot>i</pd:indexSlot>
            <pd:outSlot>RuleTest</pd:outSlot>
            <pd:activityOutputName>GenerateRuleXpathTest</pd:activityOutputName>
            <pd:accumulateOutput>true</pd:accumulateOutput>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>GenerateRuleXpathTest</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>GenerateRuleXpathTest</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="GenerateRuleXpathTest">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>195</pd:x>
            <pd:y>90</pd:y>
            <config>
                <processName>/Processes/DataServices/RuleGeneration/Exception/Sub/XPathTestHelper.process</processName>
            </config>
            <pd:inputBindings>
                <Input>
                    <xsl:copy-of select="$Rule/pfx2:RuleFull"/>
                </Input>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:activity name="Sort and Group">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>738</pd:x>
        <pd:y>89</pd:y>
        <config>
            <element>
                <xsd:element name="Rules">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="Always" minOccurs="0" maxOccurs="unbounded">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="Policy">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element ref="ns5:PolicyFull"/>
                                                    <xsd:element name="Test" type="xsd:string"/>
                                                </xsd:sequence>
                                            </xsd:complexType>
                                        </xsd:element>
                                        <xsd:element name="Test" type="xsd:string"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                            <xsd:element name="WithPrio" minOccurs="0" maxOccurs="unbounded">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="Prio" type="xsd:string"/>
                                        <xsd:element name="Rule" minOccurs="0" maxOccurs="unbounded">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element name="Policy">
                                                        <xsd:complexType>
                                                            <xsd:sequence>
                                                                <xsd:element ref="ns5:PolicyFull"/>
                                                                <xsd:element name="Test" type="xsd:string"/>
                                                            </xsd:sequence>
                                                        </xsd:complexType>
                                                    </xsd:element>
                                                    <xsd:element name="Test" type="xsd:string"/>
                                                </xsd:sequence>
                                            </xsd:complexType>
                                        </xsd:element>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <Rules>
                <xsl:for-each select="$ScheduleRules/AccumulatedOutput/Rule[Prio=0]">
                    <Always>
                        <xsl:copy-of select="Policy"/>
                        <Test>
                            <xsl:value-of select="Test"/>
                        </Test>
                    </Always>
                </xsl:for-each>
                <xsl:for-each-group select="$ScheduleRules/AccumulatedOutput/Rule[Prio>0]" group-by="Prio">
                    <xsl:sort select="Prio" order="ascending" data-type="number"/>
                    <WithPrio>
                        <Prio>
                            <xsl:value-of select="Prio"/>
                        </Prio>
                        <xsl:for-each select="current-group()">
                            <Rule>
                                <xsl:copy-of select="Policy"/>
                                <Test>
                                    <xsl:value-of select="Test"/>
                                </Test>
                            </Rule>
                        </xsl:for-each>
                    </WithPrio>
                </xsl:for-each-group>
            </Rules>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="RemoveDuplicates">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>355</pd:x>
        <pd:y>88</pd:y>
        <config>
            <element>
                <xsd:element name="Rules">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="Rules" minOccurs="0" maxOccurs="unbounded">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element ref="ns5:PolicyFull"/>
                                        <xsd:element name="Test" type="xsd:string"/>
                                        <xsd:element name="Prio" type="xsd:string"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <Rules>
                <xsl:for-each-group select="$RuleTest/AccumulatedOutput/Output" group-by="concat(current()/ns5:PolicyFull/ns5:ID,'#',Priority,'#',Test)">
                    <Rules>
                        <xsl:copy-of select="ns5:PolicyFull"/>
                        <Test>
                            <xsl:value-of select="if(Test='()')then '(1=1)' else Test"/>
                        </Test>
                        <Prio>
                            <xsl:value-of select="Priority"/>
                        </Prio>
                    </Rules>
                </xsl:for-each-group>
            </Rules>
        </pd:inputBindings>
    </pd:activity>
    <pd:group name="Schedule Tests">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>445</pd:x>
        <pd:y>15</pd:y>
        <pd:width>232</pd:width>
        <pd:height>122</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>inputLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:over>$RemoveDuplicates/Rules/Rules</pd:over>
            <pd:iterationElementSlot>ScheduleRuleIteration</pd:iterationElementSlot>
            <pd:indexSlot>k</pd:indexSlot>
            <pd:outSlot>ScheduleRules</pd:outSlot>
            <pd:activityOutputName>CombineResults</pd:activityOutputName>
            <pd:accumulateOutput>true</pd:accumulateOutput>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>Schedule</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>CombineResults</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Schedule</pd:from>
            <pd:to>CombineResults</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="Schedule">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>519</pd:x>
            <pd:y>86</pd:y>
            <config>
                <processName>/Processes/DataServices/RuleGeneration/General/XsltGeneration/ScheduleRestriction.process</processName>
            </config>
            <pd:inputBindings>
                <Input>
                    <XpathVariable_Day>
                        <xsl:value-of select="$_globalVariables/ns9:GlobalVariables/StaticVariables/ConfigurationObjects/Schedule/XPathDay"/>
                    </XpathVariable_Day>
                    <XpathVariable_Date>
                        <xsl:value-of select="concat('Exception/',$_globalVariables/ns9:GlobalVariables/StaticVariables/ConfigurationObjects/Schedule/XPathDate)"/>
                    </XpathVariable_Date>
                    <xsl:copy-of select="$ScheduleRuleIteration/Rules/ns5:PolicyFull/ns8:Schedule"/>
                </Input>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="CombineResults">
            <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
            <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
            <pd:x>606</pd:x>
            <pd:y>88</pd:y>
            <config>
                <element>
                    <xsd:element name="Rule">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Policy">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element ref="ns5:PolicyFull"/>
                                            <xsd:element name="Test" type="xsd:string"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                                <xsd:element name="Test" type="xsd:string"/>
                                <xsd:element name="Prio" type="xsd:string"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </element>
            </config>
            <pd:inputBindings>
                <Rule>
                    <Policy>
                        <xsl:copy-of select="$ScheduleRuleIteration/Rules/ns5:PolicyFull"/>
                        <Test>
                            <xsl:value-of select="$Schedule/Output/Test"/>
                        </Test>
                    </Policy>
                    <Test>
                        <xsl:value-of select="$ScheduleRuleIteration/Rules/Test"/>
                    </Test>
                    <Prio>
                        <xsl:value-of select="$ScheduleRuleIteration/Rules/Prio"/>
                    </Prio>
                </Rule>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:transition>
        <pd:from>Rule Tests</pd:from>
        <pd:to>RemoveDuplicates</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Sort and Group</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>RemoveDuplicates</pd:from>
        <pd:to>Schedule Tests</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Schedule Tests</pd:from>
        <pd:to>Sort and Group</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Rule Tests</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>