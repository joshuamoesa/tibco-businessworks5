<?xml version="1.0" encoding="utf-8"?>

<!-- edited with XMLSpy v2007 rel. 3 (http://www.altova.com) by Roland Stulemeijer (KPN Telecom) -->
<xs:schema xmlns:tns="http://xmlns.kpn.com/EAI/fixed/0413_FindDocumentOnStellent/1.0/Request"
	 xmlns:xs="http://www.w3.org/2001/XMLSchema"
	 targetNamespace="http://xmlns.kpn.com/EAI/fixed/0413_FindDocumentOnStellent/1.0/Request"
	 elementFormDefault="qualified"
	 attributeFormDefault="unqualified">
	<xs:element name="BODY">
		<xs:annotation>
			<xs:documentation>This is the BODY object for KPN EAI service number 0413 - FindDocumentOnStellent version 1.0 Request message.</xs:documentation>
			<xs:documentation>Automatically generated schema for service:'FindDocumentOnStellent', version:'1.0'</xs:documentation>
			<xs:documentation>Generated on 2008-08-26 17:30:31Z</xs:documentation>
			<xs:documentation>Service paradigm is intended to be Request/Response</xs:documentation>
			<xs:documentation>Service ID is:'0413'</xs:documentation>
			<xs:documentation>The body must always have MinOccurs=0 and MaxOccurs=1, by definition of KPN EAI AG. (For request messages this has no apparent benefit)</xs:documentation>
			<xs:documentation>KPN EAI message body class.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:annotation>
					<xs:documentation>Artificial sequence to separate.</xs:documentation>
				</xs:annotation>
				<xs:element name="REQUESTOR">
					<xs:complexType>
						<xs:sequence>
							<xs:annotation>
								<xs:documentation>Artificial sequence to separate.</xs:documentation>
							</xs:annotation>
							<xs:element name="APPLICATION_ID" type="xs:string">
								<xs:annotation>
									<xs:documentation>Identifier for application posting the request on behalf of a user.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="USERNAME" type="xs:string" minOccurs="0">
								<xs:annotation>
									<xs:documentation>User that triggers the service request.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="ROLE" type="xs:string" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Role for the user that triggers the request as understood by the Stellent instances that will be addressed.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="PASSWORD" type="xs:string" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Optional password. Password is used when no certification is available.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="DOCUMENT_INFORMATION" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>The document information is expressed in terms of document properties, such as CustomerIdentification, DocumentName, DocumentDate, DocumentReference (Dutch: kenmerk). Additional properties can be document type specific, such as InvoiceNumber, InvoiceDueDate and Amount for Invoices.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:annotation>
								<xs:documentation>Artificial sequence to separate.</xs:documentation>
							</xs:annotation>
							<xs:element name="ORDERING" minOccurs="0" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Specify ordering for return list. Multiple ordering properties are possible, in which case the specification order implies ordering precedence.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:sequence>
										<xs:annotation>
											<xs:documentation>Artificial sequence to separate.</xs:documentation>
										</xs:annotation>
										<xs:element name="PROPERTY_NAME" type="xs:string">
											<xs:annotation>
												<xs:documentation>Order based on values for this property.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="ORDER" type="xs:string" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Specify order for property 'NAME' to be used when composing result list. possible values: ascending, descending. The 'natural' order for the property data type will be used (as implemented in the backend database engine).</xs:documentation>
											</xs:annotation>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
							<xs:element name="PROPERTY_NAME" type="xs:string" minOccurs="0" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Indicate what information should be returned with the document references.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="ARCHIVE_INSTANCE_SELECTION">
					<xs:annotation>
						<xs:documentation>Document selector.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ROUTING_PROPERTY" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:sequence>
										<xs:annotation>
											<xs:documentation>Artificial sequence to separate.</xs:documentation>
										</xs:annotation>
										<xs:element name="NAME" type="xs:string"/>
										<xs:element name="VALUE" type="xs:string"/>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
							<xs:element name="DOCUMENT_TYPE" type="xs:string">
								<xs:annotation>
									<xs:documentation>Search only for specified document types. Document types are CustomerOrder, Letter, Contract, Invoice, </xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="MARKET_SEGMENT" type="xs:string" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Select from set of documents stored for any of these market segments.</xs:documentation>
									<xs:documentation>Default (autogenerated) min and max occurs values.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="DOMAIN" type="xs:string" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Select from set of documents stored for any of these business domains.</xs:documentation>
									<xs:documentation>Default (autogenerated) min and max occurs values.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="PRODUCT_GROUP" type="xs:string" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Select from set of documents stored for any of these business domains.</xs:documentation>
									<xs:documentation>Default (autogenerated) min and max occurs values.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="DOCUMENT_SELECTION" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:sequence>
							<xs:annotation>
								<xs:documentation>Artificial sequence to separate.</xs:documentation>
							</xs:annotation>
							<xs:element name="SELECTION_RANGE" minOccurs="0">
								<xs:complexType>
									<xs:sequence>
										<xs:annotation>
											<xs:documentation>Artificial sequence to separate.</xs:documentation>
										</xs:annotation>
										<xs:element name="MAX_RESULTS" type="xs:integer" minOccurs="0">
											<xs:annotation>
												<xs:documentation>The maximum number of matches to return. If not specified, the service will use a maximum limit of 20 which is the limit per backend. Each backend is thus limited to a maximum of 20 results per request. The total number of results may be more than 20 as each backend may return at most 20 results.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="PAGE_NUMBER" type="xs:integer" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Per backend archive the offset is calculated as a funciton of PAGE_NUMBER and MAX_RESULTS. BACKEND_OFFSET = (PAGE_NUMBER-1)*MAX_RESULT.
</xs:documentation>
											</xs:annotation>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
							<xs:element name="DOCUMENT_SPECIFICATION" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Document specification entry. Multiple entries are possible, resulting in an 'or' action, references for all documents matching any of the document specification etries will be returned.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:sequence>
										<xs:annotation>
											<xs:documentation>Artificial sequence to separate.</xs:documentation>
										</xs:annotation>
										<xs:element name="DOCUMENT_PROPERTY" maxOccurs="unbounded">
											<xs:annotation>
												<xs:documentation>Additional selection parameters. All indicated DOCUMENT_ATTRIBUTE should match paired EXPRESSION (condition and operations).
This selects on free documents attributes - client is responsible that attribute is known for the document type. Failure will result in error condition.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:sequence>
													<xs:annotation>
														<xs:documentation>Artificial sequence to separate.</xs:documentation>
													</xs:annotation>
													<xs:element name="PROPERTY_NAME">
														<xs:annotation>
															<xs:documentation>Document property to select in comparison.
This element can be used for the PROPORTY_NAMES defined for the non-cannonical custum fileds by the frontend application</xs:documentation>
														</xs:annotation>
														<xs:complexType>
															<xs:simpleContent>
																<xs:extension base="xs:string">
																	<xs:attribute name="FORCE" type="xs:boolean"/>
																</xs:extension>
															</xs:simpleContent>
														</xs:complexType>
													</xs:element>
													<xs:element name="VALUE" type="xs:string">
														<xs:annotation>
															<xs:documentation>Selection expression which may contain wildcards as allowed by target application.
This element can be used for the VALUE's defined for the non-cannonical custum fileds by the frontend application</xs:documentation>
														</xs:annotation>
													</xs:element>
													<xs:element name="COMPARATOR" type="xs:string" minOccurs="0">
														<xs:annotation>
															<xs:documentation>Optional comparator to use in matching the value with the property. Default action is to use the equal. The comparator allows a different comparison.
Note: requestor is responsible of specifying a valid operator understood by the archive(s).
This element can be used for the COMPARATOR's defined for the non-cannonical custum fileds by the frontend application</xs:documentation>
														</xs:annotation>
													</xs:element>
												</xs:sequence>
											</xs:complexType>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="ARCHIVE_INSTANCE" type="xs:string"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>