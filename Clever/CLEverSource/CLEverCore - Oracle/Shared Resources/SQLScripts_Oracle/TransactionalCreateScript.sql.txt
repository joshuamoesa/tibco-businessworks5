CREATE TABLE "TDA_TRANSACTIONID" 
   (	"ID" INTEGER NOT NULL ENABLE,  
		"NAME" VARCHAR2(125)
   ) ;
CREATE TABLE "TDA_REFERENCE" 
   (	"REFID" INTEGER NOT NULL ENABLE,
   		"ID" INTEGER,
   		"TYPE" VARCHAR2(1),  
		"NAME" VARCHAR2(125),
		"VALUE" VARCHAR2(125)
   ) ;

CREATE TABLE "TDA_SERVICE" 
   (	"ID" INTEGER NOT NULL ENABLE,  
		"NAME" VARCHAR2(125)
   ) ;

CREATE TABLE "TDA_COMPONENT" 
   (	"ID" INTEGER NOT NULL ENABLE,  
		"NAME" VARCHAR2(125)
   ) ;
   
CREATE TABLE "TDA_PROCEDURE" 
   (	"ID" INTEGER NOT NULL ENABLE,  
		"NAME" VARCHAR2(125)
   ) ;

CREATE TABLE "TDA_HOSTNAME" 
   (	"ID" INTEGER NOT NULL ENABLE,  
		"NAME" VARCHAR2(125)
   ) ;
CREATE TABLE "TDA_EXCEPTIONCODE" 
   (	"ID" INTEGER NOT NULL ENABLE,  
		"NAME" VARCHAR2(125)
   ) ;

CREATE TABLE "TDA_BUSINESSDOMAIN" 
   (	"ID" INTEGER NOT NULL ENABLE,  
		"NAME" VARCHAR2(125)
   ) ;

CREATE TABLE "TDA_TECHNICALDOMAIN" 
   (	"ID" INTEGER NOT NULL ENABLE, 
		"NAME" VARCHAR2(125)
   ) ;
   

CREATE TABLE "TDA_EXCEPTIONCATEGORY" 
   (	"ID" INTEGER NOT NULL ENABLE, 
		"NAME" VARCHAR2(50) NOT NULL ENABLE
   ) ;

CREATE TABLE "TDA_EXCEPTIONTYPE" 
   (	"ID" INTEGER NOT NULL ENABLE, 
	"NAME" VARCHAR2(50)
   ) ;

CREATE TABLE "TDA_EXCEPTIONSEVERITY" 
   (	"ID" INTEGER NOT NULL ENABLE, 
		"NAME" VARCHAR2(50)
	) ;

CREATE TABLE "TDA_EXCEPTIONLARGETEXT" 
   (	"ID" INTEGER NOT NULL ENABLE, 
  		"TYPE" VARCHAR2(10),  
		"TEXT"  CLOB
	) ;

CREATE TABLE "TDA_BUSINESSOPERATION" 
   (	"ID" INTEGER NOT NULL ENABLE, 
		"NAME" VARCHAR2(50)
	) ;

CREATE TABLE "TDA_BUSINESSCONCEPT" 
   (	"ID" INTEGER NOT NULL ENABLE, 
		"NAME" VARCHAR2(50)
	) ;
CREATE TABLE "TDA_STATUS" 
   (	"ID" INTEGER NOT NULL ENABLE, 
		"NAME" VARCHAR2(50)
	) ;
	
CREATE TABLE "TDA_EXCEPTION" 
   (	"ID" INTEGER NOT NULL ENABLE, 
		"TRANSACTIONID"  INTEGER,
	    "SERVICE"  INTEGER,
	    "COMPONENT"  INTEGER,
	    "PROCEDURENAME"  INTEGER,
 	    "HOSTNAME"  INTEGER,
	    "EXCEPTIONCODE"  INTEGER,
	    "BUSINESSDOMAIN"  INTEGER,
		"BUSINESSOPERATION"  INTEGER,
		"BUSINESSCONCEPT"  INTEGER,		 
	    "TECHNICALDOMAIN"  INTEGER,
	    "EXCEPTIONCATEGORY"  INTEGER,
	    "EXCEPTIONSEVERITY"  INTEGER,
   	    "EXCEPTIONTYPE"  INTEGER,
		"DATE_NUMBER" INTEGER,
	    "DATETIME"  TIMESTAMP,
	    "MESSAGE"  INTEGER,
	    "REPLYDESTINATION" VARCHAR(255),
	    "TRANSACTIONDATA"  INTEGER,
	    "DUMPANALYSIS"  INTEGER,
		"REMARK"  VARCHAR(500),
		"STATUS" INTEGER
) ;

CREATE TABLE "TDA_LOGSTATUS" 
   (	"ID" INTEGER NOT NULL ENABLE, 
		"NAME" VARCHAR2(50)
	) ;

CREATE TABLE "TDA_ROLE" 
   (	"ID" INTEGER NOT NULL ENABLE, 
		"NAME" VARCHAR2(50)
	) ;
	
CREATE TABLE "TDA_LOGGINGLARGETEXT" 
   (	"ID" INTEGER NOT NULL ENABLE,
   		"NAME" VARCHAR2(50),
  		"TYPE" VARCHAR2(10),  
		"TEXT"  CLOB
	) ;
	
CREATE TABLE "TDA_LOGGING" 
   (	"ID" INTEGER NOT NULL ENABLE, 
		"TRANSACTIONID"  INTEGER,
	    "SERVICE"  INTEGER,
	    "COMPONENT"  INTEGER,
		"ROLE"		 INTEGER,
 	    "HOSTNAME"  INTEGER,
	    "BUSINESSDOMAIN"  INTEGER,
		"BUSINESSOPERATION"  INTEGER,
		"BUSINESSCONCEPT"  INTEGER,		 
	    "TECHNICALDOMAIN"  INTEGER,
		"DATE_NUMBER" INTEGER,
	    "DATETIME"  TIMESTAMP,
		"LOGMESSAGE"  VARCHAR(500),
		"LOGSTATUS" INTEGER,
		"PROCESSNAME" INTEGER 
) ;

CREATE UNIQUE INDEX "TDA_REFERENCE_UI1" ON "TDA_REFERENCE" ("REFID");
CREATE UNIQUE INDEX "TDA_BUSINESSOPERATION_UI1" ON "TDA_BUSINESSOPERATION" ("ID");
CREATE UNIQUE INDEX "TDA_BUSINESSCONCEPT_UI1" ON "TDA_BUSINESSCONCEPT" ("ID");
CREATE UNIQUE INDEX "TDA_TRANSACTIONID_UI1" ON "TDA_TRANSACTIONID" ("ID");
CREATE UNIQUE INDEX "TDA_SERVICE_UI1" ON "TDA_SERVICE" ("ID");
CREATE UNIQUE INDEX "TDA_COMPONENT_UI1" ON "TDA_COMPONENT" ("ID");
CREATE UNIQUE INDEX "TDA_PROCEDURE_UI1" ON "TDA_PROCEDURE" ("ID");
CREATE UNIQUE INDEX "TDA_HOSTNAME_UI1" ON "TDA_HOSTNAME" ("ID");
CREATE UNIQUE INDEX "TDA_EXCEPTIONCODE_UI1" ON "TDA_EXCEPTIONCODE" ("ID");  
CREATE UNIQUE INDEX "TDA_BUSINESSDOMAIN_UI1" ON "TDA_BUSINESSDOMAIN" ("ID");
CREATE UNIQUE INDEX "TDA_TECHNICALDOMAIN_UI1" ON "TDA_TECHNICALDOMAIN" ("ID");
CREATE UNIQUE INDEX "TDA_EXCEPTIONCATEGORY_UI1" ON "TDA_EXCEPTIONCATEGORY" ("ID");
CREATE UNIQUE INDEX "TDA_EXCEPTIONSEVERITY_UI1" ON "TDA_EXCEPTIONSEVERITY" ("ID");
CREATE UNIQUE INDEX "TDA_EXCEPTIONTYPE_UI1" ON "TDA_EXCEPTIONTYPE" ("ID");
CREATE UNIQUE INDEX "TDA_EXCEPTION_UI1" ON "TDA_EXCEPTION" ("ID");
CREATE UNIQUE INDEX "TDA_EXCEPTIONLARGETEXT_UI1" ON "TDA_EXCEPTIONLARGETEXT" ("ID");
CREATE UNIQUE INDEX "TDA_STATUS_UI1" ON "TDA_STATUS" ("ID");
CREATE UNIQUE INDEX "TDA_LOGSTATUS_UI1" ON "TDA_LOGSTATUS" ("ID");
CREATE UNIQUE INDEX "TDA_LOGGING_UI1" ON "TDA_LOGGING" ("ID");
CREATE UNIQUE INDEX "TDA_ROLE_UI1" ON "TDA_ROLE" ("ID");
CREATE UNIQUE INDEX "TDA_LOGGINGLARGETEXT_UI1" ON "TDA_LOGGINGLARGETEXT" ("ID","NAME");

CREATE UNIQUE INDEX "TDA_BUSINESSOPERATION_UI2" ON "TDA_BUSINESSOPERATION" ("NAME");
CREATE UNIQUE INDEX "TDA_BUSINESSCONCEPT_UI2" ON "TDA_BUSINESSCONCEPT" ("NAME");
CREATE UNIQUE INDEX "TDA_TRANSACTIONID_UI2" ON "TDA_TRANSACTIONID" ("NAME");
CREATE UNIQUE INDEX "TDA_SERVICE_UI2" ON "TDA_SERVICE" ("NAME");
CREATE UNIQUE INDEX "TDA_COMPONENT_UI2" ON "TDA_COMPONENT" ("NAME");
CREATE UNIQUE INDEX "TDA_PROCEDURE_UI2" ON "TDA_PROCEDURE" ("NAME");
CREATE UNIQUE INDEX "TDA_HOSTNAME_UI2" ON "TDA_HOSTNAME" ("NAME");
CREATE UNIQUE INDEX "TDA_EXCEPTIONCODE_UI2" ON "TDA_EXCEPTIONCODE" ("NAME");  
CREATE UNIQUE INDEX "TDA_BUSINESSDOMAIN_UI2" ON "TDA_BUSINESSDOMAIN" ("NAME");
CREATE UNIQUE INDEX "TDA_TECHNICALDOMAIN_UI2" ON "TDA_TECHNICALDOMAIN" ("NAME");
CREATE UNIQUE INDEX "TDA_EXCEPTIONCATEGORY_UI2" ON "TDA_EXCEPTIONCATEGORY" ("NAME");
CREATE UNIQUE INDEX "TDA_EXCEPTIONSEVERITY_UI2" ON "TDA_EXCEPTIONSEVERITY" ("NAME");
CREATE UNIQUE INDEX "TDA_EXCEPTIONTYPE_UI2" ON "TDA_EXCEPTIONTYPE" ("NAME");
CREATE UNIQUE INDEX "TDA_STATUS_UI2" ON "TDA_STATUS" ("NAME");
CREATE UNIQUE INDEX "TDA_LOGSTATUS_UI2" ON "TDA_LOGSTATUS" ("NAME");
CREATE UNIQUE INDEX "TDA_ROLE_UI2" ON "TDA_ROLE" ("NAME");

CREATE INDEX "TDA_EXCEPTION_UI2" ON "TDA_EXCEPTION" ("DATE_NUMBER");
CREATE INDEX "TDA_LOGGING_UI2" ON "TDA_LOGGING" ("DATE_NUMBER");
CREATE INDEX "TDA_LOGGING_UI3" ON "TDA_LOGGING" ("DATETIME");

CREATE INDEX "TDA_REFERENCE_UI2" ON "TDA_REFERENCE" ("ID");
CREATE INDEX "TDA_REFERENCE_UI3" ON "TDA_REFERENCE" ("TYPE");
CREATE INDEX "TDA_REFERENCE_UI4" ON "TDA_REFERENCE" ("VALUE");
CREATE INDEX "TDA_REFERENCE_UI5" ON "TDA_REFERENCE" ("NAME");

ALTER TABLE "TDA_REFERENCE" ADD CONSTRAINT "TDA_REFERENCE_PK" PRIMARY KEY ("REFID") ENABLE;
ALTER TABLE "TDA_BUSINESSOPERATION" ADD CONSTRAINT "TDA_BUSINESSOPERATION_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_BUSINESSCONCEPT" ADD CONSTRAINT "TDA_BUSINESSCONCEPT_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_TRANSACTIONID" ADD CONSTRAINT "TDA_TRANSACTIONID_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_SERVICE" ADD CONSTRAINT "TDA_SERVICE_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_COMPONENT" ADD CONSTRAINT "TDA_COMPONENT_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_PROCEDURE" ADD CONSTRAINT "TDA_PROCEDURE_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_HOSTNAME" ADD CONSTRAINT "TDA_HOSTNAME_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTIONCODE" ADD CONSTRAINT "TDA_EXCEPTIONCODE_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_BUSINESSDOMAIN" ADD CONSTRAINT "TDA_BUSINESSDOMAIN_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_TECHNICALDOMAIN" ADD CONSTRAINT "TDA_TECHNICALDOMAIN_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTIONCATEGORY" ADD CONSTRAINT "TDA_EXCEPTIONCATEGORY_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTIONSEVERITY" ADD CONSTRAINT "TDA_EXCEPTIONSEVERITY_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTIONTYPE" ADD CONSTRAINT "TDA_EXCEPTIONTYPE_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD CONSTRAINT "TDA_EXCEPTION_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTIONLARGETEXT" ADD CONSTRAINT "TDA_EXCEPTIONLARGETEXT_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_STATUS" ADD CONSTRAINT "TDA_STATUS_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_LOGSTATUS" ADD CONSTRAINT "TDA_LOGSTATUS_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_ROLE" ADD CONSTRAINT "TDA_ROLE_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_LOGGING" ADD CONSTRAINT "TDA_LOGGING_PK" PRIMARY KEY ("ID") ENABLE;
ALTER TABLE "TDA_LOGGINGLARGETEXT" ADD CONSTRAINT "TDA_LOGGINGLARGETEXT_PK" PRIMARY KEY ("ID","NAME") ENABLE;

/* References */
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("BUSINESSOPERATION") REFERENCES "TDA_BUSINESSOPERATION" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("BUSINESSCONCEPT") REFERENCES "TDA_BUSINESSCONCEPT" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("TRANSACTIONID") REFERENCES "TDA_TRANSACTIONID" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("SERVICE") REFERENCES "TDA_SERVICE" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("COMPONENT") REFERENCES "TDA_COMPONENT" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("PROCEDURENAME") REFERENCES "TDA_PROCEDURE" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("HOSTNAME") REFERENCES "TDA_HOSTNAME" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("EXCEPTIONCODE") REFERENCES "TDA_EXCEPTIONCODE" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("BUSINESSDOMAIN") REFERENCES "TDA_BUSINESSDOMAIN" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("TECHNICALDOMAIN") REFERENCES "TDA_TECHNICALDOMAIN" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("EXCEPTIONCATEGORY") REFERENCES "TDA_EXCEPTIONCATEGORY" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("EXCEPTIONSEVERITY") REFERENCES "TDA_EXCEPTIONSEVERITY" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("EXCEPTIONTYPE") REFERENCES "TDA_EXCEPTIONTYPE" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("MESSAGE") REFERENCES "TDA_EXCEPTIONLARGETEXT" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("TRANSACTIONDATA") REFERENCES "TDA_EXCEPTIONLARGETEXT" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("DUMPANALYSIS") REFERENCES "TDA_EXCEPTIONLARGETEXT" ("ID") ENABLE;
ALTER TABLE "TDA_EXCEPTION" ADD FOREIGN KEY ("STATUS") REFERENCES "TDA_STATUS" ("ID") ENABLE;

ALTER TABLE "TDA_LOGGING" ADD FOREIGN KEY ("BUSINESSOPERATION") REFERENCES "TDA_BUSINESSOPERATION" ("ID") ENABLE;
ALTER TABLE "TDA_LOGGING" ADD FOREIGN KEY ("BUSINESSCONCEPT") REFERENCES "TDA_BUSINESSCONCEPT" ("ID") ENABLE;
ALTER TABLE "TDA_LOGGING" ADD FOREIGN KEY ("TRANSACTIONID") REFERENCES "TDA_TRANSACTIONID" ("ID") ENABLE;
ALTER TABLE "TDA_LOGGING" ADD FOREIGN KEY ("SERVICE") REFERENCES "TDA_SERVICE" ("ID") ENABLE;
ALTER TABLE "TDA_LOGGING" ADD FOREIGN KEY ("COMPONENT") REFERENCES "TDA_COMPONENT" ("ID") ENABLE;
ALTER TABLE "TDA_LOGGING" ADD FOREIGN KEY ("ROLE") REFERENCES "TDA_ROLE" ("ID") ENABLE;
ALTER TABLE "TDA_LOGGING" ADD FOREIGN KEY ("HOSTNAME") REFERENCES "TDA_HOSTNAME" ("ID") ENABLE;
ALTER TABLE "TDA_LOGGING" ADD FOREIGN KEY ("BUSINESSDOMAIN") REFERENCES "TDA_BUSINESSDOMAIN" ("ID") ENABLE;
ALTER TABLE "TDA_LOGGING" ADD FOREIGN KEY ("TECHNICALDOMAIN") REFERENCES "TDA_TECHNICALDOMAIN" ("ID") ENABLE;
ALTER TABLE "TDA_LOGGING" ADD FOREIGN KEY ("LOGSTATUS") REFERENCES "TDA_LOGSTATUS" ("ID") ENABLE;
ALTER TABLE "TDA_LOGGING" ADD FOREIGN KEY ("PROCESSNAME") REFERENCES "TDA_PROCEDURE" ("ID") ENABLE;

CREATE SEQUENCE SEQ_TDA_BUSINESSOPERATION START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_BUSINESSCONCEPT START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_TRANSACTIONID START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_SERVICE START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_COMPONENT START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_PROCEDURE START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_HOSTNAME START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_EXCEPTIONCODE START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_BUSINESSDOMAIN START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_TECHNICALDOMAIN START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_EXCEPTIONCATEGORY START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_EXCEPTIONSEVERITY START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_EXCEPTIONTYPE START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_EXCEPTION START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_EXCEPTIONLARGETEXT START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_STATUS START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_LOGSTATUS START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_ROLE START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_LOGGING START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;
CREATE SEQUENCE SEQ_TDA_REFERENCE START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE NOCYCLE NOORDER;

CREATE OR REPLACE TRIGGER "TRG_TDA_REFERENCE" BEFORE INSERT ON TDA_REFERENCE
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_REFERENCE.nextval into :new.REFID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_REFERENCE" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_EXCEPTIONCATEGORY" BEFORE INSERT ON TDA_EXCEPTIONCATEGORY
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_EXCEPTIONCATEGORY.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_EXCEPTIONCATEGORY" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_EXCEPTIONCODE" BEFORE INSERT ON TDA_EXCEPTIONCODE
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_EXCEPTIONCODE.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_EXCEPTIONCODE" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_EXCEPTIONSEVERITY" BEFORE INSERT ON TDA_EXCEPTIONSEVERITY
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_EXCEPTIONSEVERITY.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_EXCEPTIONSEVERITY" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_EXCEPTIONTYPE" BEFORE INSERT ON TDA_EXCEPTIONTYPE
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_EXCEPTIONTYPE.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_EXCEPTIONTYPE" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_STATUS" BEFORE INSERT ON TDA_STATUS
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_STATUS.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_STATUS" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_BUSINESSOPERATION" BEFORE INSERT ON TDA_BUSINESSOPERATION
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_BUSINESSOPERATION.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_BUSINESSOPERATION" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_BUSINESSCONCEPT" BEFORE INSERT ON TDA_BUSINESSCONCEPT
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_BUSINESSCONCEPT.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_BUSINESSCONCEPT" ENABLE;


CREATE OR REPLACE TRIGGER "TRG_TDA_TRANSACTIONID" BEFORE INSERT ON TDA_TRANSACTIONID
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_TRANSACTIONID.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_TRANSACTIONID" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_SERVICE" BEFORE INSERT ON TDA_SERVICE
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_SERVICE.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_SERVICE" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_COMPONENT" BEFORE INSERT ON TDA_COMPONENT
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_COMPONENT.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_COMPONENT" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_ROLE" BEFORE INSERT ON TDA_ROLE
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_ROLE.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_ROLE" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_HOSTNAME" BEFORE INSERT ON TDA_HOSTNAME
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_HOSTNAME.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_HOSTNAME" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_BUSINESSDOMAIN" BEFORE INSERT ON TDA_BUSINESSDOMAIN
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_BUSINESSDOMAIN.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_BUSINESSDOMAIN" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_TECHNICALDOMAIN" BEFORE INSERT ON TDA_TECHNICALDOMAIN
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_TECHNICALDOMAIN.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_TECHNICALDOMAIN" ENABLE;

CREATE OR REPLACE TRIGGER "TRG_TDA_LOGSTATUS" BEFORE INSERT ON TDA_LOGSTATUS
	FOR EACH ROW
BEGIN
	SELECT SEQ_TDA_LOGSTATUS.nextval into :new.ID From dual;
END;
/
ALTER TRIGGER "TRG_TDA_LOGSTATUS" ENABLE;


CREATE OR REPLACE procedure TDA_INSERTLOGGING(
	   TRANSACTIONID IN VARCHAR,
	   SERVICE IN VARCHAR,
	   COMPONENT IN VARCHAR,
	   PROCESSNAME IN VARCHAR,
	   ROLE IN VARCHAR,
	   STATUS IN VARCHAR,
	   HOSTNAME IN VARCHAR,
	   BUSINESSDOMAIN IN VARCHAR,
	   BUSINESSCONCEPT IN VARCHAR,
	   BUSINESSOPERATION IN VARCHAR,
	   TECHNICALDOMAIN IN VARCHAR,
	   DATE_NUMBER IN VARCHAR,
	   DATETIME IN TIMESTAMP,
	   MESSAGE IN VARCHAR,
	   LOGGINGID OUT INTEGER
)
as
	INTLOGGING			INTEGER;
    INTBUSINESSCONCEPT INTEGER;
    INTBUSINESSOPERATION INTEGER;
	INTTRANSACTIONID	INTEGER;
	INTSERVICE	INTEGER;
	INTCOMPONENT	INTEGER;
	INTROLE	INTEGER;
	INTHOSTNAME	INTEGER;
	INTBUSINESSDOMAIN	INTEGER;
	INTTECHNICALDOMAIN	INTEGER;
	INTSTATUS			INTEGER;
	INTPROCESSNAME		INTEGER;

begin

IF PROCESSNAME IS NOT NULL THEN
    SELECT count(*) INTO INTPROCESSNAME FROM TDA_PROCEDURE WHERE NAME=PROCESSNAME;
    IF INTPROCESSNAME=0 THEN
	   SELECT SEQ_TDA_PROCEDURE.nextval INTO INTPROCESSNAME FROM DUAL;
	   INSERT INTO TDA_PROCEDURE(ID,NAME) VALUES (INTPROCESSNAME,PROCESSNAME);
	ELSE
		SELECT ID INTO INTPROCESSNAME FROM TDA_PROCEDURE WHERE NAME=PROCESSNAME;
	END IF;
ELSE
      INTPROCESSNAME:=NULL;
END IF;

COMMIT;

IF BUSINESSCONCEPT IS NOT NULL THEN
    SELECT count(*) INTO INTBUSINESSCONCEPT FROM TDA_BUSINESSCONCEPT WHERE NAME=BUSINESSCONCEPT;
    IF INTBUSINESSCONCEPT=0 THEN
	   SELECT SEQ_TDA_BUSINESSCONCEPT.nextval INTO INTBUSINESSCONCEPT FROM DUAL;
	   INSERT INTO TDA_BUSINESSCONCEPT(ID,NAME) VALUES (INTBUSINESSCONCEPT,BUSINESSCONCEPT);
	ELSE
		SELECT ID INTO INTBUSINESSCONCEPT FROM TDA_BUSINESSCONCEPT WHERE NAME=BUSINESSCONCEPT;
	END IF;
ELSE
      INTBUSINESSCONCEPT:=NULL;
END IF;

COMMIT;

IF BUSINESSOPERATION IS NOT NULL THEN
    SELECT count(*) INTO INTBUSINESSOPERATION FROM TDA_BUSINESSOPERATION WHERE NAME=BUSINESSOPERATION;
    IF INTBUSINESSOPERATION=0 THEN
	   SELECT SEQ_TDA_BUSINESSOPERATION.nextval INTO INTBUSINESSOPERATION FROM DUAL;
	   INSERT INTO TDA_BUSINESSOPERATION(ID,NAME) VALUES (INTBUSINESSOPERATION,BUSINESSOPERATION);
	ELSE
		SELECT ID INTO INTBUSINESSOPERATION FROM TDA_BUSINESSOPERATION WHERE NAME=BUSINESSOPERATION;
	END IF;
ELSE
      INTBUSINESSOPERATION:=NULL;
END IF;

COMMIT;

IF TRANSACTIONID IS NOT NULL THEN
    SELECT count(*) INTO INTTRANSACTIONID FROM TDA_TRANSACTIONID WHERE NAME=TRANSACTIONID;
    IF INTTRANSACTIONID=0 THEN
	   SELECT SEQ_TDA_TRANSACTIONID.nextval INTO INTTRANSACTIONID FROM DUAL;
	   INSERT INTO TDA_TRANSACTIONID(ID,NAME) VALUES (INTTRANSACTIONID,TRANSACTIONID);
	ELSE
		SELECT ID INTO INTTRANSACTIONID FROM TDA_TRANSACTIONID WHERE NAME=TRANSACTIONID;
	END IF;
ELSE
      INTTRANSACTIONID:=NULL;
END IF;

COMMIT;

IF SERVICE IS NOT NULL THEN
    SELECT count(*) INTO INTSERVICE FROM TDA_SERVICE WHERE NAME=SERVICE;
    IF INTSERVICE=0 THEN
	   SELECT SEQ_TDA_SERVICE.nextval INTO INTSERVICE FROM DUAL;
	   INSERT INTO TDA_SERVICE(ID,NAME) VALUES (INTSERVICE,SERVICE);
	ELSE
		SELECT ID INTO INTSERVICE FROM TDA_SERVICE WHERE NAME=SERVICE;
	END IF;
ELSE
      INTSERVICE:=NULL;
END IF;

COMMIT;

IF ROLE IS NOT NULL THEN
    SELECT count(*) INTO INTROLE FROM TDA_ROLE WHERE NAME=ROLE;
    IF INTROLE=0 THEN
	   SELECT SEQ_TDA_ROLE.nextval INTO INTROLE FROM DUAL;
	   INSERT INTO TDA_ROLE(ID,NAME) VALUES (INTROLE,ROLE);
	ELSE
		SELECT ID INTO INTROLE FROM TDA_ROLE WHERE NAME=ROLE;
	END IF;
ELSE
      INTROLE:=NULL;
END IF;

COMMIT;

IF COMPONENT IS NOT NULL THEN
    SELECT count(*) INTO INTCOMPONENT FROM TDA_COMPONENT WHERE NAME=COMPONENT;
    IF INTCOMPONENT=0 THEN
	   SELECT SEQ_TDA_COMPONENT.nextval INTO INTCOMPONENT FROM DUAL;
	   INSERT INTO TDA_COMPONENT(ID,NAME) VALUES (INTCOMPONENT,COMPONENT);
	ELSE
		SELECT ID INTO INTCOMPONENT FROM TDA_COMPONENT WHERE NAME=COMPONENT;
	END IF;
ELSE
      INTCOMPONENT:=NULL;
END IF;

COMMIT;

IF HOSTNAME IS NOT NULL THEN
    SELECT count(*) INTO INTHOSTNAME FROM TDA_HOSTNAME WHERE NAME=HOSTNAME;
    IF INTHOSTNAME=0 THEN
	   SELECT SEQ_TDA_HOSTNAME.nextval INTO INTHOSTNAME FROM DUAL;
	   INSERT INTO TDA_HOSTNAME(ID,NAME) VALUES (INTHOSTNAME,HOSTNAME);
	ELSE
		SELECT ID INTO INTHOSTNAME FROM TDA_HOSTNAME WHERE NAME=HOSTNAME;
	END IF;
ELSE
      INTHOSTNAME:=NULL;
END IF;

COMMIT;

IF BUSINESSDOMAIN IS NOT NULL THEN
    SELECT count(*) INTO INTBUSINESSDOMAIN FROM TDA_BUSINESSDOMAIN WHERE NAME=BUSINESSDOMAIN;
    IF INTBUSINESSDOMAIN=0 THEN
	   SELECT SEQ_TDA_BUSINESSDOMAIN.nextval INTO INTBUSINESSDOMAIN FROM DUAL;
	   INSERT INTO TDA_BUSINESSDOMAIN(ID,NAME) VALUES (INTBUSINESSDOMAIN,BUSINESSDOMAIN);
	ELSE
		SELECT ID INTO INTBUSINESSDOMAIN FROM TDA_BUSINESSDOMAIN WHERE NAME=BUSINESSDOMAIN;
	END IF;
ELSE
      INTBUSINESSDOMAIN:=NULL;
END IF;

COMMIT;

IF TECHNICALDOMAIN IS NOT NULL THEN
    SELECT count(*) INTO INTTECHNICALDOMAIN FROM TDA_TECHNICALDOMAIN WHERE NAME=TECHNICALDOMAIN;
    IF INTTECHNICALDOMAIN=0 THEN
	   SELECT SEQ_TDA_TECHNICALDOMAIN.nextval INTO INTTECHNICALDOMAIN FROM DUAL;
	   INSERT INTO TDA_TECHNICALDOMAIN(ID,NAME) VALUES (INTTECHNICALDOMAIN,TECHNICALDOMAIN);
	ELSE
		SELECT ID INTO INTTECHNICALDOMAIN FROM TDA_TECHNICALDOMAIN WHERE NAME=TECHNICALDOMAIN;
	END IF;
ELSE
      INTTECHNICALDOMAIN:=NULL;
END IF;

COMMIT;

IF STATUS IS NOT NULL THEN
    SELECT count(*) INTO INTSTATUS FROM TDA_LOGSTATUS WHERE NAME=STATUS;
    IF INTSTATUS=0 THEN
	   SELECT SEQ_TDA_LOGSTATUS.nextval INTO INTSTATUS FROM DUAL;
	   INSERT INTO TDA_LOGSTATUS(ID,NAME) VALUES (INTSTATUS,STATUS);
	ELSE
		SELECT ID INTO INTSTATUS FROM TDA_LOGSTATUS WHERE NAME=STATUS;
	END IF;
ELSE
      INTSTATUS:=NULL;
END IF;

COMMIT;

SELECT SEQ_TDA_LOGGING.nextval into INTLOGGING FROM DUAL;



INSERT INTO TDA_LOGGING(ID,
		TRANSACTIONID,
	    SERVICE,
	    COMPONENT,
		ROLE,
 	    HOSTNAME,
	    BUSINESSDOMAIN,
		BUSINESSCONCEPT,
		BUSINESSOPERATION,
	    TECHNICALDOMAIN,
		DATE_NUMBER,
	    DATETIME,
		LOGSTATUS,
		PROCESSNAME,LOGMESSAGE
)
 VALUES(
		INTLOGGING,
		INTTRANSACTIONID,
		INTSERVICE,
		INTCOMPONENT,
		INTROLE,
		INTHOSTNAME,
		INTBUSINESSDOMAIN,
		INTBUSINESSCONCEPT,
		INTBUSINESSOPERATION,
		INTTECHNICALDOMAIN,
		DATE_NUMBER,
		DATETIME,
		INTSTATUS,
		INTPROCESSNAME,
		MESSAGE
);
LOGGINGID:=INTLOGGING;
end;
/

CREATE OR REPLACE procedure TDA_UPDATEEXCEPTIONSTATE(
	   STATUS IN VARCHAR,
	   EXCEPTIONID IN INTEGER)
as
	INTSTATUS			INTEGER;
begin


IF STATUS IS NOT NULL THEN
    SELECT count(*) INTO INTSTATUS FROM TDA_STATUS WHERE NAME=STATUS;
    IF INTSTATUS=0 THEN
	   SELECT SEQ_TDA_STATUS.nextval INTO INTSTATUS FROM DUAL;
	   INSERT INTO TDA_STATUS(ID,NAME) VALUES (INTSTATUS,STATUS);
	ELSE
		SELECT ID INTO INTSTATUS FROM TDA_STATUS WHERE NAME=STATUS;
	END IF;
ELSE
      INTSTATUS:=NULL;
END IF;

COMMIT;


Update tda_exception
Set status = INTSTATUS
where ID = EXCEPTIONID;


end;
/

CREATE OR REPLACE procedure TDA_INSERTEXCEPTION(
	   TRANSACTIONID IN VARCHAR,
	   SERVICE IN VARCHAR,
	   COMPONENT IN VARCHAR,
	   PROCEDURENAME IN VARCHAR,
	   HOSTNAME IN VARCHAR,
	   EXCEPTIONCODE IN VARCHAR,
	   BUSINESSDOMAIN IN VARCHAR,
	   BUSINESSCONCEPT IN VARCHAR,
	   BUSINESSOPERATION IN VARCHAR,
	   TECHNICALDOMAIN IN VARCHAR,
	   EXCEPTIONCATEGORY IN VARCHAR,
	   EXCEPTIONSEVERITY IN VARCHAR,
   	   EXCEPTIONTYPE IN VARCHAR,
	   DATE_NUMBER IN VARCHAR,
	   DATETIME IN TIMESTAMP,
	   MESSAGE IN CLOB,
	   REPLYDESTINATION IN VARCHAR,
	   TRANSACTIONDATA IN CLOB,
	   DUMPANALYSIS IN CLOB,
	   EXCEPTIONID OUT INTEGER)
as
    INTBUSINESSCONCEPT INTEGER;
    INTBUSINESSOPERATION INTEGER;
	INTEXCEPTION	INTEGER;
	INTTRANSACTIONID	INTEGER;
	INTSERVICE	INTEGER;
	INTCOMPONENT	INTEGER;
	INTPROCEDURENAME	INTEGER;
	INTHOSTNAME	INTEGER;
	INTEXCEPTIONCODE	INTEGER;
	INTBUSINESSDOMAIN	INTEGER;
	INTTECHNICALDOMAIN	INTEGER;
	INTEXCEPTIONCATEGORY	INTEGER;
	INTEXCEPTIONSEVERITY	INTEGER;
   	INTEXCEPTIONTYPE	INTEGER;
	INTMESSAGE		INTEGER;
	INTTRANSACTIONDATA		INTEGER;
	INTDUMPANALYSIS		INTEGER;
	INTSTATUS			INTEGER;
begin



SELECT SEQ_TDA_EXCEPTION.nextval into INTEXCEPTION FROM DUAL;


IF TRANSACTIONID IS NOT NULL THEN
    SELECT count(*) INTO INTTRANSACTIONID FROM TDA_TRANSACTIONID WHERE NAME=TRANSACTIONID;
    IF INTTRANSACTIONID=0 THEN
	   SELECT SEQ_TDA_TRANSACTIONID.nextval INTO INTTRANSACTIONID FROM DUAL;
	   INSERT INTO TDA_TRANSACTIONID(ID,NAME) VALUES (INTTRANSACTIONID,TRANSACTIONID);
	ELSE
		SELECT ID INTO INTTRANSACTIONID FROM TDA_TRANSACTIONID WHERE NAME=TRANSACTIONID;
	END IF;
ELSE
      INTTRANSACTIONID:=NULL;
END IF;

commit;

IF SERVICE IS NOT NULL THEN
   SELECT count(*) INTO INTSERVICE FROM TDA_SERVICE WHERE NAME=SERVICE;
   IF INTSERVICE = 0 THEN
	   SELECT SEQ_TDA_SERVICE.nextval INTO INTSERVICE FROM DUAL;
	   INSERT INTO TDA_SERVICE(ID,NAME) VALUES (INTSERVICE,SERVICE);
	ELSE
	   SELECT ID INTO INTSERVICE FROM TDA_SERVICE WHERE NAME=SERVICE;
	END IF;
ELSE
      INTSERVICE:=NULL;
END IF;

commit;

IF COMPONENT IS NOT NULL THEN
   SELECT count(*) INTO INTCOMPONENT FROM TDA_COMPONENT WHERE NAME=COMPONENT;
   IF INTCOMPONENT =0 THEN
	   SELECT SEQ_TDA_COMPONENT.nextval INTO INTCOMPONENT FROM DUAL;
	   INSERT INTO TDA_COMPONENT(ID,NAME) VALUES (INTCOMPONENT,COMPONENT);
	ELSE
		SELECT ID INTO INTCOMPONENT FROM TDA_COMPONENT WHERE NAME=COMPONENT;
	END IF;
ELSE
      INTCOMPONENT:=NULL;
END IF;

commit;

IF PROCEDURENAME IS NOT NULL THEN
   SELECT count(*) INTO INTPROCEDURENAME FROM TDA_PROCEDURE WHERE NAME=PROCEDURENAME;
   IF INTPROCEDURENAME = 0 THEN
	   SELECT SEQ_TDA_PROCEDURE.nextval INTO INTPROCEDURENAME FROM DUAL;
	   INSERT INTO TDA_PROCEDURE(ID,NAME) VALUES (INTPROCEDURENAME,PROCEDURENAME);
	ELSE
		SELECT ID INTO INTPROCEDURENAME FROM TDA_PROCEDURE WHERE NAME=PROCEDURENAME;
	END IF;
ELSE
      INTPROCEDURENAME:=NULL;
END IF;

commit;

IF HOSTNAME IS NOT NULL THEN
   SELECT count(*) INTO INTHOSTNAME FROM TDA_HOSTNAME WHERE NAME=HOSTNAME;
   IF INTHOSTNAME = 0 THEN
	   SELECT SEQ_TDA_HOSTNAME.nextval INTO INTHOSTNAME FROM DUAL;
	   INSERT INTO TDA_HOSTNAME(ID,NAME) VALUES (INTHOSTNAME,HOSTNAME);
	ELSE
		SELECT ID INTO INTHOSTNAME FROM TDA_HOSTNAME WHERE NAME=HOSTNAME;
	END IF;
ELSE
      INTHOSTNAME:=NULL;
END IF;

commit;

IF EXCEPTIONCODE IS NOT NULL THEN
   SELECT count(*) INTO INTEXCEPTIONCODE FROM TDA_EXCEPTIONCODE WHERE NAME=EXCEPTIONCODE;
   IF INTEXCEPTIONCODE = 0 THEN
	   SELECT SEQ_TDA_EXCEPTIONCODE.nextval INTO INTEXCEPTIONCODE FROM DUAL;
	   INSERT INTO TDA_EXCEPTIONCODE(ID,NAME) VALUES (INTEXCEPTIONCODE,EXCEPTIONCODE);
   ELSE
	   SELECT ID INTO INTEXCEPTIONCODE FROM TDA_EXCEPTIONCODE WHERE NAME=EXCEPTIONCODE;
	END IF;
ELSE
      INTEXCEPTIONCODE:=NULL;
END IF;

commit;

IF BUSINESSDOMAIN IS NOT NULL THEN
   SELECT COUNT(*) INTO INTBUSINESSDOMAIN FROM TDA_BUSINESSDOMAIN WHERE NAME=BUSINESSDOMAIN;
   IF INTBUSINESSDOMAIN =0 THEN
	   SELECT SEQ_TDA_BUSINESSDOMAIN.nextval INTO INTBUSINESSDOMAIN FROM DUAL;
	   INSERT INTO TDA_BUSINESSDOMAIN(ID,NAME) VALUES (INTBUSINESSDOMAIN,BUSINESSDOMAIN);
	ELSE
	   SELECT ID INTO INTBUSINESSDOMAIN FROM TDA_BUSINESSDOMAIN WHERE NAME=BUSINESSDOMAIN;
	END IF;
ELSE
      INTBUSINESSDOMAIN:=NULL;
END IF;

commit;

IF TECHNICALDOMAIN IS NOT NULL THEN
   SELECT COUNT(*) INTO INTTECHNICALDOMAIN FROM TDA_TECHNICALDOMAIN WHERE NAME=TECHNICALDOMAIN;
   IF INTTECHNICALDOMAIN = 0 THEN
	   SELECT SEQ_TDA_TECHNICALDOMAIN.nextval INTO INTTECHNICALDOMAIN FROM DUAL;
	   INSERT INTO TDA_TECHNICALDOMAIN(ID,NAME) VALUES (INTTECHNICALDOMAIN,TECHNICALDOMAIN);
	ELSE
		SELECT ID INTO INTTECHNICALDOMAIN FROM TDA_TECHNICALDOMAIN WHERE NAME=TECHNICALDOMAIN;
	END IF;
ELSE
      INTTECHNICALDOMAIN:=NULL;
END IF;

commit;

IF EXCEPTIONCATEGORY IS NOT NULL THEN
   SELECT count(*) INTO INTEXCEPTIONCATEGORY FROM TDA_EXCEPTIONCATEGORY WHERE NAME=EXCEPTIONCATEGORY;
   IF INTEXCEPTIONCATEGORY = 0 THEN
	   SELECT SEQ_TDA_EXCEPTIONCATEGORY.nextval INTO INTEXCEPTIONCATEGORY FROM DUAL;
	   INSERT INTO TDA_EXCEPTIONCATEGORY(ID,NAME) VALUES (INTEXCEPTIONCATEGORY,EXCEPTIONCATEGORY);
   ELSE
      SELECT ID INTO INTEXCEPTIONCATEGORY FROM TDA_EXCEPTIONCATEGORY WHERE NAME=EXCEPTIONCATEGORY;
   END IF;
ELSE
      INTEXCEPTIONCATEGORY:=NULL;
END IF;

commit;

IF EXCEPTIONSEVERITY IS NOT NULL THEN
   SELECT COUNT(*) INTO INTEXCEPTIONSEVERITY FROM TDA_EXCEPTIONSEVERITY WHERE NAME=EXCEPTIONSEVERITY;
   IF INTEXCEPTIONSEVERITY = 0 THEN
	   SELECT SEQ_TDA_EXCEPTIONSEVERITY.nextval INTO INTEXCEPTIONSEVERITY FROM DUAL;
	   INSERT INTO TDA_EXCEPTIONSEVERITY(ID,NAME) VALUES (INTEXCEPTIONSEVERITY,EXCEPTIONSEVERITY);
   ELSE
       SELECT ID INTO INTEXCEPTIONSEVERITY FROM TDA_EXCEPTIONSEVERITY WHERE NAME=EXCEPTIONSEVERITY;

	END IF;
ELSE
      INTEXCEPTIONSEVERITY:=NULL;
END IF;

commit;

IF EXCEPTIONTYPE IS NOT NULL THEN
   SELECT count(*) INTO INTEXCEPTIONTYPE FROM TDA_EXCEPTIONTYPE WHERE NAME=EXCEPTIONTYPE;
   IF INTEXCEPTIONTYPE =0 THEN
	   SELECT SEQ_TDA_EXCEPTIONTYPE.nextval INTO INTEXCEPTIONTYPE FROM DUAL;
	   INSERT INTO TDA_EXCEPTIONTYPE(ID,NAME) VALUES (INTEXCEPTIONTYPE,EXCEPTIONTYPE);
	ELSE
		SELECT ID INTO INTEXCEPTIONTYPE FROM TDA_EXCEPTIONTYPE WHERE NAME=EXCEPTIONTYPE;
	END IF;
ELSE
      INTEXCEPTIONTYPE:=NULL;
END IF;

commit;

IF BUSINESSOPERATION IS NOT NULL THEN
   SELECT count(*) INTO INTBUSINESSOPERATION FROM TDA_BUSINESSOPERATION WHERE NAME=BUSINESSOPERATION;
   IF INTBUSINESSOPERATION = 0 THEN
	   SELECT SEQ_TDA_BUSINESSOPERATION.nextval INTO INTBUSINESSOPERATION FROM DUAL;
	   INSERT INTO TDA_BUSINESSOPERATION(ID,NAME) VALUES (INTBUSINESSOPERATION,BUSINESSOPERATION);
	ELSE
	   SELECT ID INTO INTBUSINESSOPERATION FROM TDA_BUSINESSOPERATION WHERE NAME=BUSINESSOPERATION;
   
	END IF;
ELSE
      INTBUSINESSOPERATION:=NULL;
END IF;

commit;

IF BUSINESSCONCEPT IS NOT NULL THEN
   SELECT count(*) INTO INTBUSINESSCONCEPT FROM TDA_BUSINESSCONCEPT WHERE NAME=BUSINESSCONCEPT;
   IF INTBUSINESSCONCEPT = 0 THEN
	   SELECT SEQ_TDA_BUSINESSCONCEPT.nextval INTO INTBUSINESSCONCEPT FROM DUAL;
	   INSERT INTO TDA_BUSINESSCONCEPT(ID,NAME) VALUES (INTBUSINESSCONCEPT,BUSINESSCONCEPT);
   ELSE
	   SELECT ID INTO INTBUSINESSCONCEPT FROM TDA_BUSINESSCONCEPT WHERE NAME=BUSINESSCONCEPT;
   END IF;
ELSE
      INTBUSINESSCONCEPT:=NULL;
END IF;

commit;

SELECT count(*) INTO INTSTATUS FROM TDA_STATUS WHERE NAME='INITIAL';
IF INTSTATUS = 0 THEN
   SELECT SEQ_TDA_STATUS.nextval INTO INTSTATUS FROM DUAL;
   INSERT INTO TDA_STATUS(ID,NAME) VALUES (INTSTATUS,'INITIAL');
ELSE
	SELECT ID INTO INTSTATUS FROM TDA_STATUS WHERE NAME='INITIAL';
END IF;

commit;

IF MESSAGE IS NOT NULL THEN
      SELECT SEQ_TDA_EXCEPTIONLARGETEXT.nextval INTO INTMESSAGE FROM DUAL;
	  INSERT INTO TDA_EXCEPTIONLARGETEXT(ID,TYPE,TEXT) VALUES (INTMESSAGE ,'text', MESSAGE);
ELSE
      INTMESSAGE:=NULL;
END IF;

IF TRANSACTIONDATA IS NOT NULL THEN
      SELECT SEQ_TDA_EXCEPTIONLARGETEXT.nextval INTO INTTRANSACTIONDATA FROM DUAL;
	  INSERT INTO TDA_EXCEPTIONLARGETEXT(ID,TYPE,TEXT) VALUES (INTTRANSACTIONDATA ,'xml' ,TRANSACTIONDATA);
ELSE
      INTTRANSACTIONDATA:=NULL;
END IF;

IF DUMPANALYSIS IS NOT NULL THEN
      SELECT SEQ_TDA_EXCEPTIONLARGETEXT.nextval INTO INTDUMPANALYSIS FROM DUAL;
	  INSERT INTO TDA_EXCEPTIONLARGETEXT(ID,TYPE,TEXT) VALUES (INTDUMPANALYSIS ,'text', DUMPANALYSIS);
ELSE
      INTDUMPANALYSIS:=NULL;
END IF;

INSERT INTO TDA_EXCEPTION(ID,TRANSACTIONID,
	   SERVICE,
	   COMPONENT,
	   PROCEDURENAME,
	   HOSTNAME,
	   EXCEPTIONCODE,
	   BUSINESSDOMAIN,
	   TECHNICALDOMAIN,
	   EXCEPTIONCATEGORY,
	   EXCEPTIONSEVERITY,
   	   EXCEPTIONTYPE,
	   DATETIME,
	   MESSAGE,
	   REPLYDESTINATION,
	   TRANSACTIONDATA,
	   DUMPANALYSIS,
	   BUSINESSOPERATION,
	   BUSINESSCONCEPT,
	   STATUS,DATE_NUMBER)
 VALUES(
	   INTEXCEPTION,
	   INTTRANSACTIONID,
	   INTSERVICE,
	   INTCOMPONENT,
	   INTPROCEDURENAME,
	   INTHOSTNAME,
	   INTEXCEPTIONCODE,
	   INTBUSINESSDOMAIN,
	   INTTECHNICALDOMAIN,
	   INTEXCEPTIONCATEGORY,
	   INTEXCEPTIONSEVERITY,
   	   INTEXCEPTIONTYPE,
	   DATETIME,
	   INTMESSAGE,
	   REPLYDESTINATION,
	   INTTRANSACTIONDATA,
	   INTDUMPANALYSIS,
	   INTBUSINESSOPERATION,
	   INTBUSINESSCONCEPT,
	   INTSTATUS,
	   DATE_NUMBER);
EXCEPTIONID:=INTEXCEPTION;
end;
/

CREATE OR REPLACE FUNCTION TDA_CLEANUP_REFTABLES RETURN NUMBER IS
tmpVar NUMBER;

BEGIN

DELETE FROM TDA_LOGGINGLARGETEXT
      WHERE ID IN (SELECT   x.ID
                       FROM tda_logging m, tda_LOGGINGLARGETEXT x
                      WHERE m.ID(+) = x.ID
                   GROUP BY x.ID
                     HAVING COUNT (m.ID) = 0);
COMMIT;

DELETE FROM tda_REFERENCE
      WHERE TYPE='E' AND ID IN (SELECT   x.ID
                       FROM tda_exception m, tda_REFERENCE x
                      WHERE m.ID(+) = x.ID
                   GROUP BY x.ID
                     HAVING COUNT (m.id) = 0);
COMMIT;

DELETE FROM tda_REFERENCE
      WHERE TYPE='L' AND ID IN (SELECT   x.ID
                       FROM tda_logging m, tda_REFERENCE x
                      WHERE m.ID(+) = x.ID
                   GROUP BY x.ID
                     HAVING COUNT (m.id) = 0);
COMMIT;

DELETE FROM tda_exceptioncategory
      WHERE ID IN (SELECT   x.ID
                       FROM tda_exception m, tda_exceptioncategory x
                      WHERE m.exceptioncategory(+) = x.ID
                   GROUP BY x.ID
                     HAVING COUNT (m.exceptioncategory) = 0);

COMMIT;

DELETE FROM TDA_EXCEPTIONCODE
      WHERE ID IN (SELECT   x.ID
                       FROM tda_exception m, tda_EXCEPTIONCODE x
                      WHERE m.EXCEPTIONCODE(+) = x.ID
                   GROUP BY x.ID
                     HAVING COUNT (m.EXCEPTIONCODE) = 0);
COMMIT;

DELETE FROM TDA_EXCEPTIONSEVERITY
      WHERE ID IN (SELECT   x.ID
                       FROM tda_exception m, tda_EXCEPTIONSEVERITY x
                      WHERE m.EXCEPTIONSEVERITY(+) = x.ID
                   GROUP BY x.ID
                     HAVING COUNT (m.EXCEPTIONSEVERITY) = 0);

COMMIT;

DELETE FROM TDA_EXCEPTIONTYPE
      WHERE ID IN (SELECT   x.ID
                       FROM tda_exception m, tda_EXCEPTIONTYPE x
                      WHERE m.EXCEPTIONTYPE(+) = x.ID
                   GROUP BY x.ID
                     HAVING COUNT (m.EXCEPTIONTYPE) = 0);

COMMIT;

DELETE FROM TDA_STATUS
      WHERE ID IN (SELECT   x.ID
                       FROM tda_exception m, TDA_STATUS x
                      WHERE m.STATUS(+) = x.ID
                   GROUP BY x.ID
                     HAVING COUNT (m.STATUS) = 0);

COMMIT;

DELETE FROM TDA_LOGSTATUS
      WHERE ID IN (SELECT   x.ID
                       FROM tda_logging m, TDA_LOGSTATUS x
                      WHERE m.LOGSTATUS(+) = x.ID
                   GROUP BY x.ID
                     HAVING COUNT (m.LOGSTATUS) = 0);
COMMIT;

DELETE FROM TDA_ROLE
      WHERE ID IN (SELECT   x.ID
                       FROM tda_logging m, TDA_ROLE x
                      WHERE m.ROLE(+) = x.ID
                   GROUP BY x.ID
                     HAVING COUNT (m.ROLE) = 0);
COMMIT;

DELETE
  FROM tda_transactionid
 WHERE ID IN (
          SELECT a.ID
            FROM (SELECT   y.ID
                      FROM tda_logging m, tda_transactionid y
                     WHERE m.transactionid(+) = y.ID
                  GROUP BY y.ID
                    HAVING COUNT (m.transactionid) = 0) a,
                 (SELECT   x.ID
                      FROM tda_exception n, tda_transactionid x
                     WHERE n.transactionid(+) = x.ID
                  GROUP BY x.ID
                    HAVING COUNT (n.transactionid) = 0) b
	WHERE a.ID=B.ID
	GROUP BY a.ID
);

COMMIT;

DELETE
  FROM tda_SERVICE
 WHERE ID IN (
          SELECT a.ID
            FROM (SELECT   y.ID
                      FROM tda_logging m, tda_SERVICE y
                     WHERE m.SERVICE(+) = y.ID
                  GROUP BY y.ID
                    HAVING COUNT (m.SERVICE) = 0) a,
                 (SELECT   x.ID
                      FROM tda_exception n, tda_SERVICE x
                     WHERE n.SERVICE(+) = x.ID
                  GROUP BY x.ID
                    HAVING COUNT (n.SERVICE) = 0) b
	WHERE a.ID=B.ID
	GROUP BY a.ID
);

COMMIT;

DELETE
  FROM tda_COMPONENT
 WHERE ID IN (
          SELECT a.ID
            FROM (SELECT   y.ID
                      FROM tda_logging m, tda_COMPONENT y
                     WHERE m.COMPONENT(+) = y.ID
                  GROUP BY y.ID
                    HAVING COUNT (m.COMPONENT) = 0) a,
                 (SELECT   x.ID
                      FROM tda_exception n, tda_COMPONENT x
                     WHERE n.COMPONENT(+) = x.ID
                  GROUP BY x.ID
                    HAVING COUNT (n.COMPONENT) = 0) b
	WHERE a.ID=B.ID
	GROUP BY a.ID
);

COMMIT;

DELETE
  FROM tda_HOSTNAME
 WHERE ID IN (
          SELECT a.ID
            FROM (SELECT   y.ID
                      FROM tda_logging m, tda_HOSTNAME y
                     WHERE m.HOSTNAME(+) = y.ID
                  GROUP BY y.ID
                    HAVING COUNT (m.HOSTNAME) = 0) a,
                 (SELECT   x.ID
                      FROM tda_exception n, tda_HOSTNAME x
                     WHERE n.HOSTNAME(+) = x.ID
                  GROUP BY x.ID
                    HAVING COUNT (n.HOSTNAME) = 0) b
	WHERE a.ID=B.ID
	GROUP BY a.ID
);

COMMIT;

DELETE
  FROM tda_BUSINESSDOMAIN
 WHERE ID IN (
          SELECT a.ID
            FROM (SELECT   y.ID
                      FROM tda_logging m, tda_BUSINESSDOMAIN y
                     WHERE m.BUSINESSDOMAIN(+) = y.ID
                  GROUP BY y.ID
                    HAVING COUNT (m.BUSINESSDOMAIN) = 0) a,
                 (SELECT   x.ID
                      FROM tda_exception n, tda_BUSINESSDOMAIN x
                     WHERE n.BUSINESSDOMAIN(+) = x.ID
                  GROUP BY x.ID
                    HAVING COUNT (n.BUSINESSDOMAIN) = 0) b
	WHERE a.ID=B.ID
	GROUP BY a.ID
);

COMMIT;

DELETE
  FROM tda_BUSINESSOPERATION
 WHERE ID IN (
          SELECT a.ID
            FROM (SELECT   y.ID
                      FROM tda_logging m, tda_BUSINESSOPERATION y
                     WHERE m.BUSINESSOPERATION(+) = y.ID
                  GROUP BY y.ID
                    HAVING COUNT (m.BUSINESSOPERATION) = 0) a,
                 (SELECT   x.ID
                      FROM tda_exception n, tda_BUSINESSOPERATION x
                     WHERE n.BUSINESSOPERATION(+) = x.ID
                  GROUP BY x.ID
                    HAVING COUNT (n.BUSINESSOPERATION) = 0) b
	WHERE a.ID=B.ID
	GROUP BY a.ID
);

COMMIT;

DELETE
  FROM tda_BUSINESSCONCEPT
 WHERE ID IN (
          SELECT a.ID
            FROM (SELECT   y.ID
                      FROM tda_logging m, tda_BUSINESSCONCEPT y
                     WHERE m.BUSINESSCONCEPT(+) = y.ID
                  GROUP BY y.ID
                    HAVING COUNT (m.BUSINESSCONCEPT) = 0) a,
                 (SELECT   x.ID
                      FROM tda_exception n, tda_BUSINESSCONCEPT x
                     WHERE n.BUSINESSCONCEPT(+) = x.ID
                  GROUP BY x.ID
                    HAVING COUNT (n.BUSINESSCONCEPT) = 0) b
	WHERE a.ID=B.ID
	GROUP BY a.ID
);

COMMIT;

DELETE
  FROM tda_TECHNICALDOMAIN
 WHERE ID IN (
          SELECT a.ID
            FROM (SELECT   y.ID
                      FROM tda_logging m, tda_TECHNICALDOMAIN y
                     WHERE m.TECHNICALDOMAIN(+) = y.ID
                  GROUP BY y.ID
                    HAVING COUNT (m.TECHNICALDOMAIN) = 0) a,
                 (SELECT   x.ID
                      FROM tda_exception n, tda_TECHNICALDOMAIN x
                     WHERE n.TECHNICALDOMAIN(+) = x.ID
                  GROUP BY x.ID
                    HAVING COUNT (n.TECHNICALDOMAIN) = 0) b
	WHERE a.ID=B.ID
	GROUP BY a.ID
);

COMMIT;

DELETE
  FROM tda_PROCEDURE
 WHERE ID IN (
          SELECT a.ID
            FROM (SELECT   y.ID
                      FROM tda_logging m, tda_PROCEDURE y
                     WHERE m.PROCESSNAME(+) = y.ID
                  GROUP BY y.ID
                    HAVING COUNT (m.PROCESSNAME) = 0) a,
                 (SELECT   x.ID
                      FROM tda_exception n, tda_PROCEDURE x
                     WHERE n.PROCEDURENAME(+) = x.ID
                  GROUP BY x.ID
                    HAVING COUNT (n.PROCEDURENAME) = 0) b
	WHERE a.ID=B.ID
	GROUP BY a.ID
);

COMMIT;

DELETE FROM TDA_EXCEPTIONLARGETEXT
      WHERE ID IN (SELECT   x.ID
                       FROM ((SELECT   MESSAGE "ID"   FROM tda_exception) UNION (SELECT   TRANSACTIONDATA "ID"   FROM tda_exception) UNION (SELECT   DUMPANALYSIS "ID"   FROM tda_exception)) m, tda_EXCEPTIONLARGETEXT x
                      WHERE m.ID(+) = x.ID
                   GROUP BY x.ID
                     HAVING COUNT (m.ID) = 0);
COMMIT;

   tmpVar := 0;
   RETURN tmpVar;

END TDA_CLEANUP_REFTABLES;
/