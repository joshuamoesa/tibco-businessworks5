<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:eai="java://com.kpn.eai.component.common.CommonXPathFunctions" xmlns:ns="http://www.tibco.com/pe/CheckpointSchema" xmlns:ns1="http://java.sun.com/products/oss/xml/Common" xmlns:ns2="http://java.sun.com/products/oss/xml/ServiceActivation" xmlns:pfx="http://xmlns.kpn.com/eai/common/errors" xmlns:ns3="http://www.tibco.com/pe/EngineTypes" xmlns:ns12="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx2="http://xmlns.kpn.com/fixed/xAuthorityAdapter/ModifyMultiMediaLocationRegistration.xsd" xmlns:ns4="http://xmlns.kpn.com/common/cdm/Base.xsd" xmlns:ns5="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns6="http://Site.BVoIPOSSJ.VoIP.BuildingBlocks.ServiceLibrary" xmlns:pfx3="http://xmlns.kpn.com/fixed/xAuthorityAdapter/CreateMultiMediaCombinedRegistration.xsd" xmlns:pfx4="http://xmlns.kpn.com/Outbound/Publish/SubmitOrder.xsd" xmlns:ns7="http://xmlns.kpn.com/imported/ordermessage.xsd" xmlns:ns8="http://xmlns.kpn.com/EAI/fixed/xAuthorityAdapter/Product_Site.xsd" xmlns:ns9="http://xmlns.kpn.com/imported/ordermessage_Site_Enterprise.xsd">
    <xsd:import namespace="http://xmlns.kpn.com/eai/common/errors" schemaLocation="/Common/Shared Resources/Errors.xsd"/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/xAuthorityAdapter/ModifyMultiMediaLocationRegistration.xsd" schemaLocation="/XSDSchemas/xAuthorityAdapter/ModifyMultiMediaLocationRegistration.xsd"/>
    <xsd:import namespace="http://Site.BVoIPOSSJ.VoIP.BuildingBlocks.ServiceLibrary" schemaLocation="/XSDSchemas/xAuthority/BVoIPSiteDataServiceValue.xsd"/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/xAuthorityAdapter/CreateMultiMediaCombinedRegistration.xsd" schemaLocation="/XSDSchemas/xAuthorityAdapter/CreateMultiMediaCombinedRegistration.xsd"/>
    <xsd:import namespace="http://xmlns.kpn.com/EAI/fixed/xAuthorityAdapter/Product_Site.xsd" schemaLocation="/XSDSchemas/xAuthorityAdapter/Product_Site.xsd"/>
    <xsd:import namespace="http://xmlns.kpn.com/Outbound/Publish/SubmitOrder.xsd" schemaLocation="/XSDSchemas/xAuthorityAdapter/Publish/SubmitOrder.xsd"/>
    <xsd:import namespace="http://java.sun.com/products/oss/xml/ServiceActivation" schemaLocation="/XSDSchemas/xAuthority/AllTypes.xsd"/>
    <pd:name>xAuthorityAdapter/Processes/Inbound/Subprocesses/OSS_Framework_Messages/CreateOrder_CMMSR_SITE.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType ref="pfx4:SubmitOrder"/>
    <pd:startX>50</pd:startX>
    <pd:startY>127</pd:startY>
    <pd:returnBindings>
        <output>
            <type>
                <xsl:value-of select="$Wait-for-createOrderByValueResponse/Group/ns2:createOrderByValueResponse/ns2:orderKey/ns1:type"/>
            </type>
            <primaryKey>
                <xsl:value-of select="$Wait-for-createOrderByValueResponse/Group/ns2:createOrderByValueResponse/ns2:orderKey/ns2:primaryKey"/>
            </primaryKey>
        </output>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="output">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="type" type="xsd:string"/>
                    <xsd:element name="primaryKey" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>603</pd:endX>
    <pd:endY>129</pd:endY>
    <pd:errorSchemas>
        <Error ref="pfx:Error"/>
    </pd:errorSchemas>
    <pd:processVariables/>
    <pd:activity name="JMS MessageID">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>132</pd:x>
        <pd:y>126</pd:y>
        <config>
            <element>
                <xsd:element name="JMS">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="messageID" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <JMS>
                <messageID>
                    <xsl:value-of select="eai:createGUID()"/>
                </messageID>
            </JMS>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Create Order">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>336</pd:x>
        <pd:y>130</pd:y>
        <config>
            <processName>/xAuthorityAdapter/Processes/Inbound/Subprocesses/Requests/createOrderByValueRequest.process</processName>
            <processNameXPath/>
        </config>
        <pd:inputBindings>
            <input>
                <correlationID>
                    <xsl:value-of select="$JMS-MessageID/JMS/messageID"/>
                </correlationID>
                <xsl:copy-of select="$Map-to-OSS-Site/ns2:createOrderByValueRequest"/>
            </input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Wait for createOrderByValueResponse">
        <pd:type>com.tibco.plugin.waitnotify.WaitActivity</pd:type>
        <pd:resourceType>ae.activities.waitActivity</pd:resourceType>
        <pd:x>454</pd:x>
        <pd:y>128</pd:y>
        <config>
            <sharedConfig>/xAuthorityAdapter/Shared Resources/Inbound/Responses.sharednotify</sharedConfig>
        </config>
        <pd:inputBindings>
            <input>
                <key>
                    <xsl:value-of select="$JMS-MessageID/JMS/messageID"/>
                </key>
                <timeout>
                    <xsl:value-of select="$_globalVariables/ns5:GlobalVariables/xAuthorityAdapter/OSSJMessages/timeout"/>
                </timeout>
            </input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map to OSS-Site">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>239</pd:x>
        <pd:y>129</pd:y>
        <config>
            <element ref="ns2:createOrderByValueRequest"/>
        </config>
        <pd:inputBindings>
            <ns2:createOrderByValueRequest>
                <ns2:orderValue xsi:type="ns2:CreateOrderValue">
                    <ns2:apiClientId>
                        <xsl:value-of select="$_globalVariables/ns5:GlobalVariables/xAuthorityAdapter/OSSTechnicalMessages/createOrderRequest/apiClientId"/>
                    </ns2:apiClientId>
                    <xsl:if test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_HEADER/EXTERNAL_REFERENCE)">
                        <ns2:purchaseOrder>
                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_HEADER/EXTERNAL_REFERENCE"/>
                        </ns2:purchaseOrder>
                    </xsl:if>
                    <ns2:services>
                        <ns2:item xsi:type="ns6:BVoIPSiteDataServiceValue">
                            <xsl:if test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/SITE_ACCOUNT/ID)">
                                <ns2:subscriberId>
                                    <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/SITE_ACCOUNT/ID"/>
                                </ns2:subscriberId>
                            </xsl:if>
                            <ns2:attribute1>
                                <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/RUNTIME_PARAMETER/NAME_VALUE_PAIR[NAME=&quot;attribute1&quot;]/VALUE[1]"/>
                            </ns2:attribute1>
                            <ns2:attribute2>
                                <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/RUNTIME_PARAMETER/NAME_VALUE_PAIR[NAME=&quot;attribute2&quot;]/VALUE[1]"/>
                            </ns2:attribute2>
                            <ns2:attribute3>
                                <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/RUNTIME_PARAMETER/NAME_VALUE_PAIR[NAME=&quot;attribute3&quot;]/VALUE[1]"/>
                            </ns2:attribute3>
                            <data>
                                <serviceState xsi:nil="true"/>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/SITE_ACCOUNT/ID)">
                                        <subscriberId>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/SITE_ACCOUNT/ID"/>
                                        </subscriberId>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <subscriberId xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <serviceId xsi:nil="true"/>
                                <serviceOffering>
                                    <xsl:value-of select="$_globalVariables/ns5:GlobalVariables/xAuthorityAdapter/CreateOrderParams/ServiceOffering"/>
                                </serviceOffering>
                                <customerKey xsi:nil="true"/>
                                <synchronizeMode>
                                    <xsl:value-of select="false()"/>
                                </synchronizeMode>
                                <serviceOfferingPublication>
                                    <xsl:value-of select="$_globalVariables/ns5:GlobalVariables/xAuthorityAdapter/CreateOrderParams/ServiceOfferingPublication"/>
                                </serviceOfferingPublication>
                                <serviceOfferingVersion>
                                    <xsl:value-of select="$_globalVariables/ns5:GlobalVariables/xAuthorityAdapter/CreateOrderParams/ServiceOfferingVersion"/>
                                </serviceOfferingVersion>
                                <customerParentGroups>
                                    <xsl:if test="$_globalVariables/ns5:GlobalVariables/xAuthorityAdapter/CreateOrderParams/CustomerParentGroups!=&quot;&quot;">
                                        <item>
                                            <xsl:value-of select="$_globalVariables/ns5:GlobalVariables/xAuthorityAdapter/CreateOrderParams/CustomerParentGroups"/>
                                        </item>
                                    </xsl:if>
                                </customerParentGroups>
                                <customerName>
                                    <xsl:choose>
                                        <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ENTERPRISE_ACCOUNT/ID)">
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ENTERPRISE_ACCOUNT/ID"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </customerName>
                                <notifyCSR>
                                    <xsl:value-of select="false()"/>
                                </notifyCSR>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/SEND_NOTIFICATIONS_TO)">
                                        <notifyTo>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/SEND_NOTIFICATIONS_TO"/>
                                        </notifyTo>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <notifyTo xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <groupName>
                                    <xsl:value-of select="substring($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ENTERPRISE_ACCOUNT/ID,1,13)"/>
                                </groupName>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/SITE_ACCOUNT/ID)">
                                        <groupId>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/SITE_ACCOUNT/ID"/>
                                        </groupId>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <groupId xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/LOCATION_CODE)">
                                        <locationCode>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/LOCATION_CODE"/>
                                        </locationCode>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <locationCode xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/SITE_ACCOUNT/BILLING_TAG)">
                                        <billingTelephoneNumber>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/SITE_ACCOUNT/BILLING_TAG"/>
                                        </billingTelephoneNumber>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <billingTelephoneNumber xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="$_globalVariables/ns5:GlobalVariables/xAuthorityAdapter/CreateOrderParams/TimeZone!=&quot;&quot;">
                                        <timeZone>
                                            <xsl:value-of select="$_globalVariables/ns5:GlobalVariables/xAuthorityAdapter/CreateOrderParams/TimeZone"/>
                                        </timeZone>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <timeZone xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <contactFirstName>
                                    <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/CONTACT/CONTACT_PERSON/FIRSTNAME"/>
                                </contactFirstName>
                                <contactLastName>
                                    <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/CONTACT/CONTACT_PERSON/LASTNAME"/>
                                </contactLastName>
                                <contactEmail>
                                    <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/CONTACT/CONTACT_MEDIUM/EMAIL"/>
                                </contactEmail>
                                <contactPhone>
                                    <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/CONTACT/CONTACT_MEDIUM/PHONE_NUMBER"/>
                                </contactPhone>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS/STREET_NAME) and exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS/HOUSE_NUMBER) and exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS/HOUSE_NUMBER_EXTENSION)">
                                        <address1>
                                            <xsl:value-of select="concat($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS/STREET_NAME, $Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS/HOUSE_NUMBER,$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS/HOUSE_NUMBER_EXTENSION)"/>
                                        </address1>
                                    </xsl:when>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS/STREET_NAME) and exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS/HOUSE_NUMBER)">
                                        <address1>
                                            <xsl:value-of select="concat($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS/STREET_NAME, $Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS/HOUSE_NUMBER)"/>
                                        </address1>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <address1 xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/RUNTIME_PARAMETER/ADDRESSLINE2)">
                                        <address2>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/RUNTIME_PARAMETER/ADDRESSLINE2"/>
                                        </address2>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <address2 xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS[1]/CITY_NAME)">
                                        <city>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS[1]/CITY_NAME"/>
                                        </city>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <city xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS[1]/PROVINCE)">
                                        <stateOrProvince>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS[1]/PROVINCE"/>
                                        </stateOrProvince>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <stateOrProvince xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS[1]/POSTCODE)">
                                        <postalCode>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS[1]/POSTCODE"/>
                                        </postalCode>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <postalCode xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS[1]/COUNTRY)">
                                        <country>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/ADDRESS/PROPERTY_ADDRESS[1]/COUNTRY"/>
                                        </country>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <country xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/NUMBER_OF_SEATS)">
                                        <numberOfUsers>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/NUMBER_OF_SEATS"/>
                                        </numberOfUsers>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <numberOfUsers>
                                            <xsl:value-of select="0"/>
                                        </numberOfUsers>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/EXTENSION_LENGTH)">
                                        <extensionLength>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/EXTENSION_LENGTH"/>
                                        </extensionLength>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <extensionLength>
                                            <xsl:value-of select="0"/>
                                        </extensionLength>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/INCOMING_DIALING_SCHEME)">
                                        <incomingDialingScheme>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/INCOMING_DIALING_SCHEME"/>
                                        </incomingDialingScheme>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <incomingDialingScheme xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/TRUNK_GROUP_CAPACITY_LIMIT)">
                                        <trunkGroupCapacityLimit>
                                            <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/TRUNK_GROUP_CAPACITY_LIMIT"/>
                                        </trunkGroupCapacityLimit>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <trunkGroupCapacityLimit xsi:nil="true"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <dnRanges>
                                    <xsl:for-each select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM/PRODUCT/SITE_PRODUCT/PHONE_NUMBER_RANGE">
                                        <item>
                                            <xsl:choose>
                                                <xsl:when test="exists(TYPE)">
                                                    <type>
                                                        <xsl:value-of select="TYPE"/>
                                                    </type>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <type xsi:nil="true"/>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <cc>
                                                <xsl:value-of select="COUNTRY_CODE"/>
                                            </cc>
                                            <ndc>
                                                <xsl:value-of select="AREA_CODE"/>
                                            </ndc>
                                            <startingLineNumber>
                                                <xsl:value-of select="START_SUBSCRIBER_NUMBER"/>
                                            </startingLineNumber>
                                            <xsl:choose>
                                                <xsl:when test="exists(END_SUBSCRIBER_NUMBER)">
                                                    <endingLineNumber>
                                                        <xsl:value-of select="END_SUBSCRIBER_NUMBER"/>
                                                    </endingLineNumber>
                                                </xsl:when>
                                                <xsl:when test="exists(SIZE)">
                                                    <endingLineNumber>
                                                        <xsl:value-of select="concat(END_SUBSCRIBER_NUMBER,SIZE)"/>
                                                    </endingLineNumber>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <endingLineNumber>
                                                        <xsl:value-of select="&quot;&quot;"/>
                                                    </endingLineNumber>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </item>
                                    </xsl:for-each>
                                </dnRanges>
                                <sharedDevices>
                                    <xsl:for-each select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM/PRODUCT/SITE_PRODUCT/SHARED_DEVICE">
                                        <item>
                                            <deviceName>
                                                <xsl:value-of select="NAME"/>
                                            </deviceName>
                                            <deviceType>
                                                <xsl:value-of select="TYPE"/>
                                            </deviceType>
                                            <xsl:choose>
                                                <xsl:when test="exists(MAC_ADDRESS)">
                                                    <macAddress>
                                                        <xsl:value-of select="MAC_ADDRESS"/>
                                                    </macAddress>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <macAddress xsi:nil="true"/>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="exists(IP_ADDRESS)">
                                                    <ipAddress>
                                                        <xsl:value-of select="IP_ADDRESS"/>
                                                    </ipAddress>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <ipAddress xsi:nil="true"/>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="exists(SERIAL_NUMBER)">
                                                    <serialNumber>
                                                        <xsl:value-of select="SERIAL_NUMBER"/>
                                                    </serialNumber>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <serialNumber xsi:nil="true"/>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="exists(PORT)">
                                                    <port>
                                                        <xsl:value-of select="PORT"/>
                                                    </port>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <port xsi:nil="true"/>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="exists(DESCRIPTION)">
                                                    <description>
                                                        <xsl:value-of select="DESCRIPTION"/>
                                                    </description>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <description xsi:nil="true"/>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </item>
                                    </xsl:for-each>
                                </sharedDevices>
                                <callCapacityGroups>
                                    <xsl:for-each select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM/PRODUCT/SITE_PRODUCT/CALL_CAPACITY_GROUP">
                                        <item>
                                            <xsl:choose>
                                                <xsl:when test="exists(NAME)">
                                                    <groupName>
                                                        <xsl:value-of select="NAME"/>
                                                    </groupName>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <groupName xsi:nil="true"/>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="exists(MAXIMUM_CONCURRENT_CALLS)">
                                                    <maximumActiveCalls>
                                                        <xsl:value-of select="MAXIMUM_CONCURRENT_CALLS"/>
                                                    </maximumActiveCalls>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <maximumActiveCalls>
                                                        <xsl:value-of select="0"/>
                                                    </maximumActiveCalls>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="exists(MAXIMUM_CONCURRENT_INBOUND_CALLS)">
                                                    <maximumCallsIn>
                                                        <xsl:value-of select="MAXIMUM_CONCURRENT_INBOUND_CALLS"/>
                                                    </maximumCallsIn>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <maximumCallsIn>
                                                        <xsl:value-of select="0"/>
                                                    </maximumCallsIn>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="exists(MAXIMUM_CONCURRENT_OUTBOUND_CALLS)">
                                                    <maximumCallsOut>
                                                        <xsl:value-of select="MAXIMUM_CONCURRENT_OUTBOUND_CALLS"/>
                                                    </maximumCallsOut>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <maximumCallsOut>
                                                        <xsl:value-of select="0"/>
                                                    </maximumCallsOut>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="exists(DEFAULT_GROUP)">
                                                    <defaultGroup>
                                                        <xsl:value-of select="DEFAULT_GROUP"/>
                                                    </defaultGroup>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <defaultGroup>
                                                        <xsl:value-of select="false()"/>
                                                    </defaultGroup>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </item>
                                    </xsl:for-each>
                                </callCapacityGroups>
                                <customAttributes/>
                                <groupFeaturePackage>
                                    <selectionSetID xsi:nil="true"/>
                                    <packageID>
                                        <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/GROUP_FEATURE_PACKAGE/ID"/>
                                    </packageID>
                                    <xsl:choose>
                                        <xsl:when test="exists($Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/GROUP_FEATURE_PACKAGE/RATE_CODE)">
                                            <packageRateCode>
                                                <xsl:value-of select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM[1]/PRODUCT/SITE_PRODUCT/GROUP_FEATURE_PACKAGE/RATE_CODE"/>
                                            </packageRateCode>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <packageRateCode xsi:nil="true"/>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <addOnPackages>
                                        <xsl:for-each select="$Start/pfx4:SubmitOrder/ns7:BODY/ORDER/ORDER_ITEM/PRODUCT/SITE_PRODUCT/GROUP_FEATURE_PACKAGE/ADD_ON_PACKAGE">
                                            <item>
                                                <xsl:choose>
                                                    <xsl:when test="exists(SELECTION_SET_ID)">
                                                        <selectionSetID>
                                                            <xsl:value-of select="SELECTION_SET_ID"/>
                                                        </selectionSetID>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <selectionSetID xsi:nil="true"/>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                                <packageID>
                                                    <xsl:value-of select="ID"/>
                                                </packageID>
                                                <xsl:choose>
                                                    <xsl:when test="exists(RATE_CODE)">
                                                        <packageRateCode>
                                                            <xsl:value-of select="RATE_CODE"/>
                                                        </packageRateCode>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <packageRateCode xsi:nil="true"/>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                                <addOnPackages/>
                                            </item>
                                        </xsl:for-each>
                                    </addOnPackages>
                                </groupFeaturePackage>
                                <authUserName>
                                    <xsl:value-of select="$_globalVariables/ns5:GlobalVariables/xAuthorityAdapter/OSSTechnicalMessages/createOrderRequest/authUserName"/>
                                </authUserName>
                                <authDomain>
                                    <xsl:value-of select="$_globalVariables/ns5:GlobalVariables/xAuthorityAdapter/OSSTechnicalMessages/createOrderRequest/authDomain"/>
                                </authDomain>
                                <authPassword>
                                    <xsl:value-of select="$_globalVariables/ns5:GlobalVariables/xAuthorityAdapter/OSSTechnicalMessages/createOrderRequest/authPassword"/>
                                </authPassword>
                            </data>
                        </ns2:item>
                    </ns2:services>
                </ns2:orderValue>
            </ns2:createOrderByValueRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Null">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>456</pd:x>
        <pd:y>260</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Generate Error">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>244</pd:x>
        <pd:y>260</pd:y>
        <config>
            <faultName>Error</faultName>
        </config>
        <pd:inputBindings>
            <ns12:ActivityInput>
                <data>
                    <xsl:choose xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                        <xsl:when test="exists($_error_Create-Order)">
                            <xsl:copy-of select="$_error_Create-Order/pfx:Error"/>
                        </xsl:when>
                        <xsl:when test="exists($_error_Wait-for-createOrderByValueResponse)">
                            <pfx:Error>
                                <pfx:MsgCode>
                                    <xsl:value-of select="&quot;XAuth-03012&quot;"/>
                                </pfx:MsgCode>
                                <pfx:Params>
                                    <xsl:value-of select="&quot;createOrderResponse&quot;"/>
                                </pfx:Params>
                                <xsl:copy-of select="$_error/ns3:ErrorReport"/>
                            </pfx:Error>
                        </xsl:when>
                        <xsl:when test="exists($Wait-for-createOrderByValueResponse)">
                            <pfx:Error>
                                <pfx:MsgCode>
                                    <xsl:value-of select="&quot;XAuth-03019&quot;"/>
                                </pfx:MsgCode>
                                <pfx:Params>
                                    <xsl:value-of select="&quot;createOrderResponse&quot;"/>
                                </pfx:Params>
                                <xsl:choose>
                                    <xsl:when test="exists($Wait-for-createOrderByValueResponse/Group/ns2:createOrderByValueException/ns2:createException)">
                                        <pfx:ApplicationError>
                                            <xsl:value-of select="$Wait-for-createOrderByValueResponse/Group/ns2:createOrderByValueException/ns2:createException/ns1:message"/>
                                        </pfx:ApplicationError>
                                    </xsl:when>
                                    <xsl:when test="exists($Wait-for-createOrderByValueResponse/Group/ns2:createOrderByValueException/ns2:illegalArgumentException)">
                                        <pfx:ApplicationError>
                                            <xsl:value-of select="$Wait-for-createOrderByValueResponse/Group/ns2:createOrderByValueException/ns2:illegalArgumentException/ns1:message"/>
                                        </pfx:ApplicationError>
                                    </xsl:when>
                                    <xsl:when test="exists($Wait-for-createOrderByValueResponse/Group/ns2:createOrderByValueException/ns2:remoteException)">
                                        <pfx:ApplicationError>
                                            <xsl:value-of select="$Wait-for-createOrderByValueResponse/Group/ns2:createOrderByValueException/ns2:remoteException/ns1:message"/>
                                        </pfx:ApplicationError>
                                    </xsl:when>
                                    <xsl:when test="exists($Wait-for-createOrderByValueResponse/Group/ns2:createOrderByValueException/ns2:illegalAttributeValueException)">
                                        <pfx:ApplicationError>
                                            <xsl:value-of select="concat($Wait-for-createOrderByValueResponse/Group/ns2:createOrderByValueException/ns2:illegalAttributeValueException/ns1:message,&quot; &quot;,$Wait-for-createOrderByValueResponse/Group/ns2:createOrderByValueException/ns2:illegalAttributeValueException/ns1:illegalAttributeName)"/>
                                        </pfx:ApplicationError>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <pfx:ApplicationError>
                                            <xsl:value-of select="&quot;&quot;"/>
                                        </pfx:ApplicationError>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </pfx:Error>
                        </xsl:when>
                        <xsl:otherwise>
                            <pfx:Error>
                                <pfx:MsgCode>
                                    <xsl:value-of select="&quot;XAuth-03014&quot;"/>
                                </pfx:MsgCode>
                                <pfx:Params>
                                    <xsl:value-of select="&quot;createOrder&quot;"/>
                                </pfx:Params>
                                <xsl:copy-of select="$_error/ns3:ErrorReport"/>
                            </pfx:Error>
                        </xsl:otherwise>
                    </xsl:choose>
                </data>
            </ns12:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Create Order</pd:from>
        <pd:to>Wait for createOrderByValueResponse</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Wait for createOrderByValueResponse</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>JMS MessageID</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>JMS MessageID</pd:from>
        <pd:to>Generate Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Create Order</pd:from>
        <pd:to>Generate Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Wait for createOrderByValueResponse</pd:from>
        <pd:to>Generate Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>JMS MessageID</pd:from>
        <pd:to>Map to OSS-Site</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map to OSS-Site</pd:from>
        <pd:to>Create Order</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map to OSS-Site</pd:from>
        <pd:to>Generate Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Wait for createOrderByValueResponse</pd:from>
        <pd:to>Null</pd:to>
        <pd:xpathDescription>EXCEPTION</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>contains(local-name($Wait-for-createOrderByValueResponse/Group/*),"Exception")</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Null</pd:from>
        <pd:to>Generate Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>