<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx="urn:GenericMessageRequest" xmlns:ns="http://tempuri.org" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx2="http://tempuri.org/GenericRequest" xmlns:pfx3="http://www.tibco.com/ns/no_namespace_schema_location/WSDL/ASTRID/GenericMessageRequest.wsdl" xmlns:pfx4="http://xmlns.kpn.com/common/cdm/ErrorMessage.xsd" xmlns:pfx5="urn:NotifyNumberInportingComplete" xmlns:ns0="http://www.tibco.com/bw/xslt/custom-functions" xmlns:ns2="http://xmlns.kpn.com/fixed/common/AnyXMLMessage.xsd" xmlns:ns1="http://xmlns.kpn.com/common/cdm/Base.xsd" xmlns:ns3="http://xmlns.kpn.com/fixed/EDTAdapter/Response/UpsertTroubleReport.xsd" xmlns:pfx6="http://xmlns.kpn.com/fixed/portingservices/publish/NotifyNumberInportingComplete" xmlns:ns4="http://xmlns.kpn.com/fixed/EDTAdapter/common/CustomerIncidentReport.xsd" xmlns:ns5="http://xmlns.kpn.com/fixed/EDTAdapter/common/EDTResponse.xsd" xmlns:ns6="http://xmlns.kpn.com/common/cdm/ResultStatus.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns7="http://www.tibco.com/pe/EngineTypes" xmlns:pfx7="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:ns8="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns9="http://xmlns.kpn.com/fixed/ASTRIDAdapter/Response/UpsertCustomerIncidentReport.xsd" xmlns:ns10="http://xmlns.kpn.com/fixed/ASTRIDAdapter/common/TroubleReport.xsd" xmlns:ns11="http://xmlns.kpn.com/fixed/ASTRIDAdapter/common/ASTRIDResponse.xsd" xmlns:ns12="http://schemas.tibco.com/bw/plugins/soap/5.0/SoapPluginExceptions" xmlns:ns13="http://xmlns.kpn.com/fixed/ASTRIDAdapter/../WSDL/ASTRIDAdapter/GenericMessageRequest.xsd" xmlns:ns14="http://xmlns.kpn.com/fixed/common/internal/InitialError.xsd" xmlns:pfx8="urn:FIND_CUSTOMER" xmlns:pfx9="http://xmlns.kpn.com/fixed/ckradapter/request/FindCustomer.xsd" xmlns:pfx10="http://xmlns.kpn.com/fixed/ckradapter/response/FindCustomer.xsd" xmlns:pfx11="urn:GET_LINE_MEASUREMENT" xmlns:ns15="http://xmlns.kpn.com/fixed/ckradapter/common/Customer.xsd" xmlns:ns16="http://xmlns.kpn.com/fixed/ckradapter/common/CKRResponse.xsd" xmlns:ns17="http://xmlns.kpn.com/fixed/ckradapter/common/PropertyAddress.xsd" xmlns:ns18="http://xmlns.kpn.com/fixed/ckradapter/common/CustomerReference.xsd" xmlns:pfx12="urn:GET_CUSTOMER_DETAILS" xmlns:pfx13="http://xmlns.kpn.com/fixed/ckradapter/request/GetCustomerDetails.xsd" xmlns:pfx14="http://xmlns.kpn.com/fixed/ckradapter/response/GetCustomerDetails.xsd" xmlns:ns19="http://xmlns.kpn.com/fixed/ckradapter/common/OrganizationName.xsd" xmlns:ns20="http://xmlns.kpn.com/fixed/ckradapter/common/IndividualName.xsd" xmlns:pfx15="urn:GET_WORKORDERS" xmlns:pfx16="http://xmlns.kpn.com/fixed/ckradapter/request/GetWorkorders.xsd" xmlns:pfx17="http://xmlns.kpn.com/fixed/ckradapter/response/GetWorkorders.xsd" xmlns:ns21="http://xmlns.kpn.com/fixed/ckradapter/common/WorkOrder.xsd" xmlns:pfx18="urn:GET_CUSTOMER_CONTRACTS" xmlns:pfx19="http://xmlns.example.com/unique/default/namespace/1086798195751" xmlns:pfx20="http://xmlns.example.com/unique/default/namespace/1086802669975" xmlns:pfx21="urn:GET_RESOLVING_AGENCY" xmlns:pfx22="http://xmlns.example.com/unique/default/namespace/1086798170185" xmlns:pfx23="http://xmlns.example.com/unique/default/namespace/1086802623578" xmlns:pfx24="urn:GET_FORMULA" xmlns:pfx25="http://xmlns.example.com/unique/default/namespace/1086802560428" xmlns:pfx26="http://xmlns.example.com/unique/default/namespace/1086801773556" xmlns:ns22="http://xmlns.example.com/unique/default/namespace/1087368660275" xmlns:pfx27="urn:UPGRADE_FORMULA" xmlns:pfx28="http://xmlns.example.com/unique/default/namespace/1086802017757" xmlns:pfx29="http://xmlns.example.com/unique/default/namespace/1086802823065" xmlns:pfx30="urn:GET_AGENDA" xmlns:pfx31="http://xmlns.example.com/unique/default/namespace/1086798099673" xmlns:pfx32="http://xmlns.example.com/unique/default/namespace/1086802525597" xmlns:pfx33="urn:CHECK_APPOINTMENT" xmlns:pfx34="http://xmlns.example.com/unique/default/namespace/1086798248097" xmlns:pfx35="http://xmlns.example.com/unique/default/namespace/1086802778671" xmlns:ns23="http://xmlns.example.com/unique/default/namespace/1087395513868" xmlns:eai="java://com.kpn.eai.tools.Tools" xmlns:pfx36="urn:CONCEPT_ASTRID_P011" xmlns:pfx37="http://xmlns.example.com/unique/default/namespace/1113223925765" xmlns:pfx38="http://xmlns.example.com/unique/default/namespace/1113223891468" xmlns:ns24="http://xmlns.tibco.com/encodings/mime" xmlns:ns25="http://xmlns.kpn.com/fixed/kanvascontractadapter/common/KanvasResponse.xsd" xmlns:ns26="http://xmlns.example.com/unique/default/namespace/1113226991796" xmlns:ns27="http://xmlns.kpn.com/fixed/common/PhoneNumber.xsd" xmlns:pfx39="http://xmlns.kpn.com/fixed/common/PropertyAddress.xsd" xmlns:pfx40="urn:CONCEPT_ASTRID_CKR51" xmlns:pfx41="urn:GetCtpLineDetails">
    <xsd:import namespace="http://tempuri.org/GenericRequest" schemaLocation="/WSDL/ASTRIDAdapter/GenericRequest.xsd"/>
    <xsd:import namespace="urn:GenericMessageRequest" schemaLocation="/WSDL/EDTAdapter/GenericMessageRequest.wsdl"/>
    <xsd:import namespace="http://xmlns.kpn.com/common/cdm/ResultStatus.xsd" schemaLocation="/XSDSchemas/Common/ResultStatus.xsd"/>
    <xsd:import namespace="" schemaLocation=""/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/ckradapter/request/FindCustomer.xsd" schemaLocation="/XSDSchemas/CKRAdapter/Request/FindCustomer.xsd"/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/ckradapter/response/FindCustomer.xsd" schemaLocation="/XSDSchemas/CKRAdapter/Response/FindCustomer.xsd"/>
    <xsd:import namespace="urn:GET_LINE_MEASUREMENT" schemaLocation="/WSDL/EDTAdapter/006 - GET_LINE_MEASUREMENT.wsdl"/>
    <xsd:import namespace="urn:FIND_CUSTOMER" schemaLocation="/WSDL/EDTAdapter/001 - FIND_CUSTOMER.wsdl"/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/ckradapter/request/GetCustomerDetails.xsd" schemaLocation="/XSDSchemas/CKRAdapter/Request/GetCustomerDetails.xsd"/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/ckradapter/response/GetCustomerDetails.xsd" schemaLocation="/XSDSchemas/CKRAdapter/Response/GetCustomerDetails.xsd"/>
    <xsd:import namespace="urn:GET_CUSTOMER_DETAILS" schemaLocation="/WSDL/EDTAdapter/002 - GET_CUSTOMER_DETAILS.wsdl"/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/ckradapter/request/GetWorkorders.xsd" schemaLocation="/XSDSchemas/CKRAdapter/Request/GetWorkOrders.xsd"/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/ckradapter/response/GetWorkorders.xsd" schemaLocation="/XSDSchemas/CKRAdapter/Response/GetWorkOrders.xsd"/>
    <xsd:import namespace="urn:GET_WORKORDERS" schemaLocation="/WSDL/EDTAdapter/003 - GET_WORKORDERS.wsdl"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086798195751" schemaLocation="/XSDSchemas/EnginAdapter/Request/GetCustomerContract.xsd"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086802669975" schemaLocation="/XSDSchemas/EnginAdapter/Response/GetCustomerContract.xsd"/>
    <xsd:import namespace="urn:GET_CUSTOMER_CONTRACTS" schemaLocation="/WSDL/EDTAdapter/004 - GET_CUSTOMER_CONTRACTS.wsdl"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086798170185" schemaLocation="/XSDSchemas/EnginAdapter/Request/GetResolvingAgency.xsd"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086802623578" schemaLocation="/XSDSchemas/EnginAdapter/Response/GetResolvingAgency.xsd"/>
    <xsd:import namespace="urn:GET_RESOLVING_AGENCY" schemaLocation="/WSDL/EDTAdapter/007 - GET_RESOLVING_AGENCY.wsdl"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086802560428" schemaLocation="/XSDSchemas/EnginAdapter/Response/GetFormula.xsd"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086801773556" schemaLocation="/XSDSchemas/EnginAdapter/Request/GetFormula.xsd"/>
    <xsd:import namespace="urn:GET_FORMULA" schemaLocation="/WSDL/EDTAdapter/008 - GET_FORMULA.wsdl"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086802017757" schemaLocation="/XSDSchemas/EnginAdapter/Request/UpgradeFormula.xsd"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086802823065" schemaLocation="/XSDSchemas/EnginAdapter/Response/UpgradeFormula.xsd"/>
    <xsd:import namespace="urn:UPGRADE_FORMULA" schemaLocation="/WSDL/EDTAdapter/009 - UPGRADE_FORMULA.wsdl"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086798099673" schemaLocation="/XSDSchemas/EnginAdapter/Request/GetAgenda.xsd"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086802525597" schemaLocation="/XSDSchemas/EnginAdapter/Response/GetAgenda.xsd"/>
    <xsd:import namespace="urn:GET_AGENDA" schemaLocation="/WSDL/EDTAdapter/010 - GET_AGENDA.wsdl"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086798248097" schemaLocation="/XSDSchemas/EnginAdapter/Request/CheckAppointment.xsd"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086802778671" schemaLocation="/XSDSchemas/EnginAdapter/Response/CheckAppointment.xsd"/>
    <xsd:import namespace="urn:CHECK_APPOINTMENT" schemaLocation="/WSDL/ASTRIDAdapter/011 - CHECK_APPOINTMENT.wsdl"/>
    <xsd:import namespace="http://xmlns.kpn.com/common/cdm/ErrorMessage.xsd" schemaLocation="/XSDSchemas/Common/ErrorMessage.xsd"/>
    <xsd:import namespace="urn:CONCEPT_ASTRID_P011" schemaLocation="/WSDL/ASTRIDAdapter/CONCEPT_ASTRID_P011 versie 1.1.wsdl"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1113223925765" schemaLocation="/XSDSchemas/KanvasContractAdapter/Request/GetCtpLineDetails.xsd"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1113223891468" schemaLocation="/XSDSchemas/KanvasContractAdapter/Response/GetCtpLineDetails.xsd"/>
    <xsd:import namespace="urn:GetCtpLineDetails" schemaLocation="/WSDL/ASTRIDAdapter/GetCtpLineDetails.wsdl"/>
    <wsdl:import namespace="urn:GenericMessageRequest" location="/WSDL/EDTAdapter/GenericMessageRequest.wsdl"/>
    <wsdl:import namespace="urn:FIND_CUSTOMER" location="/WSDL/EDTAdapter/001 - FIND_CUSTOMER.wsdl"/>
    <wsdl:import namespace="urn:GET_CUSTOMER_DETAILS" location="/WSDL/EDTAdapter/002 - GET_CUSTOMER_DETAILS.wsdl"/>
    <wsdl:import namespace="urn:GET_WORKORDERS" location="/WSDL/EDTAdapter/003 - GET_WORKORDERS.wsdl"/>
    <wsdl:import namespace="urn:GET_CUSTOMER_CONTRACTS" location="/WSDL/EDTAdapter/004 - GET_CUSTOMER_CONTRACTS.wsdl"/>
    <wsdl:import namespace="urn:GET_RESOLVING_AGENCY" location="/WSDL/EDTAdapter/007 - GET_RESOLVING_AGENCY.wsdl"/>
    <wsdl:import namespace="urn:GET_FORMULA" location="/WSDL/EDTAdapter/008 - GET_FORMULA.wsdl"/>
    <wsdl:import namespace="urn:UPGRADE_FORMULA" location="/WSDL/EDTAdapter/009 - UPGRADE_FORMULA.wsdl"/>
    <wsdl:import namespace="urn:GET_AGENDA" location="/WSDL/EDTAdapter/010 - GET_AGENDA.wsdl"/>
    <wsdl:import namespace="urn:CHECK_APPOINTMENT" location="/WSDL/ASTRIDAdapter/011 - CHECK_APPOINTMENT.wsdl"/>
    <wsdl:import namespace="urn:CONCEPT_ASTRID_CKR51" location="/WSDL/ASTRIDAdapter/CONCEPT_ASTRID_CKR51.wsdl"/>
    <wsdl:import namespace="urn:CONCEPT_ASTRID_P011" location="/WSDL/ASTRIDAdapter/CONCEPT_ASTRID_P011 versie 1.1.wsdl"/>
    <wsdl:import namespace="urn:GetCtpLineDetails" location="/WSDL/ASTRIDAdapter/GetCtpLineDetails.wsdl"/>
    <pd:name>ASTRIDAdapter/Processes/GetCtpLineDetails.process</pd:name>
    <pd:description>Generic process that handles all communications originating from Astrid, directed towards the EAI bus.
Note: It deals with client request-reply and server publish-subscribe.</pd:description>
    <pd:startName>SOAPEventSource</pd:startName>
    <pd:startX>0</pd:startX>
    <pd:startY>0</pd:startY>
    <pd:returnBindings/>
    <pd:starter name="SOAPEventSource">
        <pd:type>com.tibco.plugin.soap.SOAPEventSource</pd:type>
        <pd:resourceType>ae.activities.SOAPEventSourceUI</pd:resourceType>
        <pd:x>58</pd:x>
        <pd:y>172</pd:y>
        <config>
            <_eventTimeout>60000</_eventTimeout>
            <service>pfx41:GetCtpLineDetailsPortType</service>
            <operation>GetInformation</operation>
            <attachmentStyle>none</attachmentStyle>
            <wsdlNamespaceRoot>urn:GetCtpLineDetails/GetInformationImpl</wsdlNamespaceRoot>
            <operationStyle>document</operationStyle>
            <soapUse>literal</soapUse>
            <embedWsdlComponents>true</embedWsdlComponents>
            <embedSchemaComponents>true</embedSchemaComponents>
            <soapAction>urn:GetCtpLineDetails/GetInformation</soapAction>
            <sharedChannel>/ASTRIDAdapter/Shared Resources/HTTP Server Connection.sharedhttp</sharedChannel>
            <sharedChannels>
                <httpChannel>
                    <useBasicAuthentication>false</useBasicAuthentication>
                </httpChannel>
            </sharedChannels>
            <useBasicAuthentication>false</useBasicAuthentication>
            <portAddressPrefix/>
            <inputAttachmentBindings/>
            <outputAttachmentBindings/>
        </config>
        <pd:inputBindings/>
    </pd:starter>
    <pd:endName>End</pd:endName>
    <pd:endX>1177</pd:endX>
    <pd:endY>183</pd:endY>
    <pd:errorSchemas>
        <InternalError ref="pfx:GenericMessage"/>
    </pd:errorSchemas>
    <pd:processVariables>
        <ErrorStatus>
            <xsd:element name="ResultStatus" type="ns6:ResultStatus"/>
        </ErrorStatus>
        <Offset>
            <xsd:element name="Offset">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="CENTRAL_AREA_CODE" type="xsd:string"/>
                        <xsd:element name="INVOERKABEL_SEQUENCE_NUMBER" type="xsd:string"/>
                        <xsd:element name="DIKADER_NUMBER_OFFSET" type="xsd:string"/>
                        <xsd:element name="MAXIMUM_NUMBER_OF_LINES" type="xsd:int"/>
                        <xsd:element name="NUMBER_OF_LINES" type="xsd:int"/>
                        <xsd:element name="COUNT" type="xsd:int"/>
                        <xsd:element name="TOTAL_UNFILTERED" type="xsd:int"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </Offset>
    </pd:processVariables>
    <pd:activity name="Log Error">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>537</pd:x>
        <pd:y>437</pd:y>
        <config>
            <processName>/Common/Sub Processes/Sub_LogError.process</processName>
        </config>
        <pd:inputBindings>
            <LogError>
                <xsl:choose>
                    <xsl:when test="exists($_error)">
                        <STACK_TRACE>
                            <xsl:value-of select="$_error/ns7:ErrorReport/StackTrace"/>
                        </STACK_TRACE>
                    </xsl:when>
                </xsl:choose>
                <ExistingCMH>
                    <COMPONENT-ID>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentId"/>
                    </COMPONENT-ID>
                    <COMPONENT-VERSION>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentVersion"/>
                    </COMPONENT-VERSION>
                    <COPY_ATTRIBUTES>
                        <xsl:value-of select="&quot;true&quot;"/>
                    </COPY_ATTRIBUTES>
                    <EXTENT_TRACKING>
                        <xsl:value-of select="&quot;true&quot;"/>
                    </EXTENT_TRACKING>
                    <xsl:for-each select="$FillCMH/CMH">
                        <CMH>
                            <ns1:ID>
                                <xsl:value-of select="ns1:ID"/>
                            </ns1:ID>
                            <ns1:NAME>
                                <xsl:value-of select="ns1:NAME"/>
                            </ns1:NAME>
                            <xsl:if test="ns1:FID">
                                <ns1:FID>
                                    <xsl:value-of select="ns1:FID"/>
                                </ns1:FID>
                            </xsl:if>
                            <xsl:if test="ns1:MID">
                                <ns1:MID>
                                    <xsl:value-of select="ns1:MID"/>
                                </ns1:MID>
                            </xsl:if>
                            <ns1:PARADIGM>
                                <xsl:value-of select="ns1:PARADIGM"/>
                            </ns1:PARADIGM>
                            <ns1:OBJECT>
                                <xsl:value-of select="ns1:OBJECT"/>
                            </ns1:OBJECT>
                            <ns1:VERSION>
                                <xsl:value-of select="ns1:VERSION"/>
                            </ns1:VERSION>
                            <xsl:for-each select="ns1:FROM">
                                <ns1:FROM>
                                    <xsl:attribute name="ns1:COMPONENT_ID">
                                        <xsl:value-of select="@ns1:COMPONENT_ID"/>
                                    </xsl:attribute>
                                    <xsl:if test="@ns1:COMPONENT_VERSION">
                                        <xsl:attribute name="ns1:COMPONENT_VERSION">
                                            <xsl:value-of select="@ns1:COMPONENT_VERSION"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:if test="@ns1:END_USER_INFO">
                                        <xsl:attribute name="ns1:END_USER_INFO">
                                            <xsl:value-of select="@ns1:END_USER_INFO"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:if test="@ns1:SOURCE_ADDRESS">
                                        <xsl:attribute name="ns1:SOURCE_ADDRESS">
                                            <xsl:value-of select="@ns1:SOURCE_ADDRESS"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                </ns1:FROM>
                            </xsl:for-each>
                            <xsl:for-each select="ns1:TO">
                                <ns1:TO>
                                    <xsl:attribute name="ns1:DESTINATION">
                                        <xsl:value-of select="concat(&quot;ErrorLog.&quot;,@ns1:DESTINATION)"/>
                                    </xsl:attribute>
                                </ns1:TO>
                            </xsl:for-each>
                            <xsl:for-each select="ns1:TRACKING">
                                <ns1:TRACKING>
                                    <ns1:MESSAGE_ID>
                                        <xsl:value-of select="ns1:MESSAGE_ID"/>
                                    </ns1:MESSAGE_ID>
                                    <xsl:if test="ns1:EXTERNAL_REF">
                                        <ns1:EXTERNAL_REF>
                                            <xsl:value-of select="ns1:EXTERNAL_REF"/>
                                        </ns1:EXTERNAL_REF>
                                    </xsl:if>
                                    <xsl:for-each select="ns1:ITEM">
                                        <ns1:ITEM>
                                            <xsl:attribute name="ns1:APPINFO">
                                                <xsl:value-of select="@ns1:APPINFO"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="ns1:EVENT">
                                                <xsl:value-of select="@ns1:EVENT"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="ns1:TIMESTAMP">
                                                <xsl:value-of select="@ns1:TIMESTAMP"/>
                                            </xsl:attribute>
                                        </ns1:ITEM>
                                    </xsl:for-each>
                                    <xsl:for-each select="ns1:SEQUENCE_NO">
                                        <ns1:SEQUENCE_NO>
                                            <xsl:value-of select="."/>
                                        </ns1:SEQUENCE_NO>
                                    </xsl:for-each>
                                </ns1:TRACKING>
                            </xsl:for-each>
                            <xsl:for-each select="ns1:ATTRIBUTE">
                                <ns1:ATTRIBUTE>
                                    <xsl:attribute name="ns1:NAME">
                                        <xsl:value-of select="@ns1:NAME"/>
                                    </xsl:attribute>
                                    <xsl:attribute name="ns1:VALUE">
                                        <xsl:value-of select="@ns1:VALUE"/>
                                    </xsl:attribute>
                                </ns1:ATTRIBUTE>
                            </xsl:for-each>
                        </CMH>
                    </xsl:for-each>
                </ExistingCMH>
                <ResultStatus>
                    <xsl:choose>
                        <xsl:when test="exists($SoapEventError)">
                            <xsl:attribute name="ns6:STATUS">
                                <xsl:value-of select="&quot;3&quot;"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="(exists($Send-Rendezvous-Request)) and ($Send-Rendezvous-Request/ActivityOutput/body/ns25:RESULT_STATUS/@ns6:STATUS !=&quot;0&quot;)">
                            <xsl:attribute name="ns6:STATUS">
                                <xsl:value-of select="$Send-Rendezvous-Request/ActivityOutput/body/ns25:RESULT_STATUS/@ns6:STATUS"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="exists($_error_SOAPSendReply)">
                            <xsl:attribute name="ns6:STATUS">
                                <xsl:value-of select="&quot;2&quot;"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="ns6:STATUS">
                                <xsl:value-of select="&quot;1&quot;"/>
                            </xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="exists($SoapEventError)">
                            <xsl:attribute name="ns6:MSG_CODE">
                                <xsl:value-of select="&quot;EDT-03005&quot;"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="(exists($Send-Rendezvous-Request)) and ($Send-Rendezvous-Request/ActivityOutput/body/ns25:RESULT_STATUS/@ns6:STATUS !=&quot;0&quot;)">
                            <xsl:attribute name="ns6:MSG_CODE">
                                <xsl:value-of select="$Send-Rendezvous-Request/ActivityOutput/body/ns25:RESULT_STATUS/@ns6:MSG_CODE"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="exists($_error_SOAPSendReply)">
                            <xsl:attribute name="ns6:MSG_CODE">
                                <xsl:value-of select="&quot;EDT-03006&quot;"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="ns6:MSG_CODE">
                                <xsl:value-of select="&quot;EDT-03003&quot;"/>
                            </xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="exists($SoapEventError)">
                            <xsl:attribute name="ns6:ERROR_DESCRIPTION">
                                <xsl:value-of select="&quot;Error while receiving SOAP request&quot;"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="(exists($Send-Rendezvous-Request)) and ($Send-Rendezvous-Request/ActivityOutput/body/ns25:RESULT_STATUS/@ns6:STATUS !=&quot;0&quot;)">
                            <xsl:if test="$Send-Rendezvous-Request/ActivityOutput/body/ns25:RESULT_STATUS/@ns6:ERROR_DESCRIPTION">
                                <xsl:attribute name="ns6:ERROR_DESCRIPTION">
                                    <xsl:value-of select="$Send-Rendezvous-Request/ActivityOutput/body/ns25:RESULT_STATUS/@ns6:ERROR_DESCRIPTION"/>
                                </xsl:attribute>
                            </xsl:if>
                        </xsl:when>
                        <xsl:when test="exists($Send-Rendezvous-Request)">
                            <xsl:if test="$_error/ns7:ErrorReport/Msg">
                                <xsl:attribute name="ns6:ERROR_DESCRIPTION">
                                    <xsl:value-of select="$_error/ns7:ErrorReport/Msg"/>
                                </xsl:attribute>
                            </xsl:if>
                        </xsl:when>
                        <xsl:when test="exists($_error_SOAPSendReply)">
                            <xsl:attribute name="ns6:ERROR_DESCRIPTION">
                                <xsl:value-of select="&quot;Error while sending SOAP reply&quot;"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="ns6:ERROR_DESCRIPTION">
                                <xsl:value-of select="&quot;General Error&quot;"/>
                            </xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </ResultStatus>
            </LogError>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="LogSOAPRequest">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>191</pd:x>
        <pd:y>61</pd:y>
        <config>
            <processName>/Common/Sub Processes/Sub_LogMessage.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <ns2:AnyXMLMessage>
                    <xsl:copy-of select="$SOAPEventSource/inputMessage"/>
                </ns2:AnyXMLMessage>
                <msgCode>
                    <xsl:value-of select="&quot;ASTRID-BW-01004&quot;"/>
                </msgCode>
                <message>
                    <xsl:value-of select="concat(&quot;Received SOAP request on port &quot;,$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/Outbound/SOAP/ServerPort)"/>
                </message>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SOAPSendReply">
        <pd:type>com.tibco.plugin.soap.SOAPSendReplyActivity</pd:type>
        <pd:resourceType>ae.activities.SOAPSendReplyUI</pd:resourceType>
        <pd:x>1086</pd:x>
        <pd:y>182</pd:y>
        <config>
            <eventSource>SOAPEventSource</eventSource>
        </config>
        <pd:inputBindings>
            <outputMessage>
                <xsl:copy-of select="$Index/pfx41:GetInformationResponse"/>
            </outputMessage>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="LogSOAPResponse">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1032</pd:x>
        <pd:y>79</pd:y>
        <config>
            <processName>/Common/Sub Processes/Sub_LogMessage.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <ns2:AnyXMLMessage>
                    <xsl:copy-of select="$Index/pfx41:GetInformationResponse"/>
                </ns2:AnyXMLMessage>
                <msgCode>
                    <xsl:value-of select="&quot;ASTRID-BW-01008&quot;"/>
                </msgCode>
                <message>
                    <xsl:value-of select="concat(&quot;Sending SOAP response for port &quot;,$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/Outbound/SOAP/ServerPort)"/>
                </message>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapSoapReply">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:description>Converts the RV output with 2 dimensional array
into a SOAP message with 1 dimensional array.</pd:description>
        <pd:x>866</pd:x>
        <pd:y>184</pd:y>
        <config>
            <element ref="pfx41:GetInformationResponse"/>
        </config>
        <pd:inputBindings>
            <pfx41:GetInformationResponse>
                <ns:General>
                    <xsl:if test="$SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:GUID">
                        <ns:GUID>
                            <xsl:copy-of select="$SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:GUID/@xsi:nil"/>
                            <xsl:value-of select="$SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:GUID"/>
                        </ns:GUID>
                    </xsl:if>
                    <ns:STATUS>
                        <xsl:choose>
                            <xsl:when test="exists($AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/ns25:RESULT_STATUS/@ns6:STATUS)">
                                <xsl:value-of select="$AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/ns25:RESULT_STATUS/@ns6:STATUS"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:attribute name="xsi:nil">true</xsl:attribute>
                            </xsl:otherwise>
                        </xsl:choose>
                    </ns:STATUS>
                    <ns:MSG_CODE>
                        <xsl:choose>
                            <xsl:when test="exists($AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/ns25:RESULT_STATUS/@ns6:MSG_CODE)">
                                <xsl:value-of select="$AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/ns25:RESULT_STATUS/@ns6:MSG_CODE"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:attribute name="xsi:nil">true</xsl:attribute>
                            </xsl:otherwise>
                        </xsl:choose>
                    </ns:MSG_CODE>
                    <ns:ERROR_CODE>
                        <xsl:choose>
                            <xsl:when test="exists($AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/ns25:RESULT_STATUS/@ns6:ERROR_CODE)">
                                <xsl:value-of select="$AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/ns25:RESULT_STATUS/@ns6:ERROR_CODE"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:attribute name="xsi:nil">true</xsl:attribute>
                            </xsl:otherwise>
                        </xsl:choose>
                    </ns:ERROR_CODE>
                    <ns:ERROR_DESCRIPTION>
                        <xsl:choose>
                            <xsl:when test="exists($AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/ns25:RESULT_STATUS/@ns6:ERROR_DESCRIPTION)">
                                <xsl:value-of select="$AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/ns25:RESULT_STATUS/@ns6:ERROR_DESCRIPTION"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:attribute name="xsi:nil">true</xsl:attribute>
                            </xsl:otherwise>
                        </xsl:choose>
                    </ns:ERROR_DESCRIPTION>
                    <ns:AREA_CODE>
                        <xsl:choose>
                            <xsl:when test="exists($AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/pfx38:PHONE_NUMBER/ns27:AREA_CODE)">
                                <xsl:value-of select="$AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/pfx38:PHONE_NUMBER/ns27:AREA_CODE"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:attribute name="xsi:nil">true</xsl:attribute>
                            </xsl:otherwise>
                        </xsl:choose>
                    </ns:AREA_CODE>
                    <ns:NUMBER_OF_LINES>
                        <xsl:choose>
                            <xsl:when test="exists($AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/pfx38:NUMBER_OF_LINES)">
                                <xsl:value-of select="$AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/pfx38:NUMBER_OF_LINES"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:attribute name="xsi:nil">true</xsl:attribute>
                            </xsl:otherwise>
                        </xsl:choose>
                    </ns:NUMBER_OF_LINES>
                    <ns:LINE>
                        <xsl:for-each select="$AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails">
                            <xsl:for-each select="current()/pfx38:LINE">
                                <ns:LINE>
                                    <ns:index>
                                        <xsl:value-of select="position()"/>
                                    </ns:index>
                                    <xsl:if test="current()/pfx38:CENTRAL_AREA_CODE">
                                        <ns:CENTRAL_AREA_CODE>
                                            <xsl:value-of select="current()/pfx38:CENTRAL_AREA_CODE"/>
                                        </ns:CENTRAL_AREA_CODE>
                                    </xsl:if>
                                    <xsl:if test="current()/pfx38:INVOERKABEL_SEQUENCE_NUMBER">
                                        <ns:INVOERKABEL_SEQUENCE_NUMBER>
                                            <xsl:value-of select="current()/pfx38:INVOERKABEL_SEQUENCE_NUMBER"/>
                                        </ns:INVOERKABEL_SEQUENCE_NUMBER>
                                    </xsl:if>
                                    <xsl:if test="current()/pfx38:DIKADER_NUMBER">
                                        <ns:DIKADER_NUMBER>
                                            <xsl:value-of select="current()/pfx38:DIKADER_NUMBER"/>
                                        </ns:DIKADER_NUMBER>
                                    </xsl:if>
                                    <xsl:if test="current()/pfx38:TELECOM_REGION_CODE">
                                        <ns:TELECOM_REGION_CODE>
                                            <xsl:value-of select="current()/pfx38:TELECOM_REGION_CODE"/>
                                        </ns:TELECOM_REGION_CODE>
                                    </xsl:if>
                                    <xsl:if test="current()/pfx38:LINE_STATUS">
                                        <ns:LINE_STATUS>
                                            <xsl:value-of select="current()/pfx38:LINE_STATUS"/>
                                        </ns:LINE_STATUS>
                                    </xsl:if>
                                    <ns:CURRENT_HOST_ID>
                                        <xsl:choose>
                                            <xsl:when test="exists(current()/pfx38:CURRENT/ns26:HOST_ID)">
                                                <xsl:value-of select="current()/pfx38:CURRENT/ns26:HOST_ID"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </ns:CURRENT_HOST_ID>
                                    <ns:CURRENT_LINE_SHORT_NAME>
                                        <xsl:choose>
                                            <xsl:when test="exists(current()/pfx38:CURRENT/ns26:LINE_SHORT_NAME)">
                                                <xsl:value-of select="current()/pfx38:CURRENT/ns26:LINE_SHORT_NAME"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </ns:CURRENT_LINE_SHORT_NAME>
                                    <ns:CURRENT_PORTING_STATUS>
                                        <xsl:choose>
                                            <xsl:when test="exists(current()/pfx38:CURRENT/ns26:PORTING_STATUS)">
                                                <xsl:value-of select="current()/pfx38:CURRENT/ns26:PORTING_STATUS"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </ns:CURRENT_PORTING_STATUS>
                                    <ns:CURRENT_QUALITY_CATEGORY>
                                        <xsl:value-of select="current()/pfx38:CURRENT/ns26:QUALITY_CATEGORY"/>
                                    </ns:CURRENT_QUALITY_CATEGORY>
                                    <ns:CURRENT_ROUTING_TYPE>
                                        <xsl:value-of select="current()/pfx38:CURRENT/ns26:ROUTING_TYPE"/>
                                    </ns:CURRENT_ROUTING_TYPE>
                                    <ns:CURRENT_SERVICE_ID>
                                        <xsl:value-of select="current()/pfx38:CURRENT/ns26:SERVICE_ID"/>
                                    </ns:CURRENT_SERVICE_ID>
                                    <ns:CURRENT_SERVICE_PROVIDER_ID>
                                        <xsl:value-of select="current()/pfx38:CURRENT/ns26:SERVICE_PROVIDER_ID"/>
                                    </ns:CURRENT_SERVICE_PROVIDER_ID>
                                    <ns:CURRENT_SERVICE_TYPE>
                                        <xsl:value-of select="current()/pfx38:CURRENT/ns26:SERVICE_TYPE"/>
                                    </ns:CURRENT_SERVICE_TYPE>
                                    <ns:CURRENT_SERVICE_TYPE_EXTENSION>
                                        <xsl:value-of select="current()/pfx38:CURRENT/ns26:SERVICE_TYPE_EXTENSION"/>
                                    </ns:CURRENT_SERVICE_TYPE_EXTENSION>
                                    <ns:CURRENT_USAGE_STATUS>
                                        <xsl:value-of select="current()/pfx38:CURRENT/ns26:USAGE_STATUS"/>
                                    </ns:CURRENT_USAGE_STATUS>
                                    <ns:CURRENT_USAGE_STATUS_EXTENSION>
                                        <xsl:value-of select="current()/pfx38:CURRENT/ns26:USAGE_STATUS_EXTENSION"/>
                                    </ns:CURRENT_USAGE_STATUS_EXTENSION>
                                    <ns:CURRENT_SUBSCRIBER_NUMBER>
                                        <xsl:value-of select="current()/pfx38:CURRENT/ns26:PHONE_NUMBER/ns27:SUBSCRIBER_NUMBER"/>
                                    </ns:CURRENT_SUBSCRIBER_NUMBER>
                                    <ns:CURRENT_CALL_NUMBER>
                                        <xsl:value-of select="current()/pfx38:CURRENT/ns26:PHONE_NUMBER/ns27:CALL_NUMBER"/>
                                    </ns:CURRENT_CALL_NUMBER>
                                    <ns:FUTURE_HOST_ID>
                                        <xsl:value-of select="current()/pfx38:FUTURE/ns26:HOST_ID"/>
                                    </ns:FUTURE_HOST_ID>
                                    <ns:FUTURE_LINE_SHORT_NAME>
                                        <xsl:value-of select="current()/pfx38:FUTURE/ns26:LINE_SHORT_NAME"/>
                                    </ns:FUTURE_LINE_SHORT_NAME>
                                    <ns:FUTURE_PORTING_STATUS>
                                        <xsl:value-of select="current()/pfx38:FUTURE/ns26:PORTING_STATUS"/>
                                    </ns:FUTURE_PORTING_STATUS>
                                    <ns:FUTURE_QUALITY_CATEGORY>
                                        <xsl:value-of select="current()/pfx38:FUTURE/ns26:QUALITY_CATEGORY"/>
                                    </ns:FUTURE_QUALITY_CATEGORY>
                                    <ns:FUTURE_ROUTING_TYPE>
                                        <xsl:value-of select="current()/pfx38:FUTURE/ns26:ROUTING_TYPE"/>
                                    </ns:FUTURE_ROUTING_TYPE>
                                    <ns:FUTURE_SERVICE_ID>
                                        <xsl:value-of select="current()/pfx38:FUTURE/ns26:SERVICE_ID"/>
                                    </ns:FUTURE_SERVICE_ID>
                                    <ns:FUTURE_SERVICE_PROVIDER_ID>
                                        <xsl:value-of select="current()/pfx38:FUTURE/ns26:SERVICE_PROVIDER_ID"/>
                                    </ns:FUTURE_SERVICE_PROVIDER_ID>
                                    <ns:FUTURE_SERVICE_TYPE>
                                        <xsl:value-of select="current()/pfx38:FUTURE/ns26:SERVICE_TYPE"/>
                                    </ns:FUTURE_SERVICE_TYPE>
                                    <ns:FUTURE_SERVICE_TYPE_EXTENSION>
                                        <xsl:value-of select="current()/pfx38:FUTURE/ns26:SERVICE_TYPE_EXTENSION"/>
                                    </ns:FUTURE_SERVICE_TYPE_EXTENSION>
                                    <ns:FUTURE_USAGE_STATUS>
                                        <xsl:value-of select="current()/pfx38:FUTURE/ns26:USAGE_STATUS"/>
                                    </ns:FUTURE_USAGE_STATUS>
                                    <ns:FUTURE_USAGE_STATUS_EXTENSION>
                                        <xsl:value-of select="current()/pfx38:FUTURE/ns26:USAGE_STATUS_EXTENSION"/>
                                    </ns:FUTURE_USAGE_STATUS_EXTENSION>
                                    <ns:FUTURE_SUBSCRIBER_NUMBER>
                                        <xsl:value-of select="current()/pfx38:FUTURE/ns26:PHONE_NUMBER/ns27:SUBSCRIBER_NUMBER"/>
                                    </ns:FUTURE_SUBSCRIBER_NUMBER>
                                    <ns:FUTURE_CALL_NUMBER>
                                        <xsl:value-of select="current()/pfx38:FUTURE/ns26:PHONE_NUMBER/ns27:CALL_NUMBER"/>
                                    </ns:FUTURE_CALL_NUMBER>
                                    <ns:USAGE_STATUS>
                                        <xsl:value-of select="current()/pfx38:LINE_TERMINATION_EQUIPMENT/pfx38:USAGE_STATUS"/>
                                    </ns:USAGE_STATUS>
                                    <ns:EQUIPMENT_CODE>
                                        <xsl:value-of select="current()/pfx38:LINE_TERMINATION_EQUIPMENT/pfx38:EQUIPMENT_CODE"/>
                                    </ns:EQUIPMENT_CODE>
                                </ns:LINE>
                            </xsl:for-each>
                        </xsl:for-each>
                    </ns:LINE>
                </ns:General>
            </pfx41:GetInformationResponse>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="FillCMH">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>147</pd:x>
        <pd:y>171</pd:y>
        <config>
            <processName>/Common/Sub Processes/Sub_FillCMH.process</processName>
        </config>
        <pd:inputBindings>
            <CMH-IN>
                <ExistingCMH>
                    <COMPONENT-ID>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentId"/>
                    </COMPONENT-ID>
                    <COMPONENT-VERSION>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentVersion"/>
                    </COMPONENT-VERSION>
                    <COPY_ATTRIBUTES>
                        <xsl:value-of select="&quot;true&quot;"/>
                    </COPY_ATTRIBUTES>
                    <EXTENT_TRACKING>
                        <xsl:value-of select="&quot;false&quot;"/>
                    </EXTENT_TRACKING>
                    <CMH>
                        <ns1:ID>
                            <xsl:value-of select="&quot;547&quot;"/>
                        </ns1:ID>
                        <ns1:NAME>
                            <xsl:value-of select="&quot;GetCtpLineDetails&quot;"/>
                        </ns1:NAME>
                        <ns1:MID>
                            <xsl:value-of select="&quot;547.10&quot;"/>
                        </ns1:MID>
                        <ns1:PARADIGM>
                            <xsl:value-of select="&quot;REQUEST&quot;"/>
                        </ns1:PARADIGM>
                        <ns1:OBJECT>
                            <xsl:value-of select="&quot;CtpLineDetails&quot;"/>
                        </ns1:OBJECT>
                        <ns1:VERSION>
                            <xsl:value-of select="&quot;1.0&quot;"/>
                        </ns1:VERSION>
                        <ns1:FROM>
                            <xsl:attribute name="ns1:COMPONENT_ID">
                                <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentId"/>
                            </xsl:attribute>
                            <xsl:attribute name="ns1:COMPONENT_VERSION">
                                <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentVersion"/>
                            </xsl:attribute>
                        </ns1:FROM>
                        <ns1:TO>
                            <xsl:attribute name="ns1:DESTINATION">
                                <xsl:value-of select="concat($_globalVariables/ns8:GlobalVariables/Env, &quot;.FIXED.Operations.KanvasRouter.Request.GetCtpLineDetails.1&quot;)"/>
                            </xsl:attribute>
                        </ns1:TO>
                        <ns1:TRACKING>
                            <ns1:MESSAGE_ID>
                                <xsl:value-of select="$SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:GUID"/>
                            </ns1:MESSAGE_ID>
                            <ns1:ITEM>
                                <xsl:attribute name="ns1:EVENT">
                                    <xsl:value-of select="&quot;GetCtpLineDetails&quot;"/>
                                </xsl:attribute>
                                <xsl:attribute name="ns1:TIMESTAMP">
                                    <xsl:value-of select="ns0:timestamp()"/>
                                </xsl:attribute>
                                <xsl:attribute name="ns1:APPINFO">
                                    <xsl:value-of select="concat($_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentDomain,&quot;.&quot;,$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentId)"/>
                                </xsl:attribute>
                            </ns1:ITEM>
                        </ns1:TRACKING>
                        <ns1:ATTRIBUTE>
                            <xsl:attribute name="ns1:NAME">
                                <xsl:value-of select="&quot;originatingApplicationID&quot;"/>
                            </xsl:attribute>
                            <xsl:attribute name="ns1:VALUE">
                                <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/KanvasRouter/ApplicationId"/>
                            </xsl:attribute>
                        </ns1:ATTRIBUTE>
                    </CMH>
                </ExistingCMH>
            </CMH-IN>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="LogSOAPErrReply">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>896</pd:x>
        <pd:y>434</pd:y>
        <config>
            <processName>/Common/Sub Processes/Sub_LogMessage.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <ns2:AnyXMLMessage>
                    <xsl:copy-of select="$MapSoapErrReply/pfx4:ErrorMessage"/>
                </ns2:AnyXMLMessage>
                <msgCode>
                    <xsl:value-of select="&quot;ASTRID-BW-01009&quot;"/>
                </msgCode>
                <message>
                    <xsl:value-of select="concat(&quot;Sending SOAP response for port &quot;,$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/Outbound/SOAP/ServerPort)"/>
                </message>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapSoapErrReply">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>753</pd:x>
        <pd:y>435</pd:y>
        <config>
            <element ref="pfx4:ErrorMessage"/>
        </config>
        <pd:inputBindings>
            <pfx4:ErrorMessage>
                <xsl:choose>
                    <xsl:when test="exists($Send-Rendezvous-Request)">
                        <xsl:copy-of select="$Send-Rendezvous-Request/ActivityOutput/body/ns1:CMH"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <ns1:CMH>
                            <xsl:copy-of select="$FillCMH/CMH/ancestor-or-self::*/namespace::node()"/>
                            <xsl:copy-of select="$FillCMH/CMH/@*"/>
                            <xsl:copy-of select="$FillCMH/CMH/node()"/>
                        </ns1:CMH>
                    </xsl:otherwise>
                </xsl:choose>
                <pfx4:RESULT_STATUS>
                    <xsl:copy-of select="$Log-Error/ErrorStatus/ancestor-or-self::*/namespace::node()"/>
                    <xsl:copy-of select="$Log-Error/ErrorStatus/@*"/>
                    <xsl:copy-of select="$Log-Error/ErrorStatus/node()"/>
                </pfx4:RESULT_STATUS>
            </pfx4:ErrorMessage>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SoapEventError">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>61</pd:x>
        <pd:y>299</pd:y>
        <config>
            <element>
                <xsd:element name="DUMMY">
                    <xsd:complexType>
                        <xsd:sequence/>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <DUMMY/>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SOAPSendFault">
        <pd:type>com.tibco.plugin.soap.SOAPSendFaultActivity</pd:type>
        <pd:resourceType>ae.activities.SOAPSendFaultUI</pd:resourceType>
        <pd:x>1016</pd:x>
        <pd:y>435</pd:y>
        <config>
            <faultMessage>&lt;Default&gt;</faultMessage>
            <eventSource>SOAPEventSource</eventSource>
        </config>
        <pd:inputBindings>
            <defaultFaultElement>
                <faultcode>
                    <xsl:value-of select="$MapSoapErrReply/pfx4:ErrorMessage/pfx4:RESULT_STATUS/@ns6:ERROR_CODE"/>
                </faultcode>
                <faultstring>
                    <xsl:value-of select="$MapSoapErrReply/pfx4:ErrorMessage/pfx4:RESULT_STATUS/@ns6:ERROR_DESCRIPTION"/>
                </faultstring>
            </defaultFaultElement>
        </pd:inputBindings>
    </pd:activity>
    <pd:group name="Group">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:description>Repeats the call to Kanvas
and accumulates the records until there is no more in Kanvas
or until the amount, Astrid asked for, is reached.

The records are gathered in the form of a repeating group Line's
inside a repeating group of CtPlines. (MapSoapReply will fix this).
</pd:description>
        <pd:x>298</pd:x>
        <pd:y>12</pd:y>
        <pd:width>485</pd:width>
        <pd:height>322</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <config>
            <pd:groupType>repeat</pd:groupType>
            <pd:indexSlot>i</pd:indexSlot>
            <pd:outSlot>AccumulatedGetCtpLineDetails</pd:outSlot>
            <pd:activityOutputName>Filter</pd:activityOutputName>
            <pd:repeatCondition>$i &gt;= ceiling($Offset/Offset/NUMBER_OF_LINES div 5) or
$Offset/Offset/COUNT &gt;= $Offset/Offset/MAXIMUM_NUMBER_OF_LINES or
$Send-Rendezvous-Request/ActivityOutput/body/ns25:RESULT_STATUS/@ns6:ERROR_CODE !=0 or 
$Send-Rendezvous-Request/ActivityOutput/body/ns25:RESULT_STATUS/@ns6:STATUS !=0</pd:repeatCondition>
            <pd:accumulateOutput>true</pd:accumulateOutput>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>MapRV</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>LogOffset</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Send Rendezvous Request</pd:from>
            <pd:to>LogRVResponse</pd:to>
            <pd:xpathDescription> </pd:xpathDescription>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>LogRVRequest</pd:from>
            <pd:to>Send Rendezvous Request</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>MapRV</pd:from>
            <pd:to>LogRVRequest</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>MapRV</pd:from>
            <pd:to>Generate Error</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-65536</pd:lineColor>
            <pd:conditionType>error</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Send Rendezvous Request</pd:from>
            <pd:to>Generate Error</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-65536</pd:lineColor>
            <pd:conditionType>error</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>LogRVResponse</pd:from>
            <pd:to>Filter</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Filter</pd:from>
            <pd:to>Offset</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Offset</pd:from>
            <pd:to>LogOffset</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Filter</pd:from>
            <pd:to>Generate Error</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-65536</pd:lineColor>
            <pd:conditionType>error</pd:conditionType>
        </pd:transition>
        <pd:activity name="Send Rendezvous Request">
            <pd:type>com.tibco.plugin.tibrv.RVRequestActivity</pd:type>
            <pd:resourceType>ae.rvpalette.RVRequestActivity</pd:resourceType>
            <pd:x>512</pd:x>
            <pd:y>172</pd:y>
            <config>
                <wantsValidationForOutput>true</wantsValidationForOutput>
                <wantsFiltrationForOutput>false</wantsFiltrationForOutput>
                <wantsXMLCompliantFieldNames>false</wantsXMLCompliantFieldNames>
                <wantsXMLCompliantFieldNamesOutput>false</wantsXMLCompliantFieldNamesOutput>
                <sharedChannel>/ASTRIDAdapter/Shared Resources/RV Transport.rvtransport</sharedChannel>
                <subject/>
                <operationTimeout>%%ASTRIDAdapter/KanvasRouter/Timeout%%</operationTimeout>
                <xmlEncoding>true</xmlEncoding>
                <inputXsdString ref="pfx37:GetCtpLineDetails"/>
                <outputXsdString ref="pfx38:GetCtpLineDetails"/>
            </config>
            <pd:inputBindings>
                <ActivityInput>
                    <subject>
                        <xsl:value-of select="$FillCMH/CMH/ns1:TO/@ns1:DESTINATION"/>
                    </subject>
                    <body>
                        <xsl:copy-of select="$MapRV/pfx37:GetCtpLineDetails/ancestor-or-self::*/namespace::node()"/>
                        <xsl:copy-of select="$MapRV/pfx37:GetCtpLineDetails/@*"/>
                        <xsl:copy-of select="$MapRV/pfx37:GetCtpLineDetails/node()"/>
                    </body>
                </ActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="LogRVRequest">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>443</pd:x>
            <pd:y>74</pd:y>
            <config>
                <processName>/Common/Sub Processes/Sub_LogMessage.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <ns2:AnyXMLMessage>
                        <xsl:copy-of select="$MapRV/pfx37:GetCtpLineDetails"/>
                    </ns2:AnyXMLMessage>
                    <msgCode>
                        <xsl:value-of select="&quot;ASTRID-BW-01005&quot;"/>
                    </msgCode>
                    <message>
                        <xsl:value-of select="concat(&quot;Sending RV message on subject &quot;, $FillCMH/CMH/ns1:TO/@ns1:DESTINATION)"/>
                    </message>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="LogRVResponse">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>577</pd:x>
            <pd:y>74</pd:y>
            <config>
                <processName>/Common/Sub Processes/Sub_LogMessage.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <ns2:AnyXMLMessage>
                        <xsl:copy-of select="$Send-Rendezvous-Request/ActivityOutput/body"/>
                    </ns2:AnyXMLMessage>
                    <msgCode>
                        <xsl:value-of select="&quot;ASTRID-BW-01006&quot;"/>
                    </msgCode>
                    <message>
                        <xsl:value-of select="concat(&quot;Receiving RV message on subject &quot;, $FillCMH/CMH/ns1:TO/@ns1:DESTINATION)"/>
                    </message>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="MapRV">
            <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
            <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
            <pd:x>382</pd:x>
            <pd:y>181</pd:y>
            <config>
                <element ref="pfx37:GetCtpLineDetails"/>
            </config>
            <pd:inputBindings>
                <pfx37:GetCtpLineDetails>
                    <xsl:for-each select="$FillCMH/CMH">
                        <ns1:CMH>
                            <ns1:ID>
                                <xsl:value-of select="ns1:ID"/>
                            </ns1:ID>
                            <ns1:NAME>
                                <xsl:value-of select="ns1:NAME"/>
                            </ns1:NAME>
                            <xsl:if test="ns1:FID">
                                <ns1:FID>
                                    <xsl:value-of select="ns1:FID"/>
                                </ns1:FID>
                            </xsl:if>
                            <xsl:if test="ns1:MID">
                                <ns1:MID>
                                    <xsl:value-of select="ns1:MID"/>
                                </ns1:MID>
                            </xsl:if>
                            <ns1:PARADIGM>
                                <xsl:value-of select="ns1:PARADIGM"/>
                            </ns1:PARADIGM>
                            <ns1:OBJECT>
                                <xsl:value-of select="ns1:OBJECT"/>
                            </ns1:OBJECT>
                            <ns1:VERSION>
                                <xsl:value-of select="ns1:VERSION"/>
                            </ns1:VERSION>
                            <xsl:for-each select="ns1:FROM">
                                <ns1:FROM>
                                    <xsl:attribute name="ns1:COMPONENT_ID">
                                        <xsl:value-of select="@ns1:COMPONENT_ID"/>
                                    </xsl:attribute>
                                    <xsl:if test="@ns1:COMPONENT_VERSION">
                                        <xsl:attribute name="ns1:COMPONENT_VERSION">
                                            <xsl:value-of select="@ns1:COMPONENT_VERSION"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:if test="@ns1:END_USER_INFO">
                                        <xsl:attribute name="ns1:END_USER_INFO">
                                            <xsl:value-of select="@ns1:END_USER_INFO"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:if test="@ns1:SOURCE_ADDRESS">
                                        <xsl:attribute name="ns1:SOURCE_ADDRESS">
                                            <xsl:value-of select="@ns1:SOURCE_ADDRESS"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                </ns1:FROM>
                            </xsl:for-each>
                            <xsl:for-each select="ns1:TO">
                                <ns1:TO>
                                    <xsl:attribute name="ns1:DESTINATION">
                                        <xsl:value-of select="@ns1:DESTINATION"/>
                                    </xsl:attribute>
                                </ns1:TO>
                            </xsl:for-each>
                            <xsl:for-each select="ns1:TRACKING">
                                <ns1:TRACKING>
                                    <ns1:MESSAGE_ID>
                                        <xsl:value-of select="ns1:MESSAGE_ID"/>
                                    </ns1:MESSAGE_ID>
                                    <xsl:if test="ns1:EXTERNAL_REF">
                                        <ns1:EXTERNAL_REF>
                                            <xsl:value-of select="ns1:EXTERNAL_REF"/>
                                        </ns1:EXTERNAL_REF>
                                    </xsl:if>
                                    <xsl:for-each select="ns1:ITEM">
                                        <ns1:ITEM>
                                            <xsl:attribute name="ns1:APPINFO">
                                                <xsl:value-of select="@ns1:APPINFO"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="ns1:EVENT">
                                                <xsl:value-of select="@ns1:EVENT"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="ns1:TIMESTAMP">
                                                <xsl:value-of select="@ns1:TIMESTAMP"/>
                                            </xsl:attribute>
                                        </ns1:ITEM>
                                    </xsl:for-each>
                                    <xsl:for-each select="ns1:SEQUENCE_NO">
                                        <ns1:SEQUENCE_NO>
                                            <xsl:value-of select="."/>
                                        </ns1:SEQUENCE_NO>
                                    </xsl:for-each>
                                </ns1:TRACKING>
                            </xsl:for-each>
                            <xsl:for-each select="ns1:ATTRIBUTE">
                                <ns1:ATTRIBUTE>
                                    <xsl:attribute name="ns1:NAME">
                                        <xsl:value-of select="@ns1:NAME"/>
                                    </xsl:attribute>
                                    <xsl:attribute name="ns1:VALUE">
                                        <xsl:value-of select="@ns1:VALUE"/>
                                    </xsl:attribute>
                                </ns1:ATTRIBUTE>
                            </xsl:for-each>
                        </ns1:CMH>
                    </xsl:for-each>
                    <xsl:if test="exists($SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:TTP_NUMBER)&#xA;and&#xA;not($SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:TTP_NUMBER/@xsi:nil!=(&quot;true&quot;,&quot;1&quot;))">
                        <pfx37:TTP_NUMBER>
                            <xsl:value-of select="$SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:TTP_NUMBER"/>
                        </pfx37:TTP_NUMBER>
                    </xsl:if>
                    <pfx37:CENTRAL_AREA_CODE_OFFSET>
                        <xsl:value-of select="$Offset/Offset/CENTRAL_AREA_CODE"/>
                    </pfx37:CENTRAL_AREA_CODE_OFFSET>
                    <pfx37:INVOERKABEL-SEQUENCE_NUMBER>
                        <xsl:value-of select="$Offset/Offset/INVOERKABEL_SEQUENCE_NUMBER"/>
                    </pfx37:INVOERKABEL-SEQUENCE_NUMBER>
                    <pfx37:DIKADER_NUMBER_OFFSET>
                        <xsl:value-of select="$Offset/Offset/DIKADER_NUMBER_OFFSET"/>
                    </pfx37:DIKADER_NUMBER_OFFSET>
                    <pfx37:PROPERTY_ADDRESS>
                        <pfx39:HOUSE_NUMBER>
                            <xsl:value-of select="$SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:HOUSE_NUMBER"/>
                        </pfx39:HOUSE_NUMBER>
                        <xsl:if test="exists($SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:HOUSE_NUMBER_EXTENSION)&#xA;and&#xA;not($SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:HOUSE_NUMBER_EXTENSION/@xsi:nil!=(&quot;true&quot;,&quot;1&quot;))">
                            <pfx39:HOUSE_NUMBER_EXTENSION>
                                <xsl:value-of select="$SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:HOUSE_NUMBER_EXTENSION"/>
                            </pfx39:HOUSE_NUMBER_EXTENSION>
                        </xsl:if>
                        <pfx39:DUTCH_POSTCODE_LETTERS>
                            <xsl:value-of select="$SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:POST_CODE_LETTERS"/>
                        </pfx39:DUTCH_POSTCODE_LETTERS>
                        <pfx39:DUTCH_POSTCODE_NUMBERS>
                            <xsl:value-of select="$SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:POST_CODE_NUMBERS"/>
                        </pfx39:DUTCH_POSTCODE_NUMBERS>
                    </pfx37:PROPERTY_ADDRESS>
                </pfx37:GetCtpLineDetails>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Generate Error">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>512</pd:x>
            <pd:y>275</pd:y>
            <config>
                <faultName/>
            </config>
            <pd:inputBindings>
                <pfx7:ActivityInput/>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Offset">
            <pd:type>com.tibco.pe.core.AssignActivity</pd:type>
            <pd:resourceType>ae.activities.assignActivity</pd:resourceType>
            <pd:description>Updates the Offset variables,
initiates the NUMBER_OF_LINES (only at first response)
COUNTs the filtered records.</pd:description>
            <pd:x>679</pd:x>
            <pd:y>179</pd:y>
            <config>
                <variableName>Offset</variableName>
            </config>
            <pd:inputBindings>
                <Offset>
                    <CENTRAL_AREA_CODE>
                        <xsl:value-of select="$Send-Rendezvous-Request/ActivityOutput/body/pfx38:LINE[last()]/pfx38:CENTRAL_AREA_CODE"/>
                    </CENTRAL_AREA_CODE>
                    <INVOERKABEL_SEQUENCE_NUMBER>
                        <xsl:value-of select="$Send-Rendezvous-Request/ActivityOutput/body/pfx38:LINE[last()]/pfx38:INVOERKABEL_SEQUENCE_NUMBER"/>
                    </INVOERKABEL_SEQUENCE_NUMBER>
                    <DIKADER_NUMBER_OFFSET>
                        <xsl:value-of select="$Send-Rendezvous-Request/ActivityOutput/body/pfx38:LINE[last()]/pfx38:DIKADER_NUMBER"/>
                    </DIKADER_NUMBER_OFFSET>
                    <MAXIMUM_NUMBER_OF_LINES>
                        <xsl:value-of select="$Offset/Offset/MAXIMUM_NUMBER_OF_LINES"/>
                    </MAXIMUM_NUMBER_OF_LINES>
                    <xsl:choose>
                        <xsl:when test="$i = 1">
                            <NUMBER_OF_LINES>
                                <xsl:value-of select="$Send-Rendezvous-Request/ActivityOutput/body/pfx38:NUMBER_OF_LINES"/>
                            </NUMBER_OF_LINES>
                        </xsl:when>
                        <xsl:otherwise>
                            <NUMBER_OF_LINES>
                                <xsl:value-of select="$Offset/Offset/NUMBER_OF_LINES"/>
                            </NUMBER_OF_LINES>
                        </xsl:otherwise>
                    </xsl:choose>
                    <COUNT>
                        <xsl:value-of select="$Offset/Offset/COUNT + count($Filter/pfx38:GetCtpLineDetails/pfx38:LINE)"/>
                    </COUNT>
                    <TOTAL_UNFILTERED>
                        <xsl:value-of select="$Offset/Offset/TOTAL_UNFILTERED + count($Send-Rendezvous-Request/ActivityOutput/body/pfx38:LINE)"/>
                    </TOTAL_UNFILTERED>
                </Offset>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Filter">
            <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
            <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
            <pd:description>Filters out records that are not wanted.</pd:description>
            <pd:x>604</pd:x>
            <pd:y>177</pd:y>
            <config>
                <element ref="pfx38:GetCtpLineDetails"/>
            </config>
            <pd:inputBindings>
                <pfx38:GetCtpLineDetails>
                    <xsl:copy-of select="$Send-Rendezvous-Request/ActivityOutput/body/ns1:CMH"/>
                    <xsl:copy-of select="$Send-Rendezvous-Request/ActivityOutput/body/ns25:RESULT_STATUS"/>
                    <xsl:if test="$Send-Rendezvous-Request/ActivityOutput/body/pfx38:NUMBER_OF_LINES">
                        <pfx38:NUMBER_OF_LINES>
                            <xsl:value-of select="$Send-Rendezvous-Request/ActivityOutput/body/pfx38:NUMBER_OF_LINES"/>
                        </pfx38:NUMBER_OF_LINES>
                    </xsl:if>
                    <xsl:for-each select="$Send-Rendezvous-Request/ActivityOutput/body/pfx38:LINE">
                        <xsl:if test="current()/pfx38:CURRENT/ns26:SERVICE_ID !=&quot;&quot;&#xA;or&#xA;current()/pfx38:CURRENT/ns26:PHONE_NUMBER/ns27:SUBSCRIBER_NUMBER !=&quot;&quot;&#xA;or&#xA;current()/pfx38:CURRENT/ns26:PHONE_NUMBER/ns27:CALL_NUMBER !=&quot;&quot;">
                            <pfx38:LINE>
                                <pfx38:CENTRAL_AREA_CODE>
                                    <xsl:value-of select="current()/pfx38:CENTRAL_AREA_CODE"/>
                                </pfx38:CENTRAL_AREA_CODE>
                                <pfx38:INVOERKABEL_SEQUENCE_NUMBER>
                                    <xsl:value-of select="current()/pfx38:INVOERKABEL_SEQUENCE_NUMBER"/>
                                </pfx38:INVOERKABEL_SEQUENCE_NUMBER>
                                <pfx38:DIKADER_NUMBER>
                                    <xsl:value-of select="current()/pfx38:DIKADER_NUMBER"/>
                                </pfx38:DIKADER_NUMBER>
                                <pfx38:TELECOM_REGION_CODE>
                                    <xsl:value-of select="current()/pfx38:TELECOM_REGION_CODE"/>
                                </pfx38:TELECOM_REGION_CODE>
                                <xsl:if test="current()/pfx38:LINE_STATUS">
                                    <pfx38:LINE_STATUS>
                                        <xsl:value-of select="current()/pfx38:LINE_STATUS"/>
                                    </pfx38:LINE_STATUS>
                                </xsl:if>
                                <xsl:copy-of select="current()/pfx38:CURRENT"/>
                                <xsl:copy-of select="current()/pfx38:FUTURE"/>
                                <xsl:copy-of select="current()/pfx38:LINE_TERMINATION_EQUIPMENT"/>
                            </pfx38:LINE>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:copy-of select="$Send-Rendezvous-Request/ActivityOutput/body/pfx38:PHONE_NUMBER"/>
                </pfx38:GetCtpLineDetails>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="LogOffset">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>727</pd:x>
            <pd:y>86</pd:y>
            <config>
                <processName>/Common/Sub Processes/Sub_LogMessage.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <ns2:AnyXMLMessage>
                        <xsl:copy-of select="$Offset/Offset"/>
                    </ns2:AnyXMLMessage>
                    <msgCode>
                        <xsl:value-of select="&quot;ASTRID-BW-01007&quot;"/>
                    </msgCode>
                    <message>
                        <xsl:value-of select="&quot;Logging Offset&quot;"/>
                    </message>
                </root>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:activity name="Start Offset">
        <pd:type>com.tibco.pe.core.AssignActivity</pd:type>
        <pd:resourceType>ae.activities.assignActivity</pd:resourceType>
        <pd:description>Initializes the Offset and Count variables:

CENTRAL_AREA_CODE, INVOERKABEL_SEQUENCE_NUMBER
and DIKADER_NUMBER_OFFSET are the offset keys for Kanvas.

MAXIMUM_NUMBER_OF_LINES is the maximum number of filtered lines we have to collect.
it is filled with the smallest of what the customer asked for and the field in the Global Variables

NUMBER_OF_LINES is the amount of records, Kanvas is willing to send
only provided in first Kanvas response.
It is initiated with 1 to get things going.

COUNT is the amount of filtered records so far.

TOTAL_UNFILTERED is the amount of unfiltered records so far.
</pd:description>
        <pd:x>235</pd:x>
        <pd:y>183</pd:y>
        <config>
            <variableName>Offset</variableName>
        </config>
        <pd:inputBindings>
            <Offset>
                <CENTRAL_AREA_CODE>
                    <xsl:value-of select="&quot;&quot;"/>
                </CENTRAL_AREA_CODE>
                <INVOERKABEL_SEQUENCE_NUMBER>
                    <xsl:value-of select="&quot;&quot;"/>
                </INVOERKABEL_SEQUENCE_NUMBER>
                <DIKADER_NUMBER_OFFSET>
                    <xsl:value-of select="&quot;&quot;"/>
                </DIKADER_NUMBER_OFFSET>
                <xsl:choose>
                    <xsl:when test="$SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:MAXIMUM_NUMBER_OF_LINES &lt; $_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/KanvasRouter/MAX_RECORDS_PER_REQUEST">
                        <MAXIMUM_NUMBER_OF_LINES>
                            <xsl:value-of select="$SOAPEventSource/inputMessage/pfx41:GetInformation/pfx41:MAXIMUM_NUMBER_OF_LINES"/>
                        </MAXIMUM_NUMBER_OF_LINES>
                    </xsl:when>
                    <xsl:otherwise>
                        <MAXIMUM_NUMBER_OF_LINES>
                            <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/KanvasRouter/MAX_RECORDS_PER_REQUEST"/>
                        </MAXIMUM_NUMBER_OF_LINES>
                    </xsl:otherwise>
                </xsl:choose>
                <NUMBER_OF_LINES>
                    <xsl:value-of select="1"/>
                </NUMBER_OF_LINES>
                <COUNT>
                    <xsl:value-of select="0"/>
                </COUNT>
                <TOTAL_UNFILTERED>
                    <xsl:value-of select="0"/>
                </TOTAL_UNFILTERED>
            </Offset>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Index">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:description>Makes the INDEX field go 1 2 3 ...
Cuts of # records if more than asked for</pd:description>
        <pd:x>963</pd:x>
        <pd:y>185</pd:y>
        <config>
            <element ref="pfx41:GetInformationResponse"/>
        </config>
        <pd:inputBindings>
            <xsl:for-each select="$MapSoapReply/pfx41:GetInformationResponse">
                <pfx41:GetInformationResponse>
                    <xsl:for-each select="ns:General">
                        <ns:General>
                            <xsl:if test="ns:GUID">
                                <ns:GUID>
                                    <xsl:copy-of select="ns:GUID/@xsi:nil"/>
                                    <xsl:value-of select="ns:GUID"/>
                                </ns:GUID>
                            </xsl:if>
                            <xsl:choose>
                                <xsl:when test="$AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/ns25:RESULT_STATUS/@ns6:STATUS = 0&#xA;and&#xA;($Offset/Offset/NUMBER_OF_LINES > $Offset/Offset/TOTAL_UNFILTERED&#xA;&#x9;or&#xA;count($MapSoapReply/pfx41:GetInformationResponse/ns:General/ns:LINE/ns:LINE) > $Offset/Offset/MAXIMUM_NUMBER_OF_LINES)">
                                    <ns:STATUS>
                                        <xsl:value-of select="99"/>
                                    </ns:STATUS>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:if test="ns:STATUS">
                                        <ns:STATUS>
                                            <xsl:copy-of select="ns:STATUS/@xsi:nil"/>
                                            <xsl:value-of select="ns:STATUS"/>
                                        </ns:STATUS>
                                    </xsl:if>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:if test="ns:MSG_CODE">
                                <ns:MSG_CODE>
                                    <xsl:copy-of select="ns:MSG_CODE/@xsi:nil"/>
                                    <xsl:value-of select="ns:MSG_CODE"/>
                                </ns:MSG_CODE>
                            </xsl:if>
                            <xsl:if test="ns:ERROR_CODE">
                                <ns:ERROR_CODE>
                                    <xsl:copy-of select="ns:ERROR_CODE/@xsi:nil"/>
                                    <xsl:value-of select="ns:ERROR_CODE"/>
                                </ns:ERROR_CODE>
                            </xsl:if>
                            <xsl:choose>
                                <xsl:when test="$AccumulatedGetCtpLineDetails/AccumulatedOutput/pfx38:GetCtpLineDetails[1]/ns25:RESULT_STATUS/@ns6:STATUS = 0&#xA;and&#xA;($Offset/Offset/NUMBER_OF_LINES > $Offset/Offset/TOTAL_UNFILTERED&#xA;&#x9;or&#xA;count($MapSoapReply/pfx41:GetInformationResponse/ns:General/ns:LINE/ns:LINE) > $Offset/Offset/MAXIMUM_NUMBER_OF_LINES)">
                                    <ns:ERROR_DESCRIPTION>
                                        <xsl:value-of select="&quot;Maximaal aantal records opgehaald&quot;"/>
                                    </ns:ERROR_DESCRIPTION>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:if test="ns:ERROR_DESCRIPTION">
                                        <ns:ERROR_DESCRIPTION>
                                            <xsl:copy-of select="ns:ERROR_DESCRIPTION/@xsi:nil"/>
                                            <xsl:value-of select="ns:ERROR_DESCRIPTION"/>
                                        </ns:ERROR_DESCRIPTION>
                                    </xsl:if>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:if test="ns:AREA_CODE">
                                <ns:AREA_CODE>
                                    <xsl:copy-of select="ns:AREA_CODE/@xsi:nil"/>
                                    <xsl:value-of select="ns:AREA_CODE"/>
                                </ns:AREA_CODE>
                            </xsl:if>
                            <xsl:if test="ns:NUMBER_OF_LINES">
                                <ns:NUMBER_OF_LINES>
                                    <xsl:copy-of select="ns:NUMBER_OF_LINES/@xsi:nil"/>
                                    <xsl:value-of select="ns:NUMBER_OF_LINES"/>
                                </ns:NUMBER_OF_LINES>
                            </xsl:if>
                            <xsl:for-each select="ns:LINE">
                                <ns:LINE>
                                    <xsl:for-each select="ns:LINE">
                                        <xsl:if test="position() &lt;= $Offset/Offset/MAXIMUM_NUMBER_OF_LINES">
                                            <ns:LINE>
                                                <ns:index>
                                                    <xsl:value-of select="position()"/>
                                                </ns:index>
                                                <xsl:if test="ns:CENTRAL_AREA_CODE">
                                                    <ns:CENTRAL_AREA_CODE>
                                                        <xsl:copy-of select="ns:CENTRAL_AREA_CODE/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CENTRAL_AREA_CODE"/>
                                                    </ns:CENTRAL_AREA_CODE>
                                                </xsl:if>
                                                <xsl:if test="ns:INVOERKABEL_SEQUENCE_NUMBER">
                                                    <ns:INVOERKABEL_SEQUENCE_NUMBER>
                                                        <xsl:copy-of select="ns:INVOERKABEL_SEQUENCE_NUMBER/@xsi:nil"/>
                                                        <xsl:value-of select="ns:INVOERKABEL_SEQUENCE_NUMBER"/>
                                                    </ns:INVOERKABEL_SEQUENCE_NUMBER>
                                                </xsl:if>
                                                <xsl:if test="ns:DIKADER_NUMBER">
                                                    <ns:DIKADER_NUMBER>
                                                        <xsl:copy-of select="ns:DIKADER_NUMBER/@xsi:nil"/>
                                                        <xsl:value-of select="ns:DIKADER_NUMBER"/>
                                                    </ns:DIKADER_NUMBER>
                                                </xsl:if>
                                                <xsl:if test="ns:TELECOM_REGION_CODE">
                                                    <ns:TELECOM_REGION_CODE>
                                                        <xsl:copy-of select="ns:TELECOM_REGION_CODE/@xsi:nil"/>
                                                        <xsl:value-of select="ns:TELECOM_REGION_CODE"/>
                                                    </ns:TELECOM_REGION_CODE>
                                                </xsl:if>
                                                <xsl:if test="ns:LINE_STATUS">
                                                    <ns:LINE_STATUS>
                                                        <xsl:copy-of select="ns:LINE_STATUS/@xsi:nil"/>
                                                        <xsl:value-of select="ns:LINE_STATUS"/>
                                                    </ns:LINE_STATUS>
                                                </xsl:if>
                                                <xsl:if test="ns:CURRENT_HOST_ID">
                                                    <ns:CURRENT_HOST_ID>
                                                        <xsl:copy-of select="ns:CURRENT_HOST_ID/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CURRENT_HOST_ID"/>
                                                    </ns:CURRENT_HOST_ID>
                                                </xsl:if>
                                                <xsl:if test="ns:CURRENT_LINE_SHORT_NAME">
                                                    <ns:CURRENT_LINE_SHORT_NAME>
                                                        <xsl:copy-of select="ns:CURRENT_LINE_SHORT_NAME/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CURRENT_LINE_SHORT_NAME"/>
                                                    </ns:CURRENT_LINE_SHORT_NAME>
                                                </xsl:if>
                                                <xsl:if test="ns:CURRENT_PORTING_STATUS">
                                                    <ns:CURRENT_PORTING_STATUS>
                                                        <xsl:copy-of select="ns:CURRENT_PORTING_STATUS/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CURRENT_PORTING_STATUS"/>
                                                    </ns:CURRENT_PORTING_STATUS>
                                                </xsl:if>
                                                <xsl:if test="ns:CURRENT_QUALITY_CATEGORY">
                                                    <ns:CURRENT_QUALITY_CATEGORY>
                                                        <xsl:copy-of select="ns:CURRENT_QUALITY_CATEGORY/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CURRENT_QUALITY_CATEGORY"/>
                                                    </ns:CURRENT_QUALITY_CATEGORY>
                                                </xsl:if>
                                                <xsl:if test="ns:CURRENT_ROUTING_TYPE">
                                                    <ns:CURRENT_ROUTING_TYPE>
                                                        <xsl:copy-of select="ns:CURRENT_ROUTING_TYPE/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CURRENT_ROUTING_TYPE"/>
                                                    </ns:CURRENT_ROUTING_TYPE>
                                                </xsl:if>
                                                <xsl:if test="ns:CURRENT_SERVICE_ID">
                                                    <ns:CURRENT_SERVICE_ID>
                                                        <xsl:copy-of select="ns:CURRENT_SERVICE_ID/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CURRENT_SERVICE_ID"/>
                                                    </ns:CURRENT_SERVICE_ID>
                                                </xsl:if>
                                                <xsl:if test="ns:CURRENT_SERVICE_PROVIDER_ID">
                                                    <ns:CURRENT_SERVICE_PROVIDER_ID>
                                                        <xsl:copy-of select="ns:CURRENT_SERVICE_PROVIDER_ID/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CURRENT_SERVICE_PROVIDER_ID"/>
                                                    </ns:CURRENT_SERVICE_PROVIDER_ID>
                                                </xsl:if>
                                                <xsl:if test="ns:CURRENT_SERVICE_TYPE">
                                                    <ns:CURRENT_SERVICE_TYPE>
                                                        <xsl:copy-of select="ns:CURRENT_SERVICE_TYPE/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CURRENT_SERVICE_TYPE"/>
                                                    </ns:CURRENT_SERVICE_TYPE>
                                                </xsl:if>
                                                <xsl:if test="ns:CURRENT_SERVICE_TYPE_EXTENSION">
                                                    <ns:CURRENT_SERVICE_TYPE_EXTENSION>
                                                        <xsl:copy-of select="ns:CURRENT_SERVICE_TYPE_EXTENSION/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CURRENT_SERVICE_TYPE_EXTENSION"/>
                                                    </ns:CURRENT_SERVICE_TYPE_EXTENSION>
                                                </xsl:if>
                                                <xsl:if test="ns:CURRENT_USAGE_STATUS">
                                                    <ns:CURRENT_USAGE_STATUS>
                                                        <xsl:copy-of select="ns:CURRENT_USAGE_STATUS/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CURRENT_USAGE_STATUS"/>
                                                    </ns:CURRENT_USAGE_STATUS>
                                                </xsl:if>
                                                <xsl:if test="ns:CURRENT_USAGE_STATUS_EXTENSION">
                                                    <ns:CURRENT_USAGE_STATUS_EXTENSION>
                                                        <xsl:copy-of select="ns:CURRENT_USAGE_STATUS_EXTENSION/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CURRENT_USAGE_STATUS_EXTENSION"/>
                                                    </ns:CURRENT_USAGE_STATUS_EXTENSION>
                                                </xsl:if>
                                                <xsl:if test="ns:CURRENT_SUBSCRIBER_NUMBER">
                                                    <ns:CURRENT_SUBSCRIBER_NUMBER>
                                                        <xsl:copy-of select="ns:CURRENT_SUBSCRIBER_NUMBER/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CURRENT_SUBSCRIBER_NUMBER"/>
                                                    </ns:CURRENT_SUBSCRIBER_NUMBER>
                                                </xsl:if>
                                                <xsl:if test="ns:CURRENT_CALL_NUMBER">
                                                    <ns:CURRENT_CALL_NUMBER>
                                                        <xsl:copy-of select="ns:CURRENT_CALL_NUMBER/@xsi:nil"/>
                                                        <xsl:value-of select="ns:CURRENT_CALL_NUMBER"/>
                                                    </ns:CURRENT_CALL_NUMBER>
                                                </xsl:if>
                                                <xsl:if test="ns:FUTURE_HOST_ID">
                                                    <ns:FUTURE_HOST_ID>
                                                        <xsl:copy-of select="ns:FUTURE_HOST_ID/@xsi:nil"/>
                                                        <xsl:value-of select="ns:FUTURE_HOST_ID"/>
                                                    </ns:FUTURE_HOST_ID>
                                                </xsl:if>
                                                <xsl:if test="ns:FUTURE_LINE_SHORT_NAME">
                                                    <ns:FUTURE_LINE_SHORT_NAME>
                                                        <xsl:copy-of select="ns:FUTURE_LINE_SHORT_NAME/@xsi:nil"/>
                                                        <xsl:value-of select="ns:FUTURE_LINE_SHORT_NAME"/>
                                                    </ns:FUTURE_LINE_SHORT_NAME>
                                                </xsl:if>
                                                <xsl:if test="ns:FUTURE_PORTING_STATUS">
                                                    <ns:FUTURE_PORTING_STATUS>
                                                        <xsl:copy-of select="ns:FUTURE_PORTING_STATUS/@xsi:nil"/>
                                                        <xsl:value-of select="ns:FUTURE_PORTING_STATUS"/>
                                                    </ns:FUTURE_PORTING_STATUS>
                                                </xsl:if>
                                                <xsl:if test="ns:FUTURE_QUALITY_CATEGORY">
                                                    <ns:FUTURE_QUALITY_CATEGORY>
                                                        <xsl:copy-of select="ns:FUTURE_QUALITY_CATEGORY/@xsi:nil"/>
                                                        <xsl:value-of select="ns:FUTURE_QUALITY_CATEGORY"/>
                                                    </ns:FUTURE_QUALITY_CATEGORY>
                                                </xsl:if>
                                                <xsl:if test="ns:FUTURE_ROUTING_TYPE">
                                                    <ns:FUTURE_ROUTING_TYPE>
                                                        <xsl:copy-of select="ns:FUTURE_ROUTING_TYPE/@xsi:nil"/>
                                                        <xsl:value-of select="ns:FUTURE_ROUTING_TYPE"/>
                                                    </ns:FUTURE_ROUTING_TYPE>
                                                </xsl:if>
                                                <xsl:if test="ns:FUTURE_SERVICE_ID">
                                                    <ns:FUTURE_SERVICE_ID>
                                                        <xsl:copy-of select="ns:FUTURE_SERVICE_ID/@xsi:nil"/>
                                                        <xsl:value-of select="ns:FUTURE_SERVICE_ID"/>
                                                    </ns:FUTURE_SERVICE_ID>
                                                </xsl:if>
                                                <xsl:if test="ns:FUTURE_SERVICE_PROVIDER_ID">
                                                    <ns:FUTURE_SERVICE_PROVIDER_ID>
                                                        <xsl:copy-of select="ns:FUTURE_SERVICE_PROVIDER_ID/@xsi:nil"/>
                                                        <xsl:value-of select="ns:FUTURE_SERVICE_PROVIDER_ID"/>
                                                    </ns:FUTURE_SERVICE_PROVIDER_ID>
                                                </xsl:if>
                                                <xsl:if test="ns:FUTURE_SERVICE_TYPE">
                                                    <ns:FUTURE_SERVICE_TYPE>
                                                        <xsl:copy-of select="ns:FUTURE_SERVICE_TYPE/@xsi:nil"/>
                                                        <xsl:value-of select="ns:FUTURE_SERVICE_TYPE"/>
                                                    </ns:FUTURE_SERVICE_TYPE>
                                                </xsl:if>
                                                <xsl:if test="ns:FUTURE_SERVICE_TYPE_EXTENSION">
                                                    <ns:FUTURE_SERVICE_TYPE_EXTENSION>
                                                        <xsl:copy-of select="ns:FUTURE_SERVICE_TYPE_EXTENSION/@xsi:nil"/>
                                                        <xsl:value-of select="ns:FUTURE_SERVICE_TYPE_EXTENSION"/>
                                                    </ns:FUTURE_SERVICE_TYPE_EXTENSION>
                                                </xsl:if>
                                                <xsl:if test="ns:FUTURE_USAGE_STATUS">
                                                    <ns:FUTURE_USAGE_STATUS>
                                                        <xsl:copy-of select="ns:FUTURE_USAGE_STATUS/@xsi:nil"/>
                                                        <xsl:value-of select="ns:FUTURE_USAGE_STATUS"/>
                                                    </ns:FUTURE_USAGE_STATUS>
                                                </xsl:if>
                                                <xsl:if test="ns:FUTURE_USAGE_STATUS_EXTENSION">
                                                    <ns:FUTURE_USAGE_STATUS_EXTENSION>
                                                        <xsl:copy-of select="ns:FUTURE_USAGE_STATUS_EXTENSION/@xsi:nil"/>
                                                        <xsl:value-of select="ns:FUTURE_USAGE_STATUS_EXTENSION"/>
                                                    </ns:FUTURE_USAGE_STATUS_EXTENSION>
                                                </xsl:if>
                                                <xsl:if test="ns:FUTURE_SUBSCRIBER_NUMBER">
                                                    <ns:FUTURE_SUBSCRIBER_NUMBER>
                                                        <xsl:copy-of select="ns:FUTURE_SUBSCRIBER_NUMBER/@xsi:nil"/>
                                                        <xsl:value-of select="ns:FUTURE_SUBSCRIBER_NUMBER"/>
                                                    </ns:FUTURE_SUBSCRIBER_NUMBER>
                                                </xsl:if>
                                                <xsl:if test="ns:FUTURE_CALL_NUMBER">
                                                    <ns:FUTURE_CALL_NUMBER>
                                                        <xsl:copy-of select="ns:FUTURE_CALL_NUMBER/@xsi:nil"/>
                                                        <xsl:value-of select="ns:FUTURE_CALL_NUMBER"/>
                                                    </ns:FUTURE_CALL_NUMBER>
                                                </xsl:if>
                                                <xsl:if test="ns:USAGE_STATUS">
                                                    <ns:USAGE_STATUS>
                                                        <xsl:copy-of select="ns:USAGE_STATUS/@xsi:nil"/>
                                                        <xsl:value-of select="ns:USAGE_STATUS"/>
                                                    </ns:USAGE_STATUS>
                                                </xsl:if>
                                                <xsl:if test="ns:EQUIPMENT_CODE">
                                                    <ns:EQUIPMENT_CODE>
                                                        <xsl:copy-of select="ns:EQUIPMENT_CODE/@xsi:nil"/>
                                                        <xsl:value-of select="ns:EQUIPMENT_CODE"/>
                                                    </ns:EQUIPMENT_CODE>
                                                </xsl:if>
                                            </ns:LINE>
                                        </xsl:if>
                                    </xsl:for-each>
                                </ns:LINE>
                            </xsl:for-each>
                        </ns:General>
                    </xsl:for-each>
                </pfx41:GetInformationResponse>
            </xsl:for-each>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>SOAPEventSource</pd:from>
        <pd:to>FillCMH</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SOAPEventSource</pd:from>
        <pd:to>SoapEventError</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-26368</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log Error</pd:from>
        <pd:to>MapSoapErrReply</pd:to>
        <pd:xpathDescription/>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>FillCMH</pd:from>
        <pd:to>LogSOAPRequest</pd:to>
        <pd:xpathDescription> </pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>not(exists($SoapEventError))</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>FillCMH</pd:from>
        <pd:to>Log Error</pd:to>
        <pd:xpathDescription>SoapEventError</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-26368</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>exists($SoapEventError)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>MapSoapErrReply</pd:from>
        <pd:to>LogSOAPErrReply</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapSoapReply</pd:from>
        <pd:to>Index</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogSOAPResponse</pd:from>
        <pd:to>SOAPSendReply</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SOAPSendReply</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SOAPSendReply</pd:from>
        <pd:to>Log Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapSoapReply</pd:from>
        <pd:to>Log Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SoapEventError</pd:from>
        <pd:to>FillCMH</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-26368</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogSOAPErrReply</pd:from>
        <pd:to>SOAPSendFault</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SOAPSendFault</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>Log Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>MapSoapReply</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogSOAPRequest</pd:from>
        <pd:to>Start Offset</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start Offset</pd:from>
        <pd:to>Group</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Index</pd:from>
        <pd:to>LogSOAPResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>