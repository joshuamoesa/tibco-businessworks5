<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:ExceptionRuleXslt="java://XSLTTransform" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://www.tibco.com/CLEver/ExtraTypes" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx="http://www.tibco.com/CLEver/Exception" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <xsd:import namespace="http://www.tibco.com/CLEver/Exception" schemaLocation="/Shared Resources/Schema Definitions/CLEver/Exception.xsd"/>
    <pd:name>Processes/DataServices_Oracle/Transactional/Exception/Create.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType ref="pfx:Exception"/>
    <pd:startX>53</pd:startX>
    <pd:startY>71</pd:startY>
    <pd:returnBindings>
        <Return>
            <xsl:if test="string-length($InsertException/resultSet/outputSet/EXCEPTIONID)>0">
                <ExceptionID>
                    <xsl:value-of select="$InsertException/resultSet/outputSet/EXCEPTIONID"/>
                </ExceptionID>
            </xsl:if>
        </Return>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="Return">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="ExceptionID" type="xsd:string" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>453</pd:endX>
    <pd:endY>409</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1326179038998</pd:targetNamespace>
    <pd:activity name="Map Data">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>154</pd:x>
        <pd:y>72</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="Store" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <Store>
                    <xsl:value-of select="if (ExceptionRuleXslt:executeXslt('StoreException', tib:render-xml($Start/pfx:Exception), true())!=-1) then &#xA;'Store'&#xA;else&#xA;'ignore'"/>
                </Store>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="IgnoreMessage">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>153</pd:x>
        <pd:y>406</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:group name="Group">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>366</pd:x>
        <pd:y>169</pd:y>
        <pd:width>172</pd:width>
        <pd:height>122</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>inputLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:over>$Start/pfx:Exception/ns:ProcessContext/ns:BusinessRefs/ns:Parameter</pd:over>
            <pd:iterationElementSlot>Reference</pd:iterationElementSlot>
            <pd:indexSlot>i</pd:indexSlot>
            <pd:activityOutputName/>
            <pd:accumulateOutput>false</pd:accumulateOutput>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>InsertReferences</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>InsertReferences</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="InsertReferences">
            <pd:type>com.tibco.plugin.jdbc.JDBCUpdateActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCUpdateActivity</pd:resourceType>
            <pd:x>449</pd:x>
            <pd:y>239</pd:y>
            <config>
                <timeout>%%Connections/DB/Oracle/MainStorage/ExecutionTimeOut%%</timeout>
                <commit>false</commit>
                <emptyStrAsNil>false</emptyStrAsNil>
                <jdbcSharedConfig>/Shared Resources/Connections/DB/Oracle/MainStorage.sharedjdbc</jdbcSharedConfig>
                <statement>INSERT INTO TDA_REFERENCE(ID,TYPE,NAME,VALUE)
 VALUES(?,'E',?,?)</statement>
                <Prepared_Param_DataType>
                    <parameter>
                        <parameterName>ExceptionID</parameterName>
                        <dataType>INTEGER</dataType>
                    </parameter>
                    <parameter>
                        <parameterName>Name</parameterName>
                        <dataType>VARCHAR</dataType>
                    </parameter>
                    <parameter>
                        <parameterName>Value</parameterName>
                        <dataType>VARCHAR</dataType>
                    </parameter>
                </Prepared_Param_DataType>
            </config>
            <pd:inputBindings>
                <jdbcUpdateActivityInput>
                    <ExceptionID>
                        <xsl:value-of select="round($InsertException/resultSet/outputSet/EXCEPTIONID)"/>
                    </ExceptionID>
                    <Name>
                        <xsl:value-of select="if (string-length($Reference/ns:Parameter/ns:Name)>125) then&#xA;tib:left($Reference/ns:Parameter/ns:Name, 125)&#xA;else&#xA;$Reference/ns:Parameter/ns:Name"/>
                    </Name>
                    <Value>
                        <xsl:choose>
                            <xsl:when test="exists(if (string-length($Reference/ns:Parameter/ns:Value)>125) then&#xA;tib:left($Reference/ns:Parameter/ns:Value, 125)&#xA;else&#xA;$Reference/ns:Parameter/ns:Value)">
                                <xsl:value-of select="if (string-length($Reference/ns:Parameter/ns:Value)>125) then&#xA;tib:left($Reference/ns:Parameter/ns:Value, 125)&#xA;else&#xA;$Reference/ns:Parameter/ns:Value"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:attribute name="xsi:nil">true</xsl:attribute>
                            </xsl:otherwise>
                        </xsl:choose>
                    </Value>
                </jdbcUpdateActivityInput>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:group name="Group (1)">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>357</pd:x>
        <pd:y>1</pd:y>
        <pd:width>185</pd:width>
        <pd:height>137</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>errorLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:indexSlot>k</pd:indexSlot>
            <pd:errorCondition>$k&gt;3</pd:errorCondition>
            <pd:suspendAfterErrorRetry>false</pd:suspendAfterErrorRetry>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>InsertException</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>InsertException</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="InsertException">
            <pd:type>com.tibco.plugin.jdbc.JDBCCallActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCCallActivity</pd:resourceType>
            <pd:x>449</pd:x>
            <pd:y>69</pd:y>
            <config>
                <timeout>%%Connections/DB/Oracle/MainStorage/ExecutionTimeOut%%</timeout>
                <maxRows>100</maxRows>
                <emptyStrAsNil>true</emptyStrAsNil>
                <jdbcSharedConfig>/Shared Resources/Connections/DB/Oracle/MainStorage.sharedjdbc</jdbcSharedConfig>
                <ProcedureName>TDA_INSERTEXCEPTION</ProcedureName>
                <schema/>
                <parameterTypes>
                    <parameter>
                        <colName>TRANSACTIONID</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>SERVICE</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>COMPONENT</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>PROCEDURENAME</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>HOSTNAME</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>EXCEPTIONCODE</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>BUSINESSDOMAIN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>BUSINESSCONCEPT</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>BUSINESSOPERATION</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>TECHNICALDOMAIN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>EXCEPTIONCATEGORY</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>EXCEPTIONSEVERITY</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>EXCEPTIONTYPE</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>DATE_NUMBER</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>DATETIME</colName>
                        <colType>1</colType>
                        <dataType>93</dataType>
                        <typeName>TIMESTAMP</typeName>
                    </parameter>
                    <parameter>
                        <colName>MESSAGE</colName>
                        <colType>1</colType>
                        <dataType>2005</dataType>
                        <typeName>CLOB</typeName>
                    </parameter>
                    <parameter>
                        <colName>REPLYDESTINATION</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>TRANSACTIONDATA</colName>
                        <colType>1</colType>
                        <dataType>2005</dataType>
                        <typeName>CLOB</typeName>
                    </parameter>
                    <parameter>
                        <colName>DUMPANALYSIS</colName>
                        <colType>1</colType>
                        <dataType>2005</dataType>
                        <typeName>CLOB</typeName>
                    </parameter>
                    <parameter>
                        <colName>EXCEPTIONID</colName>
                        <colType>4</colType>
                        <dataType>2</dataType>
                        <typeName>NUMBER</typeName>
                    </parameter>
                </parameterTypes>
            </config>
            <pd:inputBindings>
                <inputs>
                    <inputSet>
                        <TRANSACTIONID>
                            <xsl:value-of select="tib:left($Start/pfx:Exception/ns:ProcessContext/ns:TransactionID, 125)"/>
                        </TRANSACTIONID>
                        <SERVICE>
                            <xsl:choose>
                                <xsl:when test="exists(tib:left($Start/pfx:Exception/ns:ProcessContext/ns:ServiceName, 125))">
                                    <xsl:value-of select="tib:left($Start/pfx:Exception/ns:ProcessContext/ns:ServiceName, 125)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </SERVICE>
                        <COMPONENT>
                            <xsl:choose>
                                <xsl:when test="exists(tib:left($Start/pfx:Exception/ns:ProcessContext/ns:ComponentName, 125))">
                                    <xsl:value-of select="tib:left($Start/pfx:Exception/ns:ProcessContext/ns:ComponentName, 125)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </COMPONENT>
                        <PROCEDURENAME>
                            <xsl:choose>
                                <xsl:when test="exists(tib:left($Start/pfx:Exception/ns:ProcessContext/ns:ProcessName, 125))">
                                    <xsl:value-of select="tib:left($Start/pfx:Exception/ns:ProcessContext/ns:ProcessName, 125)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </PROCEDURENAME>
                        <HOSTNAME>
                            <xsl:choose>
                                <xsl:when test="exists(tib:left($Start/pfx:Exception/ns:ProcessContext/ns:HostName, 125))">
                                    <xsl:value-of select="tib:left($Start/pfx:Exception/ns:ProcessContext/ns:HostName, 125)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </HOSTNAME>
                        <EXCEPTIONCODE>
                            <xsl:choose>
                                <xsl:when test="exists(tib:left($Start/pfx:Exception/pfx:ExceptionDetail/pfx:ExceptionCode, 125))">
                                    <xsl:value-of select="tib:left($Start/pfx:Exception/pfx:ExceptionDetail/pfx:ExceptionCode, 125)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </EXCEPTIONCODE>
                        <BUSINESSDOMAIN>
                            <xsl:choose>
                                <xsl:when test="exists(tib:left($Start/pfx:Exception/ns:ProcessContext/ns:BusinessDomain, 125))">
                                    <xsl:value-of select="tib:left($Start/pfx:Exception/ns:ProcessContext/ns:BusinessDomain, 125)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </BUSINESSDOMAIN>
                        <BUSINESSCONCEPT>
                            <xsl:choose>
                                <xsl:when test="exists(tib:left($Start/pfx:Exception/ns:ProcessContext/ns:BusinessConcept, 50))">
                                    <xsl:value-of select="tib:left($Start/pfx:Exception/ns:ProcessContext/ns:BusinessConcept, 50)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </BUSINESSCONCEPT>
                        <BUSINESSOPERATION>
                            <xsl:choose>
                                <xsl:when test="exists(tib:left($Start/pfx:Exception/ns:ProcessContext/ns:BusinessOperation, 50))">
                                    <xsl:value-of select="tib:left($Start/pfx:Exception/ns:ProcessContext/ns:BusinessOperation, 50)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </BUSINESSOPERATION>
                        <TECHNICALDOMAIN>
                            <xsl:choose>
                                <xsl:when test="exists(tib:left($Start/pfx:Exception/ns:ProcessContext/ns:TechnicalDomain, 125))">
                                    <xsl:value-of select="tib:left($Start/pfx:Exception/ns:ProcessContext/ns:TechnicalDomain, 125)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </TECHNICALDOMAIN>
                        <EXCEPTIONCATEGORY>
                            <xsl:choose>
                                <xsl:when test="exists(tib:left($Start/pfx:Exception/pfx:ExceptionDetail/pfx:ExceptionCategory, 50))">
                                    <xsl:value-of select="tib:left($Start/pfx:Exception/pfx:ExceptionDetail/pfx:ExceptionCategory, 50)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </EXCEPTIONCATEGORY>
                        <EXCEPTIONSEVERITY>
                            <xsl:choose>
                                <xsl:when test="exists(tib:left($Start/pfx:Exception/pfx:ExceptionDetail/pfx:ExceptionSeverity, 50))">
                                    <xsl:value-of select="tib:left($Start/pfx:Exception/pfx:ExceptionDetail/pfx:ExceptionSeverity, 50)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </EXCEPTIONSEVERITY>
                        <EXCEPTIONTYPE>
                            <xsl:choose>
                                <xsl:when test="exists(tib:left($Start/pfx:Exception/pfx:ExceptionDetail/pfx:ExceptionType, 50))">
                                    <xsl:value-of select="tib:left($Start/pfx:Exception/pfx:ExceptionDetail/pfx:ExceptionType, 50)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </EXCEPTIONTYPE>
                        <DATE_NUMBER>
                            <xsl:choose>
                                <xsl:when test="exists((tib:get-year-from-dateTime($Start/pfx:Exception/ns:ProcessContext/ns:DateTime)*10000)+(tib:get-month-from-dateTime($Start/pfx:Exception/ns:ProcessContext/ns:DateTime)*100)+ tib:get-day-from-dateTime($Start/pfx:Exception/ns:ProcessContext/ns:DateTime))">
                                    <xsl:value-of select="(tib:get-year-from-dateTime($Start/pfx:Exception/ns:ProcessContext/ns:DateTime)*10000)+(tib:get-month-from-dateTime($Start/pfx:Exception/ns:ProcessContext/ns:DateTime)*100)+ tib:get-day-from-dateTime($Start/pfx:Exception/ns:ProcessContext/ns:DateTime)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </DATE_NUMBER>
                        <DATETIME>
                            <xsl:choose>
                                <xsl:when test="exists($Start/pfx:Exception/ns:ProcessContext/ns:DateTime)">
                                    <xsl:value-of select="$Start/pfx:Exception/ns:ProcessContext/ns:DateTime"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </DATETIME>
                        <MESSAGE>
                            <xsl:choose>
                                <xsl:when test="exists($Start/pfx:Exception/pfx:ExceptionDetail/pfx:Message)">
                                    <xsl:value-of select="$Start/pfx:Exception/pfx:ExceptionDetail/pfx:Message"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </MESSAGE>
                        <REPLYDESTINATION>
                            <xsl:choose>
                                <xsl:when test="exists(tib:left($Start/pfx:Exception/pfx:ExceptionDetail/pfx:ReplyDestination,255))">
                                    <xsl:value-of select="tib:left($Start/pfx:Exception/pfx:ExceptionDetail/pfx:ReplyDestination,255)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </REPLYDESTINATION>
                        <TRANSACTIONDATA>
                            <xsl:choose>
                                <xsl:when test="exists($Start/pfx:Exception/pfx:ExceptionDetail/pfx:TransactionData)">
                                    <xsl:value-of select="$Start/pfx:Exception/pfx:ExceptionDetail/pfx:TransactionData"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </TRANSACTIONDATA>
                        <DUMPANALYSIS>
                            <xsl:choose>
                                <xsl:when test="exists($Start/pfx:Exception/pfx:ExceptionDetail/pfx:DumpAnalysis)">
                                    <xsl:value-of select="$Start/pfx:Exception/pfx:ExceptionDetail/pfx:DumpAnalysis"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </DUMPANALYSIS>
                    </inputSet>
                </inputs>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:transition>
        <pd:from>Group (1)</pd:from>
        <pd:to>Group</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>IgnoreMessage</pd:to>
        <pd:xpathDescription>Ignore</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$Map-Data/root/Store='ignore'</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>IgnoreMessage</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>Group (1)</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>