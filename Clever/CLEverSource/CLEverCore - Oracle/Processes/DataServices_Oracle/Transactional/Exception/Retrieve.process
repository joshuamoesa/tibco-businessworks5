<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://www.tibco.com/pe/EngineTypes" xmlns:pfx="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns2="http://www.tibco.com/CLEver/namespace/Custom" xmlns:ns1="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns4="http://www.tibco.com/CLEver/InternalException" xmlns:ns3="http://www.tibco.com/CLEver/Exception" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx4="http://www.tibco.com/CLEver/Log" xmlns:pfx3="http://www.tibco.com/CLEver/ExtraTypes" xmlns:pfx2="http://www.tibco.com/CLEver/BusinessDomain" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <xsd:import namespace="http://www.tibco.com/CLEver/Log" schemaLocation="/Shared Resources/Schema Definitions/CLEver/Log.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CLEver/Exception" schemaLocation="/Shared Resources/Schema Definitions/CLEver/Exception.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CLEver/BusinessDomain" schemaLocation="/Shared Resources/Schema Definitions/CLEver/BusinessDomain.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CLEver/ExtraTypes" schemaLocation="/Shared Resources/Schema Definitions/CLEver/ExtraTypes.xsd"/>
    <pd:name>Processes/DataServices_Oracle/Transactional/Exception/Retrieve.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="Input">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="FromRow" type="xsd:long"/>
                    <xsd:element name="ToRow" type="xsd:long"/>
                    <xsd:element ref="pfx3:RestrictionParameters"/>
                    <xsd:element ref="pfx3:Security"/>
                    <xsd:element name="OrderBy">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Row" type="xsd:string"/>
                                <xsd:element name="Asc" type="xsd:boolean"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>30</pd:startX>
    <pd:startY>96</pd:startY>
    <pd:returnBindings>
        <Output>
            <ns3:Exceptions>
                <xsl:for-each select="$SelectItems/jdbcGeneralActivityOutput/unknownResultset/row">
                    <ns3:Exception>
                        <ns3:ID>
                            <xsl:value-of select="column[name='ID']/value"/>
                        </ns3:ID>
                        <pfx3:ProcessContext>
                            <pfx3:BusinessDomain>
                                <xsl:value-of select="column[name='BUSINESSDOMAIN']/value"/>
                            </pfx3:BusinessDomain>
                            <pfx3:TechnicalDomain>
                                <xsl:value-of select="column[name='TECHNICALDOMAIN']/value"/>
                            </pfx3:TechnicalDomain>
                            <pfx3:BusinessConcept>
                                <xsl:value-of select="column[name='BUSINESSCONCEPT']/value"/>
                            </pfx3:BusinessConcept>
                            <pfx3:BusinessOperation>
                                <xsl:value-of select="column[name='BUSINESSOPERATION']/value"/>
                            </pfx3:BusinessOperation>
                            <pfx3:TransactionID>
                                <xsl:value-of select="column[name='TRANSACTIONID']/value"/>
                            </pfx3:TransactionID>
                            <pfx3:ServiceName>
                                <xsl:value-of select="column[name='SERVICE']/value"/>
                            </pfx3:ServiceName>
                            <pfx3:ProcessName>
                                <xsl:value-of select="column[name='PROCEDURENAME']/value"/>
                            </pfx3:ProcessName>
                            <pfx3:ComponentName>
                                <xsl:value-of select="column[name='COMPONENT']/value"/>
                            </pfx3:ComponentName>
                            <pfx3:HostName>
                                <xsl:value-of select="column[name='HOSTNAME']/value"/>
                            </pfx3:HostName>
                            <pfx3:DateTime>
                                <xsl:value-of select="column[name='DATETIME']/value"/>
                            </pfx3:DateTime>
                        </pfx3:ProcessContext>
                        <ns3:ExceptionDetail>
                            <ns3:ExceptionCategory>
                                <xsl:value-of select="column[name='EXCEPTIONCATEGORY']/value"/>
                            </ns3:ExceptionCategory>
                            <ns3:ExceptionSeverity>
                                <xsl:value-of select="column[name='EXCEPTIONSEVERITY']/value"/>
                            </ns3:ExceptionSeverity>
                            <ns3:ExceptionType>
                                <xsl:value-of select="column[name='EXCEPTIONTYPE']/value"/>
                            </ns3:ExceptionType>
                            <ns3:ExceptionCode>
                                <xsl:value-of select="column[name='EXCEPTIONCODE']/value"/>
                            </ns3:ExceptionCode>
                            <ns3:ReplyDestination>
                                <xsl:value-of select="column[name='REPLYDESTINATION']/value"/>
                            </ns3:ReplyDestination>
                            <ns3:Status>
                                <xsl:value-of select="column[name='STATUS']/value"/>
                            </ns3:Status>
                        </ns3:ExceptionDetail>
                    </ns3:Exception>
                </xsl:for-each>
            </ns3:Exceptions>
            <MaxRows>
                <xsl:value-of select="$Determine-rows/jdbcGeneralActivityOutput/unknownResultset[1]/row[1]/column[1]/value"/>
            </MaxRows>
            <FromRow>
                <xsl:value-of select="$Determine-Range/Range/From"/>
            </FromRow>
            <ToRow>
                <xsl:value-of select="$Determine-Range/Range/To"/>
            </ToRow>
        </Output>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="Output">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="ns3:Exceptions"/>
                    <xsd:element name="MaxRows" type="xsd:long"/>
                    <xsd:element name="FromRow" type="xsd:long"/>
                    <xsd:element name="ToRow" type="xsd:long"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>979</pd:endX>
    <pd:endY>35</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1296764324249</pd:targetNamespace>
    <pd:activity name="Handle Exception">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>218</pd:x>
        <pd:y>332</pd:y>
        <config>
            <processName>/Processes/InternalServices/Exception Handler/Local Exception Handler.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <ns4:Exception>
                    <Service>
                        <xsl:value-of select="$_error/ns:ErrorReport/ProcessStack"/>
                    </Service>
                    <ErrorMessage>
                        <xsl:value-of select="'DataService error'"/>
                    </ErrorMessage>
                    <xsl:if test="$_error/ns:ErrorReport/MsgCode">
                        <ErrorCode>
                            <xsl:value-of select="$_error/ns:ErrorReport/MsgCode"/>
                        </ErrorCode>
                    </xsl:if>
                    <ns4:Error>
                        <ns4:ErrorReport>
                            <xsl:copy-of select="$_error/ns:ErrorReport/ancestor-or-self::*/namespace::node()"/>
                            <xsl:copy-of select="$_error/ns:ErrorReport/@*"/>
                            <xsl:copy-of select="$_error/ns:ErrorReport/node()"/>
                        </ns4:ErrorReport>
                    </ns4:Error>
                </ns4:Exception>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ValidateOperation">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>123</pd:x>
        <pd:y>98</pd:y>
        <config>
            <processName>/Processes/DataServices/Security/SecurityEntryPoint/ValidateOperation.process</processName>
        </config>
        <pd:inputBindings>
            <pfx3:ValidateOperation>
                <xsl:copy-of select="$Start/Input/pfx3:Security"/>
                <pfx3:Object>
                    <xsl:value-of select="''"/>
                </pfx3:Object>
                <pfx3:Operation>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/StaticVariables/Operations/Retrieve"/>
                </pfx3:Operation>
            </pfx3:ValidateOperation>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>72</pd:x>
        <pd:y>333</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Rethrow">
        <pd:type>com.tibco.pe.core.RethrowActivity</pd:type>
        <pd:resourceType>ae.activities.rethrow</pd:resourceType>
        <pd:x>356</pd:x>
        <pd:y>332</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="SelectItems">
        <pd:type>com.tibco.plugin.jdbc.JDBCGeneralActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCGeneralActivity</pd:resourceType>
        <pd:x>874</pd:x>
        <pd:y>34</pd:y>
        <config>
            <timeout>%%Connections/DB/Oracle/MainStorage/ExecutionTimeOut%%</timeout>
            <commit>false</commit>
            <maxRows>0</maxRows>
            <jdbcSharedConfig>/Shared Resources/Connections/DB/Oracle/MainStorage.sharedjdbc</jdbcSharedConfig>
        </config>
        <pd:inputBindings>
            <jdbcGeneralActivityInput>
                <statement>
                    <xsl:value-of select="concat('SELECT m.ID, cat.NAME exceptioncategory,&#xA;                         trans.NAME transactionid, srv.NAME service,&#xA;                         component.NAME component, proc.NAME procedurename,&#xA;                         HOST.NAME hostname, code.NAME exceptioncode,&#xA;                         bdomain.NAME businessdomain,&#xA;                         operation.NAME businessoperation,&#xA;                         concept.NAME businessconcept,&#xA;                         tdomain.NAME technicaldomain,&#xA;                         sev.NAME exceptionseverity, typ.NAME exceptiontype,&#xA;                         m.datetime, m.replydestination, status.NAME status  FROM (SELECT * FROM (',$Construct-InnerQuery/root/InnerSQL,')where  rn between ',$Determine-Range/Range/From,' and ',$Determine-Range/Range/To,') m,&#xA;       tda_exceptioncategory cat,&#xA;       tda_exceptioncode code,&#xA;       tda_exceptionseverity sev,&#xA;       tda_exceptiontype typ,&#xA;       tda_hostname HOST,&#xA;       tda_procedure proc,&#xA;       tda_service srv,&#xA;       tda_technicaldomain tdomain,&#xA;       tda_transactionid trans,&#xA;       tda_businessconcept concept,&#xA;       tda_businessdomain bdomain,&#xA;       tda_businessoperation operation,&#xA;       tda_component component,&#xA;       tda_status status&#xA; WHERE m.transactionid = trans.ID(+)&#xA;   AND m.service = srv.ID(+)&#xA;   AND m.component = component.ID(+)&#xA;   AND m.procedurename = proc.ID(+)&#xA;   AND m.hostname = HOST.ID(+)&#xA;   AND m.exceptioncategory = cat.ID(+)&#xA;   AND m.exceptioncode = code.ID(+)&#xA;   AND m.exceptionseverity = sev.ID(+)&#xA;   AND m.exceptiontype = typ.ID(+)&#xA;   AND m.technicaldomain = tdomain.ID(+)&#xA;   AND m.businessdomain = bdomain.ID(+)&#xA;   AND m.businessoperation = operation.ID(+)&#xA;   AND m.businessconcept = concept.ID(+)&#xA;   AND m.status = status.ID(+)')"/>
                </statement>
            </jdbcGeneralActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Construct InnerQuery">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>659</pd:x>
        <pd:y>42</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="InnerSQL" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <InnerSQL>
                    <xsl:value-of select="concat('SELECT TDA_EXCEPTION.*,(ROW_NUMBER() OVER (',$Construct-Where-Orderby/root/OrderByStatement,')) rn FROM ', $Determine-From/Output/From,' WHERE ',tib:concat-sequence-format($Construct-Where-Orderby/root/group/WHERECLAUSE, ' AND ', true()),$Construct-Where-Orderby/root/OrderByStatement)"/>
                </InnerSQL>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ConstructOrderBy">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>330</pd:x>
        <pd:y>34</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="ORDERBY" type="xsd:string" minOccurs="0"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <xsl:if test="string-length($Start/Input/OrderBy/Row)>1">
                    <xsl:variable name="sortColumn" select="$Start/Input/OrderBy/Row"/>
                    <xsl:choose>
                        <xsl:when test="$sortColumn='Category'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_EXCEPTIONCATEGORY.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='Code'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_EXCEPTIONCODE.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='Type'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_EXCEPTIONTYPE.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='Severity'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_EXCEPTIONSEVERITY.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='Status'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_STATUS.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='Role'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_ROLE.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='HostName'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_HOSTNAME.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='Service'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_SERVICE.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='TechnicalDomain'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_TECHNICALDOMAIN.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='Transactionid'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_TRANSACTIONID.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='Concept'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_BUSINESSCONCEPT.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='BusinessDomain'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_BUSINESSDOMAIN.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='Operation'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_BUSINESSOPERATION.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='Component'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_COMPONENT.NAME'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:when test="$sortColumn='Date'">
                            <ORDERBY>
                                <xsl:value-of select="'TDA_EXCEPTION.datetime'"/>
                            </ORDERBY>
                        </xsl:when>
                        <xsl:otherwise>
                            <ORDERBY>
                                <xsl:value-of select="'TDA_EXCEPTION.datetime'"/>
                            </ORDERBY>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:if>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Determine rows">
        <pd:type>com.tibco.plugin.jdbc.JDBCGeneralActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCGeneralActivity</pd:resourceType>
        <pd:x>774</pd:x>
        <pd:y>201</pd:y>
        <config>
            <timeout>%%Connections/DB/Oracle/MainStorage/ExecutionTimeOut%%</timeout>
            <commit>false</commit>
            <maxRows>100</maxRows>
            <jdbcSharedConfig>/Shared Resources/Connections/DB/Oracle/MainStorage.sharedjdbc</jdbcSharedConfig>
        </config>
        <pd:inputBindings>
            <jdbcGeneralActivityInput>
                <statement>
                    <xsl:value-of select="concat('SELECT ',$Construct-Count/root/SELECT,' FROM ',$Construct-Count/root/FROM,' WHERE ',$Construct-Count/root/WHERE)"/>
                </statement>
            </jdbcGeneralActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Determine Range">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>768</pd:x>
        <pd:y>34</pd:y>
        <config>
            <element>
                <xsd:element name="Range">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="From" type="xsd:long"/>
                            <xsd:element name="To" type="xsd:long"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <Range>
                <xsl:variable name="MaxRow" select="$Determine-rows/jdbcGeneralActivityOutput/unknownResultset[1]/row[1]/column[1]/value"/>
                <xsl:variable name="FromRow" select="if ($Start/Input/FromRow&lt;0) then&#xA;0&#xA;else&#xA;$Start/Input/FromRow"/>
                <xsl:choose>
                    <xsl:when test="($FromRow + 100)&lt;$MaxRow">
                        <From>
                            <xsl:value-of select="$FromRow"/>
                        </From>
                        <To>
                            <xsl:value-of select="$FromRow + 100"/>
                        </To>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="($MaxRow - 100)>0">
                                <From>
                                    <xsl:value-of select="$MaxRow - 100"/>
                                </From>
                            </xsl:when>
                            <xsl:otherwise>
                                <From>
                                    <xsl:value-of select="0"/>
                                </From>
                            </xsl:otherwise>
                        </xsl:choose>
                        <To>
                            <xsl:value-of select="$MaxRow"/>
                        </To>
                    </xsl:otherwise>
                </xsl:choose>
            </Range>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Construct Where Clause">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>238</pd:x>
        <pd:y>101</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="group" minOccurs="0" maxOccurs="unbounded">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="WHERECLAUSE" type="xsd:string" minOccurs="0"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:ExceptionCode)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.EXCEPTIONCODE=TDA_EXCEPTIONCODE.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_EXCEPTIONCODE.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:ExceptionCode,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:ExceptionCategory)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.EXCEPTIONCATEGORY=TDA_EXCEPTIONCATEGORY.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_EXCEPTIONCATEGORY.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:ExceptionCategory,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:ExceptionSeverity)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.EXCEPTIONSEVERITY=TDA_EXCEPTIONSEVERITY.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_EXCEPTIONSEVERITY.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:ExceptionSeverity,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:ExceptionType)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.EXCEPTIONTYPE=TDA_EXCEPTIONTYPE.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_EXCEPTIONTYPE.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:ExceptionType,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:Status)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.STATUS=TDA_STATUS.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_STATUS.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:Status,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:TransactionId)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.TRANSACTIONID=TDA_TRANSACTIONID.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_TRANSACTIONID.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:TransactionId,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:Service)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.SERVICE=TDA_SERVICE.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_SERVICE.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:Service,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:Component)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.COMPONENT=TDA_COMPONENT.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_COMPONENT.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:Component,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:ProcedureName)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.PROCEDURENAME=TDA_PROCEDURE.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_PROCEDURE.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:ProcedureName,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:HostName)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.HOSTNAME=TDA_HOSTNAME.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_HOSTNAME.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:HostName,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:Role)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.ROLE=TDA_ROLE.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_ROLE.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:Role,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:StartDate)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_EXCEPTION.DATE_NUMBER >= &quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:StartDate)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:EndDate)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_EXCEPTION.DATE_NUMBER &lt;= &quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:EndDate)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:TechnicalDomain)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.TECHNICALDOMAIN=TDA_TECHNICALDOMAIN.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_TECHNICALDOMAIN.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:TechnicalDomain,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:BusinessDomain)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.BUSINESSDOMAIN=TDA_BUSINESSDOMAIN.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_BUSINESSDOMAIN.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:BusinessDomain,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:BusinessOperation)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.BUSINESSOPERATION=TDA_BUSINESSOPERATION.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_BUSINESSOPERATION.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:BusinessOperation,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:BusinessConcept)>0">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.BUSINESSCONCEPT=TDA_BUSINESSCONCEPT.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_BUSINESSCONCEPT.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:BusinessConcept,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count($Start/Input/pfx3:RestrictionParameters/pfx3:BusinessRef/pfx3:Name)+count($Start/Input/pfx3:RestrictionParameters/pfx3:BusinessRef/pfx3:Value)>1">
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="'TDA_EXCEPTION.ID=TDA_REFERENCE.ID'"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_REFERENCE.NAME='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:BusinessRef/pfx3:Name,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                        <group>
                            <WHERECLAUSE>
                                <xsl:value-of select="concat(&quot;TDA_REFERENCE.VALUE='&quot;,$Start/Input/pfx3:RestrictionParameters/pfx3:BusinessRef/pfx3:Value,&quot;'&quot;)"/>
                            </WHERECLAUSE>
                        </group>
                    </xsl:when>
                </xsl:choose>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Construct-Count">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>511</pd:x>
        <pd:y>198</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="SELECT" type="xsd:string"/>
                            <xsd:element name="FROM" type="xsd:string"/>
                            <xsd:element name="WHERE" type="xsd:string"/>
                            <xsd:element name="ORDERBY" type="xsd:string" minOccurs="0"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <SELECT>
                    <xsl:value-of select="&quot;count (*)&quot;"/>
                </SELECT>
                <FROM>
                    <xsl:value-of select="$DetermineFrom/Output/From"/>
                </FROM>
                <WHERE>
                    <xsl:value-of select="tib:concat-sequence-format($Construct-Where-Clause/root/group/WHERECLAUSE, &quot; AND &quot;, true())"/>
                </WHERE>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="DetermineFrom">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>342</pd:x>
        <pd:y>199</pd:y>
        <config>
            <processName>/Processes/DataServices_Oracle/Transactional/General/SQLHelpers/DetermineFrom.process</processName>
        </config>
        <pd:inputBindings>
            <Input>
                <xsl:for-each select="$Construct-Where-Clause/root/group">
                    <xsl:for-each select="tib:tokenize(WHERECLAUSE,'=')">
                        <Tables>
                            <Name>
                                <xsl:value-of select="substring-before(., '.')"/>
                            </Name>
                        </Tables>
                    </xsl:for-each>
                </xsl:for-each>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Construct Where Orderby">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>447</pd:x>
        <pd:y>42</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="group" minOccurs="0" maxOccurs="unbounded">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="WHERECLAUSE" type="xsd:string" minOccurs="0"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                            <xsd:element name="OrderByStatement" type="xsd:string" minOccurs="0"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <xsl:copy-of select="$Construct-Where-Clause/root/group"/>
                <xsl:variable name="Table" select="concat(substring-before(upper-case($ConstructOrderBy/root/ORDERBY), '.'),'.')"/>
                <xsl:if test="not(contains(tib:concat-sequence-format($Construct-Where-Clause/root/group/WHERECLAUSE,',', true()), $Table))">
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_STATUS.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.STATUS=TDA_STATUS.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_EXCEPTIONCODE.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.EXCEPTIONCODE=TDA_EXCEPTIONCODE.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_EXCEPTIONCATEGORY.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.EXCEPTIONCATEGORY=TDA_EXCEPTIONCATEGORY.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_EXCEPTIONSEVERITY.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.EXCEPTIONSEVERITY=TDA_EXCEPTIONSEVERITY.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_EXCEPTIONTYPE.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.EXCEPTIONTYPE=TDA_EXCEPTIONTYPE.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_BUSINESSCONCEPT.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.BUSINESSCONCEPT=TDA_BUSINESSCONCEPT.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_BUSINESSOPERATION.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.BUSINESSOPERATION=TDA_BUSINESSOPERATION.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_BUSINESSDOMAIN.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.BUSINESSDOMAIN=TDA_BUSINESSDOMAIN.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_TECHNICALDOMAIN.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.TECHNICALDOMAIN=TDA_TECHNICALDOMAIN.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_ROLE.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.ROLE=TDA_ROLE.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_HOSTNAME.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.HOSTNAME=TDA_HOSTNAME.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_PROCEDURE.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.PROCEDURENAME=TDA_PROCEDURE.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_COMPONENT.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.COMPONENT=TDA_COMPONENT.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_SERVICE.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.SERVICE=TDA_SERVICE.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="contains($Table, 'TDA_TRANSACTIONID.')">
                            <group>
                                <WHERECLAUSE>
                                    <xsl:value-of select="'TDA_EXCEPTION.TRANSACTIONID=TDA_TRANSACTIONID.ID(+)'"/>
                                </WHERECLAUSE>
                            </group>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="string-length($ConstructOrderBy/root/ORDERBY)>0">
                    <OrderByStatement>
                        <xsl:value-of select="concat(' ORDER BY ',$ConstructOrderBy/root/ORDERBY ,if ($Start/Input/OrderBy/Asc='true')then ' ASC' else ' DESC')"/>
                    </OrderByStatement>
                </xsl:if>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Determine From">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>568</pd:x>
        <pd:y>34</pd:y>
        <config>
            <processName>/Processes/DataServices_Oracle/Transactional/General/SQLHelpers/DetermineFrom.process</processName>
        </config>
        <pd:inputBindings>
            <Input>
                <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Construct-Where-Orderby/root/group">
                    <xsl:for-each select="tib:tokenize(WHERECLAUSE,'=')">
                        <Tables>
                            <Name>
                                <xsl:value-of select="substring-before(., '.')"/>
                            </Name>
                        </Tables>
                    </xsl:for-each>
                </xsl:for-each>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>ValidateOperation</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>Handle Exception</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Handle Exception</pd:from>
        <pd:to>Rethrow</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SelectItems</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Determine rows</pd:from>
        <pd:to>Determine Range</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Determine Range</pd:from>
        <pd:to>SelectItems</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ValidateOperation</pd:from>
        <pd:to>Construct Where Clause</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Construct Where Clause</pd:from>
        <pd:to>ConstructOrderBy</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Construct-Count</pd:from>
        <pd:to>Determine rows</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ConstructOrderBy</pd:from>
        <pd:to>Construct Where Orderby</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Construct InnerQuery</pd:from>
        <pd:to>Determine Range</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Construct Where Clause</pd:from>
        <pd:to>DetermineFrom</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>DetermineFrom</pd:from>
        <pd:to>Construct-Count</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Construct Where Orderby</pd:from>
        <pd:to>Determine From</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Determine From</pd:from>
        <pd:to>Construct InnerQuery</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>