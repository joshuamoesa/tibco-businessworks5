<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx="urn:GenericMessageRequest" xmlns:ns="http://tempuri.org" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx2="http://tempuri.org/GenericRequest" xmlns:pfx3="http://www.tibco.com/ns/no_namespace_schema_location/WSDL/ASTRID/GenericMessageRequest.wsdl" xmlns:pfx4="http://xmlns.kpn.com/common/cdm/ErrorMessage.xsd" xmlns:pfx5="urn:NotifyNumberInportingComplete" xmlns:ns0="http://www.tibco.com/bw/xslt/custom-functions" xmlns:ns2="http://xmlns.kpn.com/fixed/common/AnyXMLMessage.xsd" xmlns:ns1="http://xmlns.kpn.com/common/cdm/Base.xsd" xmlns:ns3="http://xmlns.kpn.com/fixed/EDTAdapter/Response/UpsertTroubleReport.xsd" xmlns:pfx6="http://xmlns.kpn.com/fixed/portingservices/publish/NotifyNumberInportingComplete" xmlns:ns4="http://xmlns.kpn.com/fixed/EDTAdapter/common/CustomerIncidentReport.xsd" xmlns:ns5="http://xmlns.kpn.com/fixed/EDTAdapter/common/EDTResponse.xsd" xmlns:ns6="http://xmlns.kpn.com/common/cdm/ResultStatus.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns7="http://www.tibco.com/pe/EngineTypes" xmlns:pfx7="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:ns8="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns9="http://xmlns.kpn.com/fixed/ASTRIDAdapter/Response/UpsertCustomerIncidentReport.xsd" xmlns:ns10="http://xmlns.kpn.com/fixed/ASTRIDAdapter/common/TroubleReport.xsd" xmlns:ns11="http://xmlns.kpn.com/fixed/ASTRIDAdapter/common/ASTRIDResponse.xsd" xmlns:ns12="http://schemas.tibco.com/bw/plugins/soap/5.0/SoapPluginExceptions" xmlns:ns13="http://xmlns.kpn.com/fixed/ASTRIDAdapter/../WSDL/ASTRIDAdapter/GenericMessageRequest.xsd" xmlns:ns14="http://xmlns.kpn.com/fixed/common/internal/InitialError.xsd" xmlns:pfx8="urn:FIND_CUSTOMER" xmlns:pfx9="http://xmlns.kpn.com/fixed/ckradapter/request/FindCustomer.xsd" xmlns:pfx10="http://xmlns.kpn.com/fixed/ckradapter/response/FindCustomer.xsd" xmlns:pfx11="urn:GET_LINE_MEASUREMENT" xmlns:ns15="http://xmlns.kpn.com/fixed/ckradapter/common/Customer.xsd" xmlns:ns16="http://xmlns.kpn.com/fixed/ckradapter/common/CKRResponse.xsd" xmlns:ns17="http://xmlns.kpn.com/fixed/ckradapter/common/PropertyAddress.xsd" xmlns:ns18="http://xmlns.kpn.com/fixed/ckradapter/common/CustomerReference.xsd" xmlns:pfx12="urn:GET_CUSTOMER_DETAILS" xmlns:pfx13="http://xmlns.kpn.com/fixed/ckradapter/request/GetCustomerDetails.xsd" xmlns:pfx14="http://xmlns.kpn.com/fixed/ckradapter/response/GetCustomerDetails.xsd" xmlns:ns19="http://xmlns.kpn.com/fixed/ckradapter/common/OrganizationName.xsd" xmlns:ns20="http://xmlns.kpn.com/fixed/ckradapter/common/IndividualName.xsd" xmlns:pfx15="urn:GET_WORKORDERS" xmlns:pfx16="http://xmlns.kpn.com/fixed/ckradapter/request/GetWorkorders.xsd" xmlns:pfx17="http://xmlns.kpn.com/fixed/ckradapter/response/GetWorkorders.xsd" xmlns:ns21="http://xmlns.kpn.com/fixed/ckradapter/common/WorkOrder.xsd" xmlns:pfx18="urn:GET_CUSTOMER_CONTRACTS" xmlns:pfx19="http://xmlns.example.com/unique/default/namespace/1086798195751" xmlns:pfx20="http://xmlns.example.com/unique/default/namespace/1086802669975" xmlns:pfx21="urn:GET_RESOLVING_AGENCY" xmlns:pfx22="http://xmlns.example.com/unique/default/namespace/1086798170185" xmlns:pfx23="http://xmlns.example.com/unique/default/namespace/1086802623578" xmlns:pfx24="urn:GET_FORMULA" xmlns:pfx25="http://xmlns.example.com/unique/default/namespace/1086802560428" xmlns:pfx26="http://xmlns.example.com/unique/default/namespace/1086801773556" xmlns:ns22="http://xmlns.example.com/unique/default/namespace/1087368660275" xmlns:pfx27="urn:UPGRADE_FORMULA" xmlns:pfx28="http://xmlns.example.com/unique/default/namespace/1086802017757" xmlns:pfx29="http://xmlns.example.com/unique/default/namespace/1086802823065" xmlns:pfx30="urn:GET_AGENDA" xmlns:pfx31="http://xmlns.example.com/unique/default/namespace/1086798099673" xmlns:pfx32="http://xmlns.example.com/unique/default/namespace/1086802525597" xmlns:eai="java://com.kpn.eai.tools.Tools" xmlns:ns23="http://xmlns.tibco.com/encodings/mime">
    <xsd:import namespace="http://tempuri.org/GenericRequest" schemaLocation="/WSDL/ASTRIDAdapter/GenericRequest.xsd"/>
    <xsd:import namespace="urn:GenericMessageRequest" schemaLocation="/WSDL/EDTAdapter/GenericMessageRequest.wsdl"/>
    <xsd:import namespace="http://xmlns.kpn.com/common/cdm/ResultStatus.xsd" schemaLocation="/XSDSchemas/Common/ResultStatus.xsd"/>
    <xsd:import namespace="" schemaLocation=""/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/ckradapter/request/FindCustomer.xsd" schemaLocation="/XSDSchemas/CKRAdapter/Request/FindCustomer.xsd"/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/ckradapter/response/FindCustomer.xsd" schemaLocation="/XSDSchemas/CKRAdapter/Response/FindCustomer.xsd"/>
    <xsd:import namespace="urn:GET_LINE_MEASUREMENT" schemaLocation="/WSDL/EDTAdapter/006 - GET_LINE_MEASUREMENT.wsdl"/>
    <xsd:import namespace="urn:FIND_CUSTOMER" schemaLocation="/WSDL/EDTAdapter/001 - FIND_CUSTOMER.wsdl"/>
    <xsd:import namespace="http://xmlns.kpn.com/common/cdm/ErrorMessage.xsd" schemaLocation="/XSDSchemas/Common/ErrorMessage.xsd"/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/ckradapter/request/GetCustomerDetails.xsd" schemaLocation="/XSDSchemas/CKRAdapter/Request/GetCustomerDetails.xsd"/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/ckradapter/response/GetCustomerDetails.xsd" schemaLocation="/XSDSchemas/CKRAdapter/Response/GetCustomerDetails.xsd"/>
    <xsd:import namespace="urn:GET_CUSTOMER_DETAILS" schemaLocation="/WSDL/EDTAdapter/002 - GET_CUSTOMER_DETAILS.wsdl"/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/ckradapter/request/GetWorkorders.xsd" schemaLocation="/XSDSchemas/CKRAdapter/Request/GetWorkOrders.xsd"/>
    <xsd:import namespace="http://xmlns.kpn.com/fixed/ckradapter/response/GetWorkorders.xsd" schemaLocation="/XSDSchemas/CKRAdapter/Response/GetWorkOrders.xsd"/>
    <xsd:import namespace="urn:GET_WORKORDERS" schemaLocation="/WSDL/EDTAdapter/003 - GET_WORKORDERS.wsdl"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086798195751" schemaLocation="/XSDSchemas/EnginAdapter/Request/GetCustomerContract.xsd"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086802669975" schemaLocation="/XSDSchemas/EnginAdapter/Response/GetCustomerContract.xsd"/>
    <xsd:import namespace="urn:GET_CUSTOMER_CONTRACTS" schemaLocation="/WSDL/EDTAdapter/004 - GET_CUSTOMER_CONTRACTS.wsdl"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086798170185" schemaLocation="/XSDSchemas/EnginAdapter/Request/GetResolvingAgency.xsd"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086802623578" schemaLocation="/XSDSchemas/EnginAdapter/Response/GetResolvingAgency.xsd"/>
    <xsd:import namespace="urn:GET_RESOLVING_AGENCY" schemaLocation="/WSDL/EDTAdapter/007 - GET_RESOLVING_AGENCY.wsdl"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086802560428" schemaLocation="/XSDSchemas/EnginAdapter/Response/GetFormula.xsd"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086801773556" schemaLocation="/XSDSchemas/EnginAdapter/Request/GetFormula.xsd"/>
    <xsd:import namespace="urn:GET_FORMULA" schemaLocation="/WSDL/EDTAdapter/008 - GET_FORMULA.wsdl"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086802017757" schemaLocation="/XSDSchemas/EnginAdapter/Request/UpgradeFormula.xsd"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086802823065" schemaLocation="/XSDSchemas/EnginAdapter/Response/UpgradeFormula.xsd"/>
    <xsd:import namespace="urn:UPGRADE_FORMULA" schemaLocation="/WSDL/EDTAdapter/009 - UPGRADE_FORMULA.wsdl"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086802525597" schemaLocation="/XSDSchemas/EnginAdapter/Response/GetAgenda.xsd"/>
    <xsd:import namespace="urn:GET_AGENDA" schemaLocation="/WSDL/ASTRIDAdapter/GET_AGENDA.wsdl"/>
    <xsd:import namespace="http://xmlns.example.com/unique/default/namespace/1086798099673" schemaLocation="/XSDSchemas/EnginAdapter/Request/GetAgenda.xsd"/>
    <wsdl:import namespace="urn:GenericMessageRequest" location="/WSDL/EDTAdapter/GenericMessageRequest.wsdl"/>
    <wsdl:import namespace="urn:FIND_CUSTOMER" location="/WSDL/EDTAdapter/001 - FIND_CUSTOMER.wsdl"/>
    <wsdl:import namespace="urn:GET_CUSTOMER_DETAILS" location="/WSDL/EDTAdapter/002 - GET_CUSTOMER_DETAILS.wsdl"/>
    <wsdl:import namespace="urn:GET_WORKORDERS" location="/WSDL/EDTAdapter/003 - GET_WORKORDERS.wsdl"/>
    <wsdl:import namespace="urn:GET_CUSTOMER_CONTRACTS" location="/WSDL/EDTAdapter/004 - GET_CUSTOMER_CONTRACTS.wsdl"/>
    <wsdl:import namespace="urn:GET_RESOLVING_AGENCY" location="/WSDL/EDTAdapter/007 - GET_RESOLVING_AGENCY.wsdl"/>
    <wsdl:import namespace="urn:GET_FORMULA" location="/WSDL/EDTAdapter/008 - GET_FORMULA.wsdl"/>
    <wsdl:import namespace="urn:UPGRADE_FORMULA" location="/WSDL/EDTAdapter/009 - UPGRADE_FORMULA.wsdl"/>
    <wsdl:import namespace="urn:GET_AGENDA" location="/WSDL/ASTRIDAdapter/GET_AGENDA.wsdl"/>
    <pd:name>ASTRIDAdapter/Processes/GetAgenda.process</pd:name>
    <pd:description>Generic process that handles all communications originating from EDT, directed towards the EAI bus.
Note: It deals with client request-reply and server publish-subscribe.</pd:description>
    <pd:startName>SOAPEventSource</pd:startName>
    <pd:startX>0</pd:startX>
    <pd:startY>0</pd:startY>
    <pd:returnBindings/>
    <pd:starter name="SOAPEventSource">
        <pd:type>com.tibco.plugin.soap.SOAPEventSource</pd:type>
        <pd:resourceType>ae.activities.SOAPEventSourceUI</pd:resourceType>
        <pd:x>77</pd:x>
        <pd:y>176</pd:y>
        <config>
            <_eventTimeout>60000</_eventTimeout>
            <service>pfx30:GET_AGENDAPortType</service>
            <operation>GetAgendaRequest</operation>
            <attachmentStyle>none</attachmentStyle>
            <wsdlNamespaceRoot>urn:GET_AGENDA/GetAgendaRequestImpl</wsdlNamespaceRoot>
            <operationStyle>document</operationStyle>
            <soapUse>literal</soapUse>
            <embedWsdlComponents>true</embedWsdlComponents>
            <embedSchemaComponents>true</embedSchemaComponents>
            <soapAction>urn:GET_AGENDA/GetAgenda</soapAction>
            <sharedChannel>/ASTRIDAdapter/Shared Resources/HTTP Server Connection.sharedhttp</sharedChannel>
            <sharedChannels>
                <httpChannel>
                    <useBasicAuthentication>false</useBasicAuthentication>
                </httpChannel>
            </sharedChannels>
            <useBasicAuthentication>false</useBasicAuthentication>
            <portAddressPrefix/>
            <inputAttachmentBindings/>
            <outputAttachmentBindings/>
        </config>
        <pd:inputBindings/>
    </pd:starter>
    <pd:endName>End</pd:endName>
    <pd:endX>826</pd:endX>
    <pd:endY>404</pd:endY>
    <pd:errorSchemas>
        <InternalError ref="pfx:GenericMessage"/>
    </pd:errorSchemas>
    <pd:processVariables>
        <ErrorStatus>
            <xsd:element name="ResultStatus" type="ns6:ResultStatus"/>
        </ErrorStatus>
    </pd:processVariables>
    <pd:activity name="Log Error">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>368</pd:x>
        <pd:y>406</pd:y>
        <config>
            <processName>/Common/Sub Processes/Sub_LogError.process</processName>
        </config>
        <pd:inputBindings>
            <LogError>
                <xsl:choose>
                    <xsl:when test="exists($_error)">
                        <STACK_TRACE>
                            <xsl:value-of select="$_error/ns7:ErrorReport/StackTrace"/>
                        </STACK_TRACE>
                    </xsl:when>
                </xsl:choose>
                <ExistingCMH>
                    <COMPONENT-ID>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentId"/>
                    </COMPONENT-ID>
                    <COMPONENT-VERSION>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentVersion"/>
                    </COMPONENT-VERSION>
                    <COPY_ATTRIBUTES>
                        <xsl:value-of select="&quot;true&quot;"/>
                    </COPY_ATTRIBUTES>
                    <EXTENT_TRACKING>
                        <xsl:value-of select="&quot;true&quot;"/>
                    </EXTENT_TRACKING>
                    <xsl:for-each select="$FillCMH/CMH">
                        <CMH>
                            <ns1:ID>
                                <xsl:value-of select="ns1:ID"/>
                            </ns1:ID>
                            <ns1:NAME>
                                <xsl:value-of select="ns1:NAME"/>
                            </ns1:NAME>
                            <xsl:if test="ns1:FID">
                                <ns1:FID>
                                    <xsl:value-of select="ns1:FID"/>
                                </ns1:FID>
                            </xsl:if>
                            <xsl:if test="ns1:MID">
                                <ns1:MID>
                                    <xsl:value-of select="ns1:MID"/>
                                </ns1:MID>
                            </xsl:if>
                            <ns1:PARADIGM>
                                <xsl:value-of select="ns1:PARADIGM"/>
                            </ns1:PARADIGM>
                            <ns1:OBJECT>
                                <xsl:value-of select="ns1:OBJECT"/>
                            </ns1:OBJECT>
                            <ns1:VERSION>
                                <xsl:value-of select="ns1:VERSION"/>
                            </ns1:VERSION>
                            <xsl:for-each select="ns1:FROM">
                                <ns1:FROM>
                                    <xsl:attribute name="ns1:COMPONENT_ID">
                                        <xsl:value-of select="@ns1:COMPONENT_ID"/>
                                    </xsl:attribute>
                                    <xsl:if test="@ns1:COMPONENT_VERSION">
                                        <xsl:attribute name="ns1:COMPONENT_VERSION">
                                            <xsl:value-of select="@ns1:COMPONENT_VERSION"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:if test="@ns1:END_USER_INFO">
                                        <xsl:attribute name="ns1:END_USER_INFO">
                                            <xsl:value-of select="@ns1:END_USER_INFO"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:if test="@ns1:SOURCE_ADDRESS">
                                        <xsl:attribute name="ns1:SOURCE_ADDRESS">
                                            <xsl:value-of select="@ns1:SOURCE_ADDRESS"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                </ns1:FROM>
                            </xsl:for-each>
                            <xsl:for-each select="ns1:TO">
                                <ns1:TO>
                                    <xsl:attribute name="ns1:DESTINATION">
                                        <xsl:value-of select="concat(&quot;ErrorLog.&quot;,@ns1:DESTINATION)"/>
                                    </xsl:attribute>
                                </ns1:TO>
                            </xsl:for-each>
                            <xsl:for-each select="ns1:TRACKING">
                                <ns1:TRACKING>
                                    <ns1:MESSAGE_ID>
                                        <xsl:value-of select="ns1:MESSAGE_ID"/>
                                    </ns1:MESSAGE_ID>
                                    <xsl:if test="ns1:EXTERNAL_REF">
                                        <ns1:EXTERNAL_REF>
                                            <xsl:value-of select="ns1:EXTERNAL_REF"/>
                                        </ns1:EXTERNAL_REF>
                                    </xsl:if>
                                    <xsl:for-each select="ns1:ITEM">
                                        <ns1:ITEM>
                                            <xsl:attribute name="ns1:APPINFO">
                                                <xsl:value-of select="@ns1:APPINFO"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="ns1:EVENT">
                                                <xsl:value-of select="@ns1:EVENT"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="ns1:TIMESTAMP">
                                                <xsl:value-of select="@ns1:TIMESTAMP"/>
                                            </xsl:attribute>
                                        </ns1:ITEM>
                                    </xsl:for-each>
                                    <xsl:for-each select="ns1:SEQUENCE_NO">
                                        <ns1:SEQUENCE_NO>
                                            <xsl:value-of select="."/>
                                        </ns1:SEQUENCE_NO>
                                    </xsl:for-each>
                                </ns1:TRACKING>
                            </xsl:for-each>
                            <xsl:for-each select="ns1:ATTRIBUTE">
                                <ns1:ATTRIBUTE>
                                    <xsl:attribute name="ns1:NAME">
                                        <xsl:value-of select="@ns1:NAME"/>
                                    </xsl:attribute>
                                    <xsl:attribute name="ns1:VALUE">
                                        <xsl:value-of select="@ns1:VALUE"/>
                                    </xsl:attribute>
                                </ns1:ATTRIBUTE>
                            </xsl:for-each>
                        </CMH>
                    </xsl:for-each>
                </ExistingCMH>
                <ResultStatus>
                    <xsl:choose>
                        <xsl:when test="exists($SoapEventError)">
                            <xsl:attribute name="ns6:STATUS">
                                <xsl:value-of select="&quot;3&quot;"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="(exists($Send-Rendezvous-Request)) and ($Send-Rendezvous-Request/ActivityOutput/body/RESULT_STATUS/@ns6:STATUS !=&quot;0&quot;)">
                            <xsl:attribute name="ns6:STATUS">
                                <xsl:value-of select="$Send-Rendezvous-Request/ActivityOutput/body/RESULT_STATUS/@ns6:STATUS"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="exists($_error_SOAPSendReply)">
                            <xsl:attribute name="ns6:STATUS">
                                <xsl:value-of select="&quot;2&quot;"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="ns6:STATUS">
                                <xsl:value-of select="&quot;1&quot;"/>
                            </xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="exists($SoapEventError)">
                            <xsl:attribute name="ns6:MSG_CODE">
                                <xsl:value-of select="&quot;EDT-03005&quot;"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="(exists($Send-Rendezvous-Request)) and ($Send-Rendezvous-Request/ActivityOutput/body/RESULT_STATUS/@ns6:STATUS !=&quot;0&quot;)">
                            <xsl:attribute name="ns6:MSG_CODE">
                                <xsl:value-of select="$Send-Rendezvous-Request/ActivityOutput/body/RESULT_STATUS/@ns6:MSG_CODE"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="exists($_error_SOAPSendReply)">
                            <xsl:attribute name="ns6:MSG_CODE">
                                <xsl:value-of select="&quot;EDT-03006&quot;"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="ns6:MSG_CODE">
                                <xsl:value-of select="&quot;EDT-03003&quot;"/>
                            </xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="exists($SoapEventError)">
                            <xsl:attribute name="ns6:ERROR_DESCRIPTION">
                                <xsl:value-of select="&quot;Error while receiving SOAP request&quot;"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="(exists($Send-Rendezvous-Request)) and ($Send-Rendezvous-Request/ActivityOutput/body/RESULT_STATUS/@ns6:STATUS !=&quot;0&quot;)">
                            <xsl:if test="$Send-Rendezvous-Request/ActivityOutput/body/RESULT_STATUS/@ns6:ERROR_DESCRIPTION">
                                <xsl:attribute name="ns6:ERROR_DESCRIPTION">
                                    <xsl:value-of select="$Send-Rendezvous-Request/ActivityOutput/body/RESULT_STATUS/@ns6:ERROR_DESCRIPTION"/>
                                </xsl:attribute>
                            </xsl:if>
                        </xsl:when>
                        <xsl:when test="exists($Send-Rendezvous-Request)">
                            <xsl:if test="$_error/ns7:ErrorReport/Msg">
                                <xsl:attribute name="ns6:ERROR_DESCRIPTION">
                                    <xsl:value-of select="$_error/ns7:ErrorReport/Msg"/>
                                </xsl:attribute>
                            </xsl:if>
                        </xsl:when>
                        <xsl:when test="exists($_error_SOAPSendReply)">
                            <xsl:attribute name="ns6:ERROR_DESCRIPTION">
                                <xsl:value-of select="&quot;Error while sending SOAP reply&quot;"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="ns6:ERROR_DESCRIPTION">
                                <xsl:value-of select="&quot;General Error&quot;"/>
                            </xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </ResultStatus>
            </LogError>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="LogSOAPRequest">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>246</pd:x>
        <pd:y>80</pd:y>
        <config>
            <processName>/Common/Sub Processes/Sub_LogMessage.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <ns2:AnyXMLMessage>
                    <xsl:copy-of select="$SOAPEventSource/inputMessage"/>
                </ns2:AnyXMLMessage>
                <msgCode>
                    <xsl:value-of select="&quot;ASTRID-BW-01004&quot;"/>
                </msgCode>
                <message>
                    <xsl:value-of select="concat(&quot;Received SOAP request on port &quot;,$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/Outbound/SOAP/ServerPort)"/>
                </message>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SOAPSendReply">
        <pd:type>com.tibco.plugin.soap.SOAPSendReplyActivity</pd:type>
        <pd:resourceType>ae.activities.SOAPSendReplyUI</pd:resourceType>
        <pd:x>825</pd:x>
        <pd:y>184</pd:y>
        <config>
            <eventSource>SOAPEventSource</eventSource>
        </config>
        <pd:inputBindings>
            <outputMessage>
                <xsl:copy-of select="$MapSoapReply/pfx30:GetAgendaResponse"/>
            </outputMessage>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="LogSOAPReply">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>750</pd:x>
        <pd:y>82</pd:y>
        <config>
            <processName>/Common/Sub Processes/Sub_LogMessage.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <ns2:AnyXMLMessage>
                    <xsl:copy-of select="$MapSoapReply/pfx30:GetAgendaResponse"/>
                </ns2:AnyXMLMessage>
                <msgCode>
                    <xsl:value-of select="&quot;ASTRID-BW-01005&quot;"/>
                </msgCode>
                <message>
                    <xsl:value-of select="concat(&quot;Sending SOAP response for port &quot;,$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/Outbound/SOAP/ServerPort)"/>
                </message>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapSoapReply">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>682</pd:x>
        <pd:y>179</pd:y>
        <config>
            <element ref="pfx30:GetAgendaResponse"/>
        </config>
        <pd:inputBindings>
            <pfx30:GetAgendaResponse>
                <pfx30:GUID>
                    <xsl:copy-of select="$SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:GUID/@xsi:nil"/>
                    <xsl:value-of select="$SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:GUID"/>
                </pfx30:GUID>
                <pfx30:ServiceVisits>
                    <xsl:for-each select="$Send-Rendezvous-Request/ActivityOutput/body/SERVICE_VISIT_LIST">
                        <pfx30:ServiceVisit>
                            <xsl:choose>
                                <xsl:when test="exists(current()/INDEX)">
                                    <pfx30:index>
                                        <xsl:value-of select="current()/INDEX"/>
                                    </pfx30:index>
                                </xsl:when>
                                <xsl:otherwise>
                                    <pfx30:index xsi:nil="true"/>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:choose>
                                <xsl:when test="exists(current()/DATE)">
                                    <pfx30:date>
                                        <xsl:value-of select="current()/DATE"/>
                                    </pfx30:date>
                                </xsl:when>
                                <xsl:otherwise>
                                    <pfx30:date xsi:nil="true"/>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:choose>
                                <xsl:when test="exists(current()/START_TIME)">
                                    <pfx30:startTime>
                                        <xsl:value-of select="current()/START_TIME"/>
                                    </pfx30:startTime>
                                </xsl:when>
                                <xsl:otherwise>
                                    <pfx30:startTime xsi:nil="true"/>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:choose>
                                <xsl:when test="exists(current()/END_TIME)">
                                    <pfx30:endTime>
                                        <xsl:value-of select="current()/END_TIME"/>
                                    </pfx30:endTime>
                                </xsl:when>
                                <xsl:otherwise>
                                    <pfx30:endTime xsi:nil="true"/>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:choose>
                                <xsl:when test="exists(current()/AVAILABLE_APPOINTMENTS)">
                                    <pfx30:availableAppointments>
                                        <xsl:value-of select="current()/AVAILABLE_APPOINTMENTS"/>
                                    </pfx30:availableAppointments>
                                </xsl:when>
                                <xsl:otherwise>
                                    <pfx30:availableAppointments xsi:nil="true"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </pfx30:ServiceVisit>
                    </xsl:for-each>
                </pfx30:ServiceVisits>
            </pfx30:GetAgendaResponse>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="FillCMH">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>178</pd:x>
        <pd:y>175</pd:y>
        <config>
            <processName>/Common/Sub Processes/Sub_FillCMH.process</processName>
        </config>
        <pd:inputBindings>
            <CMH-IN>
                <ExistingCMH>
                    <COMPONENT-ID>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentId"/>
                    </COMPONENT-ID>
                    <COMPONENT-VERSION>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentVersion"/>
                    </COMPONENT-VERSION>
                    <COPY_ATTRIBUTES>
                        <xsl:value-of select="&quot;true&quot;"/>
                    </COPY_ATTRIBUTES>
                    <EXTENT_TRACKING>
                        <xsl:value-of select="&quot;false&quot;"/>
                    </EXTENT_TRACKING>
                    <CMH>
                        <ns1:ID>
                            <xsl:value-of select="&quot;521&quot;"/>
                        </ns1:ID>
                        <ns1:NAME>
                            <xsl:value-of select="&quot;GetAgenda&quot;"/>
                        </ns1:NAME>
                        <ns1:FID>
                            <xsl:value-of select="concat($SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:researchDepartmentCode,'-', $SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:researchEmployeeCode)"/>
                        </ns1:FID>
                        <ns1:MID>
                            <xsl:value-of select="&quot;521.10&quot;"/>
                        </ns1:MID>
                        <ns1:PARADIGM>
                            <xsl:value-of select="&quot;REQUEST&quot;"/>
                        </ns1:PARADIGM>
                        <ns1:OBJECT>
                            <xsl:value-of select="&quot;CO_GetAgenda&quot;"/>
                        </ns1:OBJECT>
                        <ns1:VERSION>
                            <xsl:value-of select="&quot;1.0&quot;"/>
                        </ns1:VERSION>
                        <ns1:FROM>
                            <xsl:attribute name="ns1:COMPONENT_ID">
                                <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentId"/>
                            </xsl:attribute>
                            <xsl:attribute name="ns1:COMPONENT_VERSION">
                                <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentVersion"/>
                            </xsl:attribute>
                        </ns1:FROM>
                        <ns1:TO>
                            <xsl:attribute name="ns1:DESTINATION">
                                <xsl:value-of select="concat($_globalVariables/ns8:GlobalVariables/Env, &quot;.FIXED.Order.EnginAdapter.Request.GetAgenda.1&quot;)"/>
                            </xsl:attribute>
                        </ns1:TO>
                        <ns1:TRACKING>
                            <ns1:MESSAGE_ID>
                                <xsl:value-of select="$SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:GUID"/>
                            </ns1:MESSAGE_ID>
                            <ns1:ITEM>
                                <xsl:attribute name="ns1:APPINFO">
                                    <xsl:value-of select="concat($_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentDomain,&quot;.&quot;,$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/ComponentId)"/>
                                </xsl:attribute>
                                <xsl:attribute name="ns1:EVENT">
                                    <xsl:value-of select="&quot;GetAgenda&quot;"/>
                                </xsl:attribute>
                                <xsl:attribute name="ns1:TIMESTAMP">
                                    <xsl:value-of select="ns0:timestamp()"/>
                                </xsl:attribute>
                            </ns1:ITEM>
                        </ns1:TRACKING>
                        <ns1:ATTRIBUTE>
                            <xsl:attribute name="ns1:NAME">
                                <xsl:value-of select="&quot;maxNumberReturned&quot;"/>
                            </xsl:attribute>
                            <xsl:attribute name="ns1:VALUE">
                                <xsl:value-of select="&quot;300&quot;"/>
                            </xsl:attribute>
                        </ns1:ATTRIBUTE>
                        <ns1:ATTRIBUTE>
                            <xsl:attribute name="ns1:NAME">
                                <xsl:value-of select="&quot;originatingApplicationID&quot;"/>
                            </xsl:attribute>
                            <xsl:attribute name="ns1:VALUE">
                                <xsl:value-of select="&quot;NOC&quot;"/>
                            </xsl:attribute>
                        </ns1:ATTRIBUTE>
                    </CMH>
                </ExistingCMH>
            </CMH-IN>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="LogSOAPErrReply">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>605</pd:x>
        <pd:y>407</pd:y>
        <config>
            <processName>/Common/Sub Processes/Sub_LogMessage.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <ns2:AnyXMLMessage>
                    <xsl:copy-of select="$MapSoapErrReply/pfx4:ErrorMessage"/>
                </ns2:AnyXMLMessage>
                <msgCode>
                    <xsl:value-of select="&quot;ASTRID-BW-01005&quot;"/>
                </msgCode>
                <message>
                    <xsl:value-of select="concat(&quot;Sending SOAP response for port &quot;,$_globalVariables/ns8:GlobalVariables/ASTRIDAdapter/Outbound/SOAP/ServerPort)"/>
                </message>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapSoapErrReply">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>488</pd:x>
        <pd:y>408</pd:y>
        <config>
            <element ref="pfx4:ErrorMessage"/>
        </config>
        <pd:inputBindings>
            <pfx4:ErrorMessage>
                <xsl:choose>
                    <xsl:when test="exists($Send-Rendezvous-Request)">
                        <xsl:copy-of select="$Send-Rendezvous-Request/ActivityOutput/body/ns1:CMH"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <ns1:CMH>
                            <xsl:copy-of select="$FillCMH/CMH/ancestor-or-self::*/namespace::node()"/>
                            <xsl:copy-of select="$FillCMH/CMH/@*"/>
                            <xsl:copy-of select="$FillCMH/CMH/node()"/>
                        </ns1:CMH>
                    </xsl:otherwise>
                </xsl:choose>
                <pfx4:RESULT_STATUS>
                    <xsl:copy-of select="$Log-Error/ErrorStatus/ancestor-or-self::*/namespace::node()"/>
                    <xsl:copy-of select="$Log-Error/ErrorStatus/@*"/>
                    <xsl:copy-of select="$Log-Error/ErrorStatus/node()"/>
                </pfx4:RESULT_STATUS>
            </pfx4:ErrorMessage>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SoapEventError">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>79</pd:x>
        <pd:y>304</pd:y>
        <config>
            <element>
                <xsd:element name="DUMMY">
                    <xsd:complexType>
                        <xsd:sequence/>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <DUMMY/>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Send Rendezvous Request">
        <pd:type>com.tibco.plugin.tibrv.RVRequestActivity</pd:type>
        <pd:resourceType>ae.rvpalette.RVRequestActivity</pd:resourceType>
        <pd:x>503</pd:x>
        <pd:y>185</pd:y>
        <config>
            <wantsValidationForOutput>true</wantsValidationForOutput>
            <wantsFiltrationForOutput>false</wantsFiltrationForOutput>
            <wantsXMLCompliantFieldNames>false</wantsXMLCompliantFieldNames>
            <wantsXMLCompliantFieldNamesOutput>false</wantsXMLCompliantFieldNamesOutput>
            <sharedChannel>/ASTRIDAdapter/Shared Resources/RV Transport.rvtransport</sharedChannel>
            <subject/>
            <operationTimeout>60000</operationTimeout>
            <xmlEncoding>true</xmlEncoding>
            <inputXsdString ref="pfx31:GetAgenda"/>
            <outputXsdString ref="pfx32:GetAgenda"/>
        </config>
        <pd:inputBindings>
            <ActivityInput>
                <subject>
                    <xsl:value-of select="$FillCMH/CMH/ns1:TO/@ns1:DESTINATION"/>
                </subject>
                <body>
                    <xsl:copy-of select="$MapRV/pfx31:GetAgenda/ancestor-or-self::*/namespace::node()"/>
                    <xsl:copy-of select="$MapRV/pfx31:GetAgenda/@*"/>
                    <xsl:copy-of select="$MapRV/pfx31:GetAgenda/node()"/>
                </body>
            </ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SOAPSendFault">
        <pd:type>com.tibco.plugin.soap.SOAPSendFaultActivity</pd:type>
        <pd:resourceType>ae.activities.SOAPSendFaultUI</pd:resourceType>
        <pd:x>719</pd:x>
        <pd:y>405</pd:y>
        <config>
            <faultMessage>&lt;Default&gt;</faultMessage>
            <eventSource>SOAPEventSource</eventSource>
        </config>
        <pd:inputBindings>
            <defaultFaultElement>
                <faultcode>
                    <xsl:value-of select="$MapSoapErrReply/pfx4:ErrorMessage/pfx4:RESULT_STATUS/@ns6:ERROR_CODE"/>
                </faultcode>
                <faultstring>
                    <xsl:value-of select="$MapSoapErrReply/pfx4:ErrorMessage/pfx4:RESULT_STATUS/@ns6:ERROR_DESCRIPTION"/>
                </faultstring>
            </defaultFaultElement>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="LogRVResponse">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>597</pd:x>
        <pd:y>78</pd:y>
        <config>
            <processName>/Common/Sub Processes/Sub_LogMessage.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <ns2:AnyXMLMessage>
                    <xsl:copy-of select="$Send-Rendezvous-Request/ActivityOutput/body"/>
                </ns2:AnyXMLMessage>
                <msgCode>
                    <xsl:value-of select="&quot;ASTRID-BW-01006&quot;"/>
                </msgCode>
                <message>
                    <xsl:value-of select="concat(&quot;Receiving RV message on subject &quot;, $FillCMH/CMH/ns1:TO/@ns1:DESTINATION)"/>
                </message>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="LogRVRequest">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>418</pd:x>
        <pd:y>83</pd:y>
        <config>
            <processName>/Common/Sub Processes/Sub_LogMessage.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <ns2:AnyXMLMessage>
                    <xsl:copy-of select="$MapRV/pfx31:GetAgenda"/>
                </ns2:AnyXMLMessage>
                <msgCode>
                    <xsl:value-of select="&quot;ASTRID-BW-01005&quot;"/>
                </msgCode>
                <message>
                    <xsl:value-of select="concat(&quot;Sending RV message on subject &quot;, $FillCMH/CMH/ns1:TO/@ns1:DESTINATION)"/>
                </message>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapRV">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>335</pd:x>
        <pd:y>179</pd:y>
        <config>
            <element ref="pfx31:GetAgenda"/>
        </config>
        <pd:inputBindings>
            <pfx31:GetAgenda>
                <ns1:CMH>
                    <xsl:copy-of select="$FillCMH/CMH/ancestor-or-self::*/namespace::node()"/>
                    <xsl:copy-of select="$FillCMH/CMH/@*"/>
                    <xsl:copy-of select="$FillCMH/CMH/node()"/>
                </ns1:CMH>
                <xsl:if test="$SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:researchDepartmentCode">
                    <MM007_RESEARCH_DEPARTMENT_CODE>
                        <xsl:value-of select="$SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:researchDepartmentCode"/>
                    </MM007_RESEARCH_DEPARTMENT_CODE>
                </xsl:if>
                <xsl:if test="$SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:researchEmployeeCode">
                    <MM007_RESEARCH_EMPLOYEE_CODE>
                        <xsl:value-of select="$SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:researchEmployeeCode"/>
                    </MM007_RESEARCH_EMPLOYEE_CODE>
                </xsl:if>
                <xsl:if test="exists($SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:startDate)&#xA;and&#xA;not($SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:startDate/@xsi:nil!=(&quot;true&quot;,&quot;1&quot;))&#xA;and&#xA;$SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:startDate !=&quot;&quot;">
                    <START_DATE>
                        <xsl:value-of select="$SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:startDate"/>
                    </START_DATE>
                </xsl:if>
                <xsl:if test="exists($SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:endDate)&#xA;and&#xA;not($SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:endDate/@xsi:nil!=(&quot;true&quot;,&quot;1&quot;))&#xA;and&#xA;$SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:endDate !=&quot;&quot;">
                    <END_DATE>
                        <xsl:value-of select="$SOAPEventSource/inputMessage/pfx30:GetAgendaRequest/pfx30:endDate"/>
                    </END_DATE>
                </xsl:if>
            </pfx31:GetAgenda>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>SOAPEventSource</pd:from>
        <pd:to>FillCMH</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SOAPEventSource</pd:from>
        <pd:to>SoapEventError</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-52429</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log Error</pd:from>
        <pd:to>MapSoapErrReply</pd:to>
        <pd:xpathDescription/>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>FillCMH</pd:from>
        <pd:to>LogSOAPRequest</pd:to>
        <pd:xpathDescription>otherwise</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>not(exists($SoapEventError))</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>FillCMH</pd:from>
        <pd:to>Log Error</pd:to>
        <pd:xpathDescription>SoapEventError</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-52429</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>exists($SoapEventError)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>MapSoapErrReply</pd:from>
        <pd:to>LogSOAPErrReply</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapSoapReply</pd:from>
        <pd:to>LogSOAPReply</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogSOAPReply</pd:from>
        <pd:to>SOAPSendReply</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SOAPSendReply</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SOAPSendReply</pd:from>
        <pd:to>Log Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapSoapReply</pd:from>
        <pd:to>Log Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SoapEventError</pd:from>
        <pd:to>FillCMH</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Send Rendezvous Request</pd:from>
        <pd:to>LogRVResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Send Rendezvous Request</pd:from>
        <pd:to>Log Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogSOAPErrReply</pd:from>
        <pd:to>SOAPSendFault</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SOAPSendFault</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogRVResponse</pd:from>
        <pd:to>MapSoapReply</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogSOAPRequest</pd:from>
        <pd:to>MapRV</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapRV</pd:from>
        <pd:to>LogRVRequest</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogRVRequest</pd:from>
        <pd:to>Send Rendezvous Request</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapRV</pd:from>
        <pd:to>Log Error</pd:to>
        <pd:xpathDescription> </pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>